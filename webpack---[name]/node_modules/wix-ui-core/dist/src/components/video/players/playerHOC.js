"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var uniqueId = require('lodash/uniqueId');
var constants_1 = require("../constants");

function playerHOC(Player, mapPropsToPlayer, mapMethodsToPlayer) {
    var _a;
    return _a = /** @class */ (function(_super) {
            tslib_1.__extends(class_1, _super);

            function class_1() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.isPlayingNow = false;
                _this.state = {
                    playerKey: uniqueId('player-'),
                };
                _this._playerRef = function(instance) {
                    _this.ref = instance;
                };
                return _this;
            }
            class_1.prototype.componentDidMount = function() {
                this._broadcastEvents();
            };
            class_1.prototype.componentDidUpdate = function(prevProps, prevState) {
                if (this.state.playerKey !== prevState.playerKey) {
                    this._broadcastEvents();
                }
            };
            class_1.prototype.UNSAFE_componentWillReceiveProps = function(nextProps) {
                var currentProps = this.props;
                for (var propKey in nextProps) {
                    var method = mapPropsToPlayer[propKey];
                    var isPropChanged = nextProps[propKey] !== currentProps[propKey];
                    if (method && isPropChanged) {
                        this._callPlayer(method, nextProps[propKey]);
                    }
                }
            };
            class_1.prototype._callPlayer = function(method) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                var player = this.ref.player;
                try {
                    if (typeof method === 'string') {
                        return player[method].apply(player, args);
                    }
                    if (typeof method === 'function') {
                        return method.apply(void 0, [this, player].concat(args));
                    }
                } catch (error) {
                    this.props.onError(error);
                }
            };
            class_1.prototype._broadcastEvents = function() {
                var _this = this;
                this.ref.eventEmitter.once(constants_1.EVENTS.PLAYING, function() {
                    _this.props.onFirstPlay();
                });
                this.ref.eventEmitter.once(constants_1.EVENTS.ENDED, function() {
                    _this.props.onFirstEnded();
                });
                this.ref.eventEmitter.on(constants_1.EVENTS.PLAYING, function() {
                    _this.isPlayingNow = true;
                    _this.props.onPlay();
                });
                this.ref.eventEmitter.on(constants_1.EVENTS.PAUSED, function() {
                    _this.isPlayingNow = false;
                    _this.props.onPause();
                });
                this.ref.eventEmitter.on(constants_1.EVENTS.ENDED, function() {
                    _this.isPlayingNow = false;
                    _this.props.onEnded();
                });
            };
            class_1.prototype.reload = function() {
                this.setState({
                    playerKey: uniqueId('player-'),
                });
            };
            class_1.prototype.getPlayerAPI = function() {
                return this.ref.player;
            };
            class_1.prototype.play = function() {
                var _this = this;
                var result = this._callPlayer(mapMethodsToPlayer.play);
                return result instanceof Promise ?
                    result :
                    new Promise(function(resolve) {
                        _this.ref.eventEmitter.once(constants_1.EVENTS.PLAYING, function() {
                            return resolve();
                        });
                    });
            };
            class_1.prototype.pause = function() {
                var _this = this;
                var result = this._callPlayer(mapMethodsToPlayer.pause);
                return result instanceof Promise ?
                    result :
                    new Promise(function(resolve) {
                        _this.ref.eventEmitter.once(constants_1.EVENTS.PAUSED, function() {
                            return resolve();
                        });
                    });
            };
            class_1.prototype.togglePlay = function() {
                var _this = this;
                var method = this.isPlayingNow ? 'pause' : 'play';
                var event = this.isPlayingNow ? constants_1.EVENTS.PAUSED : constants_1.EVENTS.PLAYING;
                var result = this._callPlayer(mapMethodsToPlayer[method]);
                return result instanceof Promise ?
                    result :
                    new Promise(function(resolve) {
                        _this.ref.eventEmitter.once(event, function() {
                            return resolve();
                        });
                    });
            };
            class_1.prototype.stop = function() {
                this._callPlayer(mapMethodsToPlayer.stop);
                return Promise.resolve();
            };
            class_1.prototype.getDuration = function() {
                return this._callPlayer(mapMethodsToPlayer.getDuration) || 0;
            };
            class_1.prototype.getCurrentTime = function() {
                return this._callPlayer(mapMethodsToPlayer.getCurrentTime) || 0;
            };
            class_1.prototype.seekTo = function(amount) {
                this._callPlayer(mapMethodsToPlayer.seekTo, amount);
                return Promise.resolve();
            };
            class_1.prototype.getVolume = function() {
                return this._callPlayer(mapMethodsToPlayer.getVolume) || 0;
            };
            class_1.prototype.setVolume = function(fraction) {
                return this._callPlayer(mapMethodsToPlayer.setVolume, fraction);
            };
            class_1.prototype.isMuted = function() {
                return this._callPlayer(mapMethodsToPlayer.isMuted);
            };
            class_1.prototype.isPlaying = function() {
                return this.isPlayingNow;
            };
            class_1.prototype.mute = function() {
                this._callPlayer(mapMethodsToPlayer.mute);
                return Promise.resolve();
            };
            class_1.prototype.unMute = function() {
                this._callPlayer(mapMethodsToPlayer.unMute);
                return Promise.resolve();
            };
            class_1.prototype.render = function() {
                return (React.createElement(Player, tslib_1.__assign({
                    key: this.state.playerKey,
                    ref: this._playerRef
                }, this.props)));
            };
            return class_1;
        }(React.Component)),
        _a.propTypes = Player.propTypes,
        _a.displayName = Player.displayName,
        _a;
}
exports.default = playerHOC;
//# sourceMappingURL=playerHOC.js.map