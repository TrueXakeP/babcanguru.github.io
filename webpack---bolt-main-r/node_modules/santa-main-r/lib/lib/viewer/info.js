'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = info;

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }
        return arr2;
    } else {
        return Array.from(arr);
    }
}

function info(window, _, _ref) {
    var dc = _ref.dc,
        renderType = _ref.renderType,
        caching = _ref.caching,
        microPop = _ref.microPop,
        wixBoltExclusionReason = _ref.wixBoltExclusionReason;

    if (!console.table) {
        return function() {
            return console.log('Old browser');
        };
    }

    var TITLE = 'color:blue; font-weight:bold';

    var document = window.document,
        navigator = window.navigator,
        performance = window.performance,
        getComputedStyle = window.getComputedStyle,
        santaBase = window.santaBase,
        boltBase = window.boltBase,
        clientSideRender = window.clientSideRender,
        timeSpentInSSR = window.timeSpentInSSR,
        santaRenderingError = window.santaRenderingError,
        rendererModel = window.rendererModel,
        _window$ssrInfo = window.ssrInfo,
        ssrInfo = _window$ssrInfo === undefined ? {} : _window$ssrInfo;

    var total = function total(field) {
        return function(records) {
            return _.reduce(records, function(result, record) {
                return result + record[field];
            }, 0);
        };
    };
    var totalTransfer = total('transferSize');
    var totalSize = total('decodedBodySize');

    var round = function round(record) {
        return _.reduce(record, function(result, value, key) {
            result[key] = _.isNumber(value) ? Math.round(value) : value;
            return result;
        }, {});
    };

    var kb = function kb(bytes) {
        return bytes >> 10;
    };
    var mb = function mb(bytes) {
        return Math.round(bytes / 1024 / 1024);
    };

    var fixedNames = {
        2: 'First reLayout',
        3: 'Viewer Interactive',
        33: 'Page Interactive*',
        101: 'Page Navigation Start',
        103: 'Page Navigation Complete'
    };

    function fixStageName(entry) {
        var name = entry.name;

        var m = name.match(/\(beat (\d+)\)/);
        if (m) {
            var fixedName = fixedNames[m[1]];
            if (fixedName) {
                return _.assign({}, entry, {
                    name: fixedName + ' ' + m[0]
                });
            }
        }
        return entry;
    }

    var getEntries = function getEntries(resourceType) {
        return function(filter) {
            return _(resourceType ? performance.getEntriesByType(resourceType) : performance.getEntries()).invokeMap('toJSON').filter(filter).value();
        };
    };
    var getResources = getEntries('resource');
    var getNavigation = function getNavigation() {
        return getEntries('navigation')(_.identity)[0];
    };
    var getStages = function getStages() {
        return _.map(getEntries()(function(_ref2) {
            var entryType = _ref2.entryType;
            return ['mark', 'paint'].includes(entryType);
        }), fixStageName);
    };

    function findImgElem(_ref3) {
        var initiatorType = _ref3.initiatorType,
            name = _ref3.name;

        switch (initiatorType) {
            case 'img':
                return document.querySelector('img[src="' + name + '"]');
            case 'css':
                return _.find(document.querySelectorAll('.pro-gallery canvas.gallery-item-visible'), function(el) {
                    return getComputedStyle(el).getPropertyValue('background-image') === 'url("' + name + '")';
                });
        }
    }

    return function() {
        var PerformanceObserver = window.PerformanceObserver;

        if (PerformanceObserver && _.includes(PerformanceObserver.supportedEntryTypes, 'largest-contentful-paint')) {
            new PerformanceObserver(function(entryList, observer) {
                observer.disconnect();
                _info(entryList.getEntries());
            }).observe({
                type: 'largest-contentful-paint',
                buffered: true
            });
        } else {
            _info();
        }

        function _info(lcps) {
            console.log('%cSystem info', TITLE);
            var system = [
                ['User agent', navigator.userAgent]
            ];
            if (navigator.connection && navigator.connection.effectiveType) {
                system.push(['Network type', navigator.connection.effectiveType]);
            }
            if (performance.memory && performance.memory.jsHeapSizeLimit) {
                system.push(['Heap size (MB)', mb(performance.memory.jsHeapSizeLimit)]);
            }
            console.table(system);

            console.log('%cResources info', TITLE);
            var scripts = getResources(function(_ref4) {
                var initiatorType = _ref4.initiatorType,
                    name = _ref4.name;
                return initiatorType === 'script' || /\.js$/.test(name);
            });
            var fonts = getResources(function(_ref5) {
                var initiatorType = _ref5.initiatorType,
                    name = _ref5.name;
                return initiatorType === 'css' && /font/i.test(name);
            });
            var imgs = getResources(function(_ref6) {
                var initiatorType = _ref6.initiatorType,
                    name = _ref6.name;
                return initiatorType === 'img' || initiatorType === 'css' && /\.(?:jpe?g|png|webp|gif)/i.test(name);
            });

            var resources = [
                ['Script file count', scripts.length],
                ['Script file size (KB)', kb(totalTransfer(scripts))],
                ['Script protocol', scripts[0].nextHopProtocol],
                ['Fonts file count', fonts.length],
                ['Fonts file size (KB)', kb(totalTransfer(fonts))],
                ['Image file count', imgs.length],
                ['Image file size (KB)', kb(totalTransfer(imgs))],
                ['iframe count', document.querySelectorAll('iframe').length],
                ['Comps count', document.querySelectorAll('#SITE_ROOT *[id^=comp-]').length]
            ];
            if (clientSideRender) {
                var xhrs = getResources(function(_ref7) {
                    var name = _ref7.name;
                    return name.includes('fixedData');
                });
                resources.push(['Page JSONs size (KB)', kb(totalSize(xhrs))]);
            }
            console.table(resources);

            var navigation = getNavigation();
            if (navigation) {
                console.log('%cResponse info', TITLE);
                var HTMLserver = [
                    ['Load type', navigation.type],
                    ['Using DC', dc]
                ];
                if (microPop) {
                    HTMLserver.push(['Using micro-POP', microPop]);
                }
                HTMLserver.push(['Size over the wire (KB)', kb(navigation.transferSize)], ['Size on client (KB)', kb(navigation.decodedBodySize)], ['DNS time', navigation.domainLookupEnd - navigation.domainLookupStart]);
                if (navigation.secureConnectionStart) {
                    HTMLserver.push(['TCP handshake', navigation.secureConnectionStart - navigation.connectStart], ['SSL handshake', navigation.connectEnd - navigation.secureConnectionStart]);
                } else {
                    HTMLserver.push(['TCP handshake', navigation.connectEnd - navigation.connectStart]);
                }
                HTMLserver.push(['Request / response', navigation.responseStart - navigation.requestStart]);
                console.table(_.map(HTMLserver, round));
            }

            console.log('%cTiming info', TITLE);
            var stages = getStages();

            if (navigation) {
                stages.push({
                    name: 'TTFB',
                    startTime: navigation.responseStart
                }, {
                    name: 'HTML Loaded',
                    startTime: navigation.responseEnd
                });
            }

            var interactive = _.find(stages, function(_ref8) {
                var name = _ref8.name;
                return name.includes('(beat 33)');
            }) || _.find(stages, function(_ref9) {
                var name = _ref9.name;
                return name.includes('(beat 3)');
            });
            if (interactive) {
                var lastVisibleImg = _(imgs).filter(function(_ref10) {
                    var startTime = _ref10.startTime;
                    return startTime < interactive.startTime;
                }).sortBy(function(_ref11) {
                    var startTime = _ref11.startTime,
                        duration = _ref11.duration;
                    return -(startTime + (duration || 1000000));
                }).find(function(img) {
                    var el = findImgElem(img);
                    if (!el || el.hidden || getComputedStyle(el).opacity === '0') {
                        return false;
                    }
                    var rect = el.getBoundingClientRect();
                    return rect.width > 0 && rect.height > 0 && rect.top < (window.innerHeight || document.documentElement.clientHeight);
                });
                if (lastVisibleImg) {
                    stages.push({
                        name: 'Visible Images Received*',
                        startTime: lastVisibleImg.startTime + lastVisibleImg.duration
                    });
                }
                var lcp = _(lcps).filter(function(_ref12) {
                    var url = _ref12.url,
                        startTime = _ref12.startTime;

                    if (url) {
                        startTime = performance.getEntriesByName(url)[0].startTime;
                    }
                    return startTime < interactive.startTime;
                }).maxBy('startTime');
                if (lcp) {
                    stages.push({
                        name: 'largest-contentful-paint',
                        startTime: lcp.startTime
                    });
                }
            }

            console.table(_(stages).sortBy('startTime').map(round).value(), ['name', 'startTime']);

            console.log('%cSession info', TITLE);

            var clientSpecMap = rendererModel.clientSpecMap,
                metaSiteId = rendererModel.metaSiteId,
                landingPageId = rendererModel.landingPageId,
                _rendererModel$platfo = rendererModel.platformControllersOnPage,
                platformControllersOnPage = _rendererModel$platfo === undefined ? {} : _rendererModel$platfo,
                pagesPlatformApplications = rendererModel.pagesPlatformApplications;

            var hasCorvid = _.get(pagesPlatformApplications, ['wixCode', landingPageId]);
            var platformApps = _.reduce(platformControllersOnPage[landingPageId], function(acc, value, key) {
                var spec = _.find(clientSpecMap, {
                    appDefinitionId: key
                });
                return [].concat(_toConsumableArray(acc), [spec && spec.appDefinitionName || key]);
            }, hasCorvid ? ['Corvid'] : []);

            var isBolt = renderType === 'bolt';
            var version = isBolt ? boltBase : santaBase;
            var session = [
                ['Metasite ID', metaSiteId],
                ['Landing page ID', landingPageId],
                ['Version', renderType + ' (' + version.match(/\/([^/]+)$/)[1] + ')']
            ];
            if (!isBolt && wixBoltExclusionReason) {
                session.push(['Bolt exclusion reason', wixBoltExclusionReason]);
            }

            if (clientSideRender) {
                session.push(['No SSR reason', santaRenderingError && santaRenderingError.errorInfo || 'Unknown']);
            } else {
                var tssr = ssrInfo.timeSpentInSSR || timeSpentInSSR || 'unknown';
                session.push(['SSR caching', caching + ' (' + tssr + ')']);
                if (caching === 'none' && ssrInfo.cacheExclusionReason) {
                    session.push(['SSR no cache reason', ssrInfo.cacheExclusionReason]);
                }
            }

            if (platformApps.length) {
                session.push(['Platform apps', platformApps.join()]);
            }

            console.table(session);
        }
    };
}
//# sourceMappingURL=info.js.map