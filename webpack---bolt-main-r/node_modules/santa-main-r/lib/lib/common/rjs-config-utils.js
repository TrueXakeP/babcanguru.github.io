'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isExperimentOpen = exports.mergeInto = exports.scriptLocation = exports.node = exports.third = exports.thirdObjUrl = exports.unpkgObj = exports.unpkg = exports.unpkgOrNodeObj = exports.unpkgOrNode = undefined;

var _joinURL = require('./joinURL');

var _joinURL2 = _interopRequireDefault(_joinURL);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

/**
 * builds an unpkg url e.g.
 * https://static.parastorage.com/unpkg/lodash@4.17.10/lodash.min.js
 * https://unpkg.parastorage.com/wix-base-ui@2.192.0/dist/base-ui.js
 * @param {string} pkg
 * @param {string} v
 * @param {string} p
 * @returns {string}
 */
function unpkg(pkg, v, p) {
    return 'https://static.parastorage.com/unpkg/' + pkg + '@' + v + '/' + p;
    // return `//unpkg.parastorage.com/${pkg}@${v}/${p}`
}

/**
 * @param {string} pkg
 * @param {string} v
 * @param {string} min
 * @param {string} debug
 * @returns {{min: string, source: string}}
 */
function unpkgObj(pkg, v, min, debug) {
    return {
        min: unpkg(pkg, v, min),
        source: unpkg(pkg, v, debug)
    };
}

/**
 * @param {string} scriptsUrl
 * @param {string} pkg
 * @param {string} v
 * @param {string} min
 * @param {string} debug
 * @returns {{min: url, source: url}}
 */
function thirdObjUrl(scriptsUrl, pkg, v, min, debug) {
    return {
        min: third(scriptsUrl, pkg, v, min),
        source: third(scriptsUrl, pkg, v, debug)
    };
}

/**
 * @param {string} v
 * @param {string} name
 */
function check(v, name) {
    if (typeof v === 'undefined') {
        throw new Error('error ' + name + ' is \'' + v + '\'');
    }
}

/**
 * @param {string} scriptsLocation
 * @param {string} pkg
 * @param {string} version
 * @param {string} path
 * @returns {url}
 */
function third(scriptsLocation, pkg, version, path) {
    check(scriptsLocation, 'scriptsLocation');
    check(pkg, 'pkg');
    check(version, 'version');
    check(path, 'path');
    return (0, _joinURL2.default)(scriptsLocation, 'services', 'third-party', pkg, version, path);
}

// function isLocalSource(window, name) {
//   return isLocal(getQueryUtils(window).getParameterByName('ReactSource'))
// }

/**
 *
 * @param {string} m
 * @param {string} p
 * @returns {string}
 */
function node(m, p) {
    return 'node_modules/' + m + '/' + p;
}

/**
 * @param {*} versions
 * @param {boolean} local
 * @param {string} m
 * @param {string} p
 * @returns {string}
 */
function unpkgOrNode(versions, local, m, p) {
    var actualLocal = isLocal(versions, local, m);
    return actualLocal ? node(m, p) : unpkg(m, versions[m], p);
}

function isLocal(versions, local, m) {
    return local || versions[m] === 'link';
}

/**
 * @param {*} versions
 * @param {boolean} local
 * @param {string} m
 * @param {string} min
 * @param {string} debug
 * @returns {{min: string, source: string}}
 */
function unpkgOrNodeObj(versions, local, m, min, debug) {
    var actualLocal = isLocal(versions, local, m);
    return actualLocal ? nodeObj(m, min, debug) : unpkgObj(m, versions[m], min, debug);
}

/**
 * @param {string} m
 * @param {string} min
 * @param {string} debug
 * @returns {{min: string, source: string}}
 */
function nodeObj(m, min, debug) {
    return {
        min: node(m, min),
        source: node(m, debug)
    };
}

function mergeInto(dst, src) {
    Object.keys(src).forEach(function(k) {
        dst[k] = dst[k] || src[k];
    });
}

/**
 * @param serviceTopology
 * @param name
 * @param fallback
 * @returns {string}
 */
function scriptLocation(serviceTopology, name, fallback) {
    return serviceTopology && serviceTopology.scriptsLocationMap[name] || fallback;
}

/**
 * @param experimentInstance 
 * @param {string} name 
 * @returns {boolean}
 */
function isExperimentOpen(experimentInstance, name) {
    return experimentInstance && typeof experimentInstance.isOpen === 'function' && experimentInstance.isOpen(name);
}

exports.unpkgOrNode = unpkgOrNode;
exports.unpkgOrNodeObj = unpkgOrNodeObj;
exports.unpkg = unpkg;
exports.unpkgObj = unpkgObj;
exports.thirdObjUrl = thirdObjUrl;
exports.third = third;
exports.node = node;
exports.scriptLocation = scriptLocation;
exports.mergeInto = mergeInto;
exports.isExperimentOpen = isExperimentOpen;
//# sourceMappingURL=rjs-config-utils.js.map