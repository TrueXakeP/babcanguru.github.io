'use strict';

exports.__esModule = true;

var _appData = require('../app-data/app-data');

var _performance = require('../performance/performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var Times = function() {
    function Times(appName) {
        _classCallCheck(this, Times);

        this.appName = appName;
        this.apps = {};
        this.apps[appName] = {};
    }

    Times.prototype._getKeyForApp = function _getKeyForApp() {
        var appId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.appName;
        var widgetId = arguments[1];

        return widgetId ? appId + '_' + widgetId : appId;
    };

    Times.prototype.setLoadStarted = function setLoadStarted() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            appId = _ref.appId,
            widgetId = _ref.widgetId;

        var key = this._getKeyForApp(appId, widgetId);

        if (!this.apps[key]) {
            this.apps[key] = {};
        }

        this.apps[key].startLoadTime = _performance2.default.now();
    };

    Times.prototype.getLoadStartTime = function getLoadStartTime() {
        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            appId = _ref2.appId,
            widgetId = _ref2.widgetId;

        var key = this._getKeyForApp(appId, widgetId);
        return Math.floor(this.apps[key] && this.apps[key].startLoadTime || (0, _appData.getStartLoadTime)(key) || 0);
    };

    Times.prototype.getAppLoadTime = function getAppLoadTime() {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            appId = _ref3.appId,
            widgetId = _ref3.widgetId;

        var key = this._getKeyForApp(appId, widgetId);
        return Math.floor(_performance2.default.now() - this.getLoadStartTime(key));
    };

    Times.prototype.getFirstRequestDuration = function getFirstRequestDuration() {
        var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            appId = _ref4.appId,
            widgetId = _ref4.widgetId;

        return this.getLoadStartTime({
            appId: appId,
            widgetId: widgetId
        });
    };

    return Times;
}();

exports.default = Times;