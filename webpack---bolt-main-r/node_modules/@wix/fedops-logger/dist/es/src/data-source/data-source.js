'use strict';

exports.__esModule = true;

var _dataItem = require('../data-items/common/data-item');

var _dataItem2 = _interopRequireDefault(_dataItem);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

/**
 * Data accumulator
 */
var DataSource = function() {
    function DataSource() {
        var _this = this;

        var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, DataSource);

        this.items = [];

        if (item) {
            (typeof item.length === 'undefined' ? [item] : item).forEach(function(item) {
                return _this.addItem(item);
            });
        }
    }

    /**
     * Creates a new DataSource instance and clones internal state.
     *
     * @returns {DataSource}
     */


    DataSource.prototype.clone = function clone() {
        return new DataSource(this.items.slice());
    };

    /**
     * Adds a new item.
     *
     * @param {Object | DataItem} item
     *
     * @return {DataSource} self
     */


    DataSource.prototype.addItem = function addItem(item) {
        this.items.push(item instanceof _dataItem2.default ? item : new _dataItem2.default(item));

        return this;
    };

    /**
     * Merges all added items into one plain object.
     *
     * @returns {Object}
     */


    DataSource.prototype.mergeItems = function mergeItems() {
        var res = {};

        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i];

            if (!item.isActive()) {
                res = null;
                break;
            }

            var data = item.export();

            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    // eslint-disable-line
                    res[key] = data[key];
                }
            }
        }

        return res;
    };

    return DataSource;
}();

exports.default = DataSource;