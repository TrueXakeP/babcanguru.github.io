'use strict';

var CSS_NUMERIC_VALUES = {
    columnCount: 1,
    columns: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    zIndex: 1,
    zoom: 1
};

var addDefaultUnitIfNeeded = function addDefaultUnitIfNeeded(prop, value) {
    return typeof value === 'number' && !CSS_NUMERIC_VALUES[prop] ? value + 'px' : value;
};

var setAttributes = function setAttributes(node, attributes) {
    return node && attributes && Object.keys(attributes).forEach(function(attr) {
        return node.setAttribute(attr, attributes[attr]);
    });
};

var setStyle = function setStyle(node, styleProperties) {
    return node && styleProperties && Object.keys(styleProperties).forEach(function(prop) {
        node.style[prop] = addDefaultUnitIfNeeded(prop, styleProperties[prop]);
    });
};

// 'true'  => true
// 'false' => false
// 'null'  => null
// '42'    => 42
// '42.5'  => 42.5
// '08'    => '08'
// String  => self
var deserializeValue = function deserializeValue(value) {
    if (!value) {
        return value;
    }

    if (value === 'true') {
        return true;
    }

    if (value === 'false') {
        return false;
    }

    if (value === 'null') {
        return null;
    }

    if ('' + +value === value) {
        return +value;
    }

    return value;
};

var getData = function getData(node, key) {
    var shouldDeserializeVal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    return node && shouldDeserializeVal ? deserializeValue(node.dataset[key]) : node.dataset[key];
};

var setData = function setData(node, datasetOverrides) {
    return node && datasetOverrides && Object.assign(node.dataset, datasetOverrides);
};

module.exports = {
    setAttributes: setAttributes,
    setStyle: setStyle,
    getData: getData,
    setData: setData
};
//# sourceMappingURL=domUtils.js.map