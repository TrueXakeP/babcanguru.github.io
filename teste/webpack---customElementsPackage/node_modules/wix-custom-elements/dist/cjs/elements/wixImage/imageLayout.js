'use strict';

function _objectWithoutProperties(obj, keys) {
    var target = {};
    for (var i in obj) {
        if (keys.indexOf(i) >= 0) continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        target[i] = obj[i];
    }
    return target;
}

var biEvents = require('./bi/events');

var _require = require('../../utils/utils'),
    get = _require.get,
    cssStringToObject = _require.cssStringToObject;

var _require2 = require('../../utils/domUtils'),
    setAttributes = _require2.setAttributes,
    setStyle = _require2.setStyle;

var _require3 = require('../../utils/imageUtils'),
    getImageComputedProperties = _require3.getImageComputedProperties,
    getImageSrc = _require3.getImageSrc;

function getDefaultStyles(style) {
    var _style = style,
        width = _style.width,
        height = _style.height,
        styleWithoutDimensions = _objectWithoutProperties(_style, ['width', 'height']); // eslint-disable-line no-unused-vars


    var stylesWithValue = {};
    for (style in styleWithoutDimensions) {
        if (styleWithoutDimensions[style] !== '') {
            stylesWithValue[style] = styleWithoutDimensions[style];
        }
    }
    return stylesWithValue;
}

function getContainerStyle(style, opacity) {
    var styleWithoutDefaults = getDefaultStyles(style);
    if (typeof opacity === 'number') {
        styleWithoutDefaults.opacity = opacity;
    }
    return styleWithoutDefaults;
}

function sendBiEvent(biService, envConsts, imageInfo, imageToLoad, imageComputedProperties) {
    // should send Bi Event if we are on viewer, url includes upscale value lg_1
    var shouldSendBiEvent = envConsts.isViewerMode && imageComputedProperties.uri !== imageToLoad.currentSrc && imageComputedProperties.uri.includes('lg_1');
    if (shouldSendBiEvent) {
        biService.reportBI(biEvents.IMAGE_UPSCALING, {
            originalWidth: imageInfo.imageData.width,
            originalHeight: imageInfo.imageData.height,
            targetWidth: Math.round(imageInfo.containerWidth),
            targetHeight: Math.round(imageInfo.containerHeight),
            devicePixelRatio: Math.floor(envConsts.devicePixelRatio * 100),
            url: imageToLoad.src
        });
    }
}

function measure(id, measures, domNodes, containerId, isSvgImage) {
    var imageNode = domNodes.image;
    if (!imageNode) {
        return;
    }

    var imgSrc = getImageSrc(imageNode, isSvgImage);
    var hasBgScrollEffect = domNodes[id].getAttribute('data-has-bg-scroll-effect') === 'true';

    measures.width = hasBgScrollEffect ? domNodes[containerId].offsetWidth : domNodes[id].offsetWidth;
    measures.height = domNodes[id].offsetHeight;
    measures.containerTop = domNodes[containerId].offsetTop;
    measures.isZoomed = domNodes[id].getAttribute('data-image-zoomed');
    measures.isSvgImage = isSvgImage;
    measures.imgSrc = imgSrc;
    measures.containerId = containerId;
    measures.renderedStyles = domNodes[id].getAttribute('data-style');
}

function computeSourceSets(imageInfo, envConsts, pictureNode) {
    var imageInfoClone = JSON.parse(JSON.stringify(imageInfo));
    imageInfo.imageData.sourceSets.forEach(function(sourceSet) {
        var sourceNode = pictureNode.querySelector('source[media=\'' + sourceSet.mediaQuery + '\']');
        imageInfoClone.imageData.crop = sourceSet.crop;
        imageInfoClone.imageData.displayMode = sourceSet.displayMode;
        imageInfoClone.imageData.focalPoint = sourceSet.focalPoint;
        var imageComputedProperties = getImageComputedProperties(imageInfoClone, envConsts, 'img');
        setAttributes(sourceNode, {
            'data-srcset': get(imageComputedProperties, 'uri')
        });
    });
}

function patch(id, measures, domNodes, imageData, alignType, services, envConsts, loadImage) {
    var style = cssStringToObject(measures.renderedStyles);

    var imageInfo = {
        imageData: imageData,
        containerWidth: measures.isZoomed ? imageData.width : measures.width,
        containerHeight: measures.isZoomed ? imageData.height : measures.height,
        displayMode: imageData.displayMode,
        alignType: alignType
    };

    var imageComputedProperties = void 0;
    if (measures.isSvgImage) {
        imageComputedProperties = getImageComputedProperties(imageInfo, envConsts, 'svg');
        setAttributes(domNodes.svg, measures.isZoomed ? imageComputedProperties.attr.container : {});
    } else {
        imageComputedProperties = getImageComputedProperties(imageInfo, envConsts, 'img');
        setStyle(domNodes.image, get(imageComputedProperties, ['css', 'img']));
    }

    var containerStyle = getContainerStyle(style, imageData.opacity);
    setStyle(domNodes[id], containerStyle);

    var imageToLoad = {
        id: id,
        isSvg: measures.isSvgImage,
        src: get(imageComputedProperties, 'uri'), //this was always like this (using _.get) and it looks like videoThumb images for wixapps explodes here since they dont have a uri -> no imageTransformProps
        absoluteTop: measures.containerTop || 0, // ||parentId is a non structure component (wixapps) -> absoluteTop is 0 for now
        height: measures.height,
        currentSrc: measures.imgSrc
    };

    setAttributes(domNodes[id], {
        'data-src': imageToLoad.src
    });

    if (domNodes.picture) {
        computeSourceSets(imageInfo, envConsts, domNodes.picture);
    }

    if (loadImage) {
        sendBiEvent(services.biService, envConsts, imageInfo, imageToLoad, imageComputedProperties);
        services.imageLoader.loadImage(domNodes[id], imageToLoad);
    }
}

module.exports = {
    measure: measure,
    patch: patch
};
//# sourceMappingURL=imageLayout.js.map