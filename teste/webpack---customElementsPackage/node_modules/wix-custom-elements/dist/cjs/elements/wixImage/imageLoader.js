'use strict';

// exclusion of Edge18: https://jira.wixpress.com/browse/BOLT-1828

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var isEdge18 = function isEdge18(windowObj) {
    return RegExp('Edge\/18').test(windowObj.navigator.userAgent);
};

var isIntersectionObserverSupported = function isIntersectionObserverSupported() {
    return window && 'IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype && 'isIntersecting' in window.IntersectionObserverEntry.prototype && !isEdge18(window);
}; // due to bug in intersectionObserver Edge18 for strips with parallax|reveal effect, images in fixed position

var ImageLoader = function() {
    function ImageLoader(mutationService) {
        _classCallCheck(this, ImageLoader);

        this.mutationService = mutationService;

        if (isIntersectionObserverSupported()) {
            var options = {
                rootMargin: '50% 0px'
            };
            this.intersectionObserver = new IntersectionObserver(this.getViewPortIntersectionHandler(mutationService), options);
        }
    }

    ImageLoader.prototype.getScreenHeight = function getScreenHeight() {
        return window && (window.innerHeight || document.documentElement.clientHeight);
    };

    ImageLoader.prototype.isImageInViewPort = function isImageInViewPort(imageNode) {
        var boundingRect = imageNode.getBoundingClientRect();

        return boundingRect.top + boundingRect.height >= 0 && boundingRect.bottom - boundingRect.height <= this.getScreenHeight();
    };

    ImageLoader.prototype.loadImage = function loadImage(wixImageNode, imageToLoad) {
        if (imageToLoad.currentSrc === imageToLoad.src) {
            return;
        }

        if (!this.intersectionObserver || this.isImageInViewPort(wixImageNode)) {
            this.setImageSource(wixImageNode);
        } else {
            this.intersectionObserver.unobserve(wixImageNode);
            this.intersectionObserver.observe(wixImageNode);
        }
    };

    ImageLoader.prototype.onImageDisconnected = function onImageDisconnected(wixImageNode) {
        if (this.intersectionObserver) {
            this.intersectionObserver.unobserve(wixImageNode);
        }
    };

    ImageLoader.prototype.setImageSource = function setImageSource(wixImageNode) {
        var isSvg = wixImageNode.dataset.isSvg === 'true';
        var imageNode = wixImageNode.querySelector(isSvg ? 'image' : 'img');
        var pictureNode = wixImageNode.querySelector('picture');

        this.mutationService.mutate(function() {
            if (isSvg) {
                imageNode.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', wixImageNode.dataset.src);
            } else {
                imageNode.src = wixImageNode.dataset.src;
            }
            imageNode.dataset.src = '';

            if (pictureNode) {
                Array.from(pictureNode.querySelectorAll('source')).forEach(function(sourceNode) {
                    sourceNode.srcset = sourceNode.dataset.srcset;
                    sourceNode.dataset.srcset = '';
                });
            }
        });
    };

    ImageLoader.prototype.getViewPortIntersectionHandler = function getViewPortIntersectionHandler() {
        var _this = this;

        return function(entries, observer) {
            entries.filter(function(entry) {
                return entry.isIntersecting;
            }).forEach(function(entry) {
                var lazyImage = entry.target;
                _this.setImageSource(lazyImage);
                observer.unobserve(lazyImage);
            });
        };
    };

    return ImageLoader;
}();

module.exports = ImageLoader;
//# sourceMappingURL=imageLoader.js.map