'use strict';

var _require = require('../../utils/domUtils'),
    setStyle = _require.setStyle;

var _require2 = require('../../utils/imageUtils'),
    getImageComputedProperties = _require2.getImageComputedProperties;

function didImageChange() {
    var currentImageUrlCss = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var newUrl = arguments[1];

    return !currentImageUrlCss.includes(newUrl) || !!currentImageUrlCss !== !!newUrl;
}

function updateUrl(domNode, imageCssUrl) {
    var image = new Image();
    image.onload = setStyle.bind(null, domNode, {
        backgroundImage: 'url("' + imageCssUrl + '")'
    });
    image.src = imageCssUrl;
}

function measure(id, measures, domNodes, containerId) {
    var bgImageNode = domNodes[id];
    var hasBgScrollEffect = domNodes[id].dataset.hasBgScrollEffect;
    measures.width = hasBgScrollEffect ? domNodes[containerId].offsetWidth : domNodes[id].offsetWidth;
    measures.height = bgImageNode.offsetHeight;
    measures.currentSrc = bgImageNode.style.backgroundImage;
}

function patch(id, measures, domNodes, imageInfo, envConsts) {
    var bgImageNode = domNodes[id];
    imageInfo.containerWidth = measures.width;
    imageInfo.containerHeight = measures.height;
    var imageTransformData = getImageComputedProperties(imageInfo, envConsts, 'bg');

    if (didImageChange(measures.currentSrc, imageTransformData.uri)) {
        updateUrl(bgImageNode, imageTransformData.uri);
    }
    setStyle(bgImageNode, imageTransformData.css.container);
}

module.exports = {
    measure: measure,
    patch: patch
};
//# sourceMappingURL=bgImageLayout.js.map