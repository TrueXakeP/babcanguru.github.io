'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function() {
    function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i["return"]) _i["return"]();
            } finally {
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    return function(arr, i) {
        if (Array.isArray(arr)) {
            return arr;
        } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
        } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
    };
}();

exports.default = addExperimentsFromQuery;

function addExperimentsFromQuery(runningExperiments, queryUtil, project, urlQueries) {
    var projValuePairRegex = new RegExp('^(' + project + ':)(.*)|(.*)$');

    var experiments = {};
    Object.keys(runningExperiments).forEach(function(key) {
        experiments[key] = runningExperiments[key];
    });

    var setPair = function setPair(_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        experiments[key] = value;
    };
    var getValueIfProj = function getValueIfProj(str) {
        return str.replace(projValuePairRegex, '$2');
    };

    var filterParamsForCurrProj = function filterParamsForCurrProj(paramValue) {
        return paramValue.split(';').map(getValueIfProj).filter(Boolean).join(',');
    };

    var setParamValues = function setParamValues(param, value) {
        var paramValue = queryUtil.getParameterByName(param, urlQueries);
        if (paramValue.indexOf(':') !== -1) {
            // Should be deprecated
            paramValue = filterParamsForCurrProj(paramValue);
        }
        paramValue.split(',').filter(Boolean).map(function(exp) {
            return [exp, value];
        }).forEach(setPair);
    };

    var setProjParamExperiments = function setProjParamExperiments() {
        queryUtil.getParameterByName(project + 'exp', urlQueries).split(',').filter(Boolean).map(function(exp) {
            return exp.split(':');
        }).map(function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2),
                key = _ref4[0],
                value = _ref4[1];

            return [key, value || 'new'];
        }).forEach(setPair);
    };

    //////////////////

    setParamValues('experiments', 'new');
    setParamValues('experimentsoff', 'old');
    setProjParamExperiments();

    return experiments;
}
//# sourceMappingURL=addExperimentsFromQuery.js.map