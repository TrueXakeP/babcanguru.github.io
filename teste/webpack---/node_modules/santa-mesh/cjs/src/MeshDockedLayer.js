"use strict";
var __extends = (this && this.__extends) || (function() {
    var extendStatics = Object.setPrototypeOf ||
        ({
                __proto__: []
            }
            instanceof Array && function(d, b) {
                d.__proto__ = b;
            }) ||
        function(d, b) {
            for (var p in b)
                if (b.hasOwnProperty(p)) d[p] = b[p];
        };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");
var React = require("react");
var dockedLayerUtil_1 = require("./dockedLayerUtil");
var createPinnedLayerStyle = function(gridRows, ie, isFixedLayer, growToContent, marginTop) {
    var _a, _b;
    return (__assign({
        top: 0,
        left: 0,
        position: isFixedLayer ? 'fixed' : 'relative',
        width: '100%',
        height: growToContent ? 'auto' : "calc(100% - " + marginTop + "px)",
        'margin-top': marginTop,
        zIndex: 50,
        display: ie ? '-ms-grid' : 'grid'
    }, (_a = {}, _a[ie ? '-ms-grid-columns' : 'gridTemplateColumns'] = '1fr', _a), (_b = {}, _b[ie ? '-ms-grid-rows' : 'gridTemplateRows'] = gridRows, _b), {
        pointerEvents: 'none'
    }));
};
var getGridArea = function(ie) {
    return (ie ? {
        '-ms-grid-column': '1',
        '-ms-grid-column-span': '1',
        '-ms-grid-row': '1',
        '-ms-grid-row-span': '1'
    } : {
        gridArea: [1, 1, 2, 2].join(' / ')
    });
};
var getDockedStyles = function(dockedCompLayouts, ie, shouldGrowToContent) {
    var defaultPinnedStyle = __assign({
        position: shouldGrowToContent ? 'relative' : 'absolute'
    }, getGridArea(ie), {
        pointerEvents: 'auto'
    });
    return _.reduce(dockedCompLayouts, function(styleMap, compLayout) {
        var childStyle = dockedLayerUtil_1.getDockedStyleForGrid(compLayout, ie);
        styleMap[compLayout.id] = _.assign(childStyle, defaultPinnedStyle);
        return styleMap;
    }, {});
};
var growToContentRow = function(marginTop) {
    return marginTop ? "minmax(calc(100vh - " + marginTop + "px), 1fr)" : 'minmax(100vh, 1fr)';
};
var MeshDockedLayer = /** @class */ (function(_super) {
    __extends(MeshDockedLayer, _super);

    function MeshDockedLayer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MeshDockedLayer.prototype.render = function() {
        if (React.Children.count(this.props.children) === 0) {
            return null;
        }
        var _a = this.props,
            id = _a.id,
            childrenMeshLayout = _a.childrenMeshLayout,
            marginTop = _a.marginTop,
            children = _a.children,
            cssGridVariant = _a.cssGridVariant,
            isFixedLayer = _a.isFixedLayer;
        var growToContent = isFixedLayer ? false : this.props.growToContent;
        var contentRow = growToContent ? growToContentRow(marginTop) : '1fr';
        var ie = cssGridVariant === 'ms';
        var layerStyleId = id + "-style";
        var compsStyles = dockedLayerUtil_1.renderStyle({
            id: layerStyleId,
            stylesMap: getDockedStyles(childrenMeshLayout, ie, growToContent)
        });
        var props = {
            id: id,
            key: id,
            style: createPinnedLayerStyle(contentRow, ie, isFixedLayer, growToContent, marginTop)
        };
        return React.createElement('div', props, [compsStyles].concat(React.Children.toArray(children)));
    };
    return MeshDockedLayer;
}(React.Component));
exports.default = MeshDockedLayer;
//# sourceMappingURL=MeshDockedLayer.js.map