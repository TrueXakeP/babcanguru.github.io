"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");
var React = require("react");
var isDocked = function(layout) {
    return !_.isEmpty(layout.docked);
};
var getDockMargin = function(direction, layout) {
    var _a;
    var margin = _.get(layout, ['docked', direction, 'px'], 0);
    return margin === 0 ? {} : (_a = {}, _a["margin-" + direction] = px(margin), _a);
};
var px = function(units) {
    return units + "px";
};
var CENTER_MARGIN_PROPERTY = {
    hCenter: {
        POSITIVE: 'margin-left',
        NEGATIVE: 'margin-right',
    },
    vCenter: {
        POSITIVE: 'margin-top',
        NEGATIVE: 'margin-bottom',
    }
};
var getCenterMargin = function(direction, layout) {
    var _a, _b;
    var margin = _.get(layout, ['docked', direction, 'px'], 0);
    if (margin === 0) {
        return {};
    }
    if (margin > 0) {
        return _a = {}, _a[CENTER_MARGIN_PROPERTY[direction].POSITIVE] = px(2 * margin), _a;
    }
    return _b = {}, _b[CENTER_MARGIN_PROPERTY[direction].NEGATIVE] = px(-2 * margin), _b;
};
var getHorizontalDockingType = function(layout) {
    if (layout.docked.left && layout.docked.right) {
        return 'hStretch';
    }
    if (layout.docked.hCenter) {
        return 'hCenter';
    }
    if (layout.docked.left) {
        return 'left';
    }
    if ((layout.docked.right)) {
        return 'right';
    }
    return 'none';
};
var getVerticalDockingType = function(layout) {
    if (layout.docked.bottom && layout.docked.top) {
        return 'vStretch';
    }
    if (layout.docked.vCenter) {
        return 'vCenter';
    }
    if (layout.docked.top) {
        return 'top';
    }
    if ((layout.docked.bottom)) {
        return 'bottom';
    }
    return 'none';
};
var hDockStyleMapForGrid = function(ie) {
    var _a, _b, _c;
    var justifySelf = ie ? '-ms-grid-column-align' : 'justify-self';
    return {
        left: (_a = {}, _a[justifySelf] = 'start', _a),
        right: (_b = {}, _b[justifySelf] = 'end', _b),
        hCenter: (_c = {}, _c[justifySelf] = 'center', _c),
        hStretch: {
            width: '100%'
        },
        none: {}
    };
};
var vDockStyleMapForGrid = function(ie) {
    var _a, _b, _c;
    var alignSelf = ie ? '-ms-grid-row-align' : 'align-self';
    return {
        top: (_a = {}, _a[alignSelf] = 'start', _a),
        bottom: (_b = {}, _b[alignSelf] = 'end', _b),
        vCenter: (_c = {}, _c[alignSelf] = 'center', _c),
        vStretch: {
            height: '100%'
        },
        none: {}
    };
};
var hDockStyleMapForFixedPosition = {
    left: {
        left: 0
    },
    right: {
        right: 0
    },
    hCenter: {
        left: '50%',
        transform: 'translateX(-50%)'
    },
    hStretch: {
        left: 0,
        width: '100%'
    },
    none: {}
};
var vDockStyleMapForFixedPosition = function(topOffset) {
    return ({
        top: {
            top: topOffset + "px"
        },
        bottom: {
            bottom: 0
        },
        vCenter: {
            top: "calc(50% + " + topOffset / 2 + "px)",
            transform: 'translateY(-50%)'
        },
        vStretch: {
            top: 0,
            height: '100%'
        },
        none: {}
    });
};
var marginStyleMap = {
    left: _.partial(getDockMargin, 'left'),
    right: _.partial(getDockMargin, 'right'),
    hCenter: _.partial(getCenterMargin, 'hCenter'),
    hStretch: _.noop,
    top: _.partial(getDockMargin, 'top'),
    bottom: _.partial(getDockMargin, 'bottom'),
    vCenter: _.partial(getCenterMargin, 'vCenter'),
    vStretch: _.noop,
    none: _.noop
};
var getHorizontallyDockedStyles = function(layout, isGrid, ie) {
    var dockType = getHorizontalDockingType(layout);
    var dockStyle = isGrid ? hDockStyleMapForGrid(ie)[dockType] : hDockStyleMapForFixedPosition[dockType];
    var marginStyle = marginStyleMap[dockType](layout);
    return _.assign({}, dockStyle, marginStyle);
};
var getVerticallyDockedStyles = function(layout, topOffset, isGrid, ie) {
    var dockType = getVerticalDockingType(layout);
    var dockStyle = isGrid ? vDockStyleMapForGrid(ie)[dockType] : vDockStyleMapForFixedPosition(topOffset)[dockType];
    var marginStyle = marginStyleMap[dockType](layout);
    return _.assign({}, dockStyle, marginStyle);
};
exports.getDockedStyleForGrid = function(layout, ie) {
    if (isDocked(layout)) {
        return _.assign({}, getHorizontallyDockedStyles(layout, true, ie), getVerticallyDockedStyles(layout, 0, true, ie));
    }
    return {};
};
exports.getDockedStyleForFixedPosition = function(layout, topOffset) {
    if (isDocked(layout)) {
        return _.assign({
            position: 'fixed'
        }, getHorizontallyDockedStyles(layout, false, false), getVerticallyDockedStyles(layout, topOffset, false, false));
    }
    return {};
};
var stylePropName = function(key) {
    return _.head(key) === '-' ? key : _.kebabCase(key);
};
exports.renderStyle = function(_a) {
    var id = _a.id,
        stylesMap = _a.stylesMap;
    var styleElementID = "" + id;
    return React.createElement('style', {
        key: styleElementID,
        id: styleElementID,
        dangerouslySetInnerHTML: {
            __html: "\n    " + _(stylesMap).map(function(compStyle, compId) {
                return "\n#" + compId + " {\n" + _(compStyle).omitBy(_.isNil).map(function(value, key) {
                    return "    " + stylePropName(key) + ": " + value + ";";
                }).join('\n') + "\n}";
            }).join('\n')
        }
    });
};
//# sourceMappingURL=dockedLayerUtil.js.map