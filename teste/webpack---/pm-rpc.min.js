(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if (typeof define === 'function' && define.amd)
        define("pmrpc", [], factory);
    else if (typeof exports === 'object')
        exports["pmrpc"] = factory();
    else
        root["pmrpc"] = factory();
})(this, function() {
    return /******/ (function(modules) { // webpackBootstrap
        /******/ // The module cache
        /******/
        var installedModules = {};
        /******/
        /******/ // The require function
        /******/
        function __webpack_require__(moduleId) {
            /******/
            /******/ // Check if module is in cache
            /******/
            if (installedModules[moduleId])
                /******/
                return installedModules[moduleId].exports;
            /******/
            /******/ // Create a new module (and put it into the cache)
            /******/
            var module = installedModules[moduleId] = {
                /******/
                i: moduleId,
                /******/
                l: false,
                /******/
                exports: {}
                /******/
            };
            /******/
            /******/ // Execute the module function
            /******/
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/
            /******/ // Flag the module as loaded
            /******/
            module.l = true;
            /******/
            /******/ // Return the exports of the module
            /******/
            return module.exports;
            /******/
        }
        /******/
        /******/
        /******/ // expose the modules object (__webpack_modules__)
        /******/
        __webpack_require__.m = modules;
        /******/
        /******/ // expose the module cache
        /******/
        __webpack_require__.c = installedModules;
        /******/
        /******/ // identity function for calling harmony imports with the correct context
        /******/
        __webpack_require__.i = function(value) {
            return value;
        };
        /******/
        /******/ // define getter function for harmony exports
        /******/
        __webpack_require__.d = function(exports, name, getter) {
            /******/
            if (!__webpack_require__.o(exports, name)) {
                /******/
                Object.defineProperty(exports, name, {
                    /******/
                    configurable: false,
                    /******/
                    enumerable: true,
                    /******/
                    get: getter
                    /******/
                });
                /******/
            }
            /******/
        };
        /******/
        /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/
        __webpack_require__.n = function(module) {
            /******/
            var getter = module && module.__esModule ?
                /******/
                function getDefault() {
                    return module['default'];
                } :
                /******/
                function getModuleExports() {
                    return module;
                };
            /******/
            __webpack_require__.d(getter, 'a', getter);
            /******/
            return getter;
            /******/
        };
        /******/
        /******/ // Object.prototype.hasOwnProperty.call
        /******/
        __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        /******/
        /******/ // __webpack_public_path__
        /******/
        __webpack_require__.p = "";
        /******/
        /******/ // Load entry module and return exports
        /******/
        return __webpack_require__(__webpack_require__.s = 148);
        /******/
    })
    /************************************************************************/
    /******/
    ([
        /* 0 */
        /***/
        (function(module, exports) {

            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray = Array.isArray;

            module.exports = isArray;


            /***/
        }),
        /* 1 */
        /***/
        (function(module, exports, __webpack_require__) {

            var freeGlobal = __webpack_require__(38);

            /** Detect free variable `self`. */
            var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

            /** Used as a reference to the global object. */
            var root = freeGlobal || freeSelf || Function('return this')();

            module.exports = root;


            /***/
        }),
        /* 2 */
        /***/
        (function(module, exports, __webpack_require__) {

            var Symbol = __webpack_require__(8),
                getRawTag = __webpack_require__(98),
                objectToString = __webpack_require__(123);

            /** `Object#toString` result references. */
            var nullTag = '[object Null]',
                undefinedTag = '[object Undefined]';

            /** Built-in value references. */
            var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
                if (value == null) {
                    return value === undefined ? undefinedTag : nullTag;
                }
                return (symToStringTag && symToStringTag in Object(value)) ?
                    getRawTag(value) :
                    objectToString(value);
            }

            module.exports = baseGetTag;


            /***/
        }),
        /* 3 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseIsNative = __webpack_require__(79),
                getValue = __webpack_require__(100);

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
                var value = getValue(object, key);
                return baseIsNative(value) ? value : undefined;
            }

            module.exports = getNative;


            /***/
        }),
        /* 4 */
        /***/
        (function(module, exports) {

            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
                return value != null && typeof value == 'object';
            }

            module.exports = isObjectLike;


            /***/
        }),
        /* 5 */
        /***/
        (function(module, exports) {

            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
                var type = typeof value;
                return value != null && (type == 'object' || type == 'function');
            }

            module.exports = isObject;


            /***/
        }),
        /* 6 */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = {
                INVOKE: 'invoke',
                RPC_RESOLVE: 'rpc-resolve',
                RPC_REJECT: 'rpc-reject',
                API_DESCRIPTION: 'api-desc',
                INVOKE_FUNCTION: 'invoke-func',
                RESOLVE: 'resolve',
                REJECT: 'reject',
                REQUEST_API: 'request-api'
            };

            /***/
        }),
        /* 7 */
        /***/
        (function(module, exports, __webpack_require__) {

            var listCacheClear = __webpack_require__(109),
                listCacheDelete = __webpack_require__(110),
                listCacheGet = __webpack_require__(111),
                listCacheHas = __webpack_require__(112),
                listCacheSet = __webpack_require__(113);

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype['delete'] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;

            module.exports = ListCache;


            /***/
        }),
        /* 8 */
        /***/
        (function(module, exports, __webpack_require__) {

            var root = __webpack_require__(1);

            /** Built-in value references. */
            var Symbol = root.Symbol;

            module.exports = Symbol;


            /***/
        }),
        /* 9 */
        /***/
        (function(module, exports, __webpack_require__) {

            var eq = __webpack_require__(47);

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
                var length = array.length;
                while (length--) {
                    if (eq(array[length][0], key)) {
                        return length;
                    }
                }
                return -1;
            }

            module.exports = assocIndexOf;


            /***/
        }),
        /* 10 */
        /***/
        (function(module, exports, __webpack_require__) {

            var isKeyable = __webpack_require__(107);

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
                var data = map.__data__;
                return isKeyable(key) ?
                    data[typeof key == 'string' ? 'string' : 'hash'] :
                    data.map;
            }

            module.exports = getMapData;


            /***/
        }),
        /* 11 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getNative = __webpack_require__(3);

            /* Built-in method references that are verified to be native. */
            var nativeCreate = getNative(Object, 'create');

            module.exports = nativeCreate;


            /***/
        }),
        /* 12 */
        /***/
        (function(module, exports, __webpack_require__) {

            var isSymbol = __webpack_require__(27);

            /** Used as references for various `Number` constants. */
            var INFINITY = 1 / 0;

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
                if (typeof value == 'string' || isSymbol(value)) {
                    return value;
                }
                var result = (value + '');
                return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }

            module.exports = toKey;


            /***/
        }),
        /* 13 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseGet = __webpack_require__(33);

            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */
            function get(object, path, defaultValue) {
                var result = object == null ? undefined : baseGet(object, path);
                return result === undefined ? defaultValue : result;
            }

            module.exports = get;


            /***/
        }),
        /* 14 */
        /***/
        (function(module, exports, __webpack_require__) {

            var isFunction = __webpack_require__(16),
                isLength = __webpack_require__(26);

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
                return value != null && isLength(value.length) && !isFunction(value);
            }

            module.exports = isArrayLike;


            /***/
        }),
        /* 15 */
        /***/
        (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */
            (function(module) {
                var root = __webpack_require__(1),
                    stubFalse = __webpack_require__(143);

                /** Detect free variable `exports`. */
                var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

                /** Detect free variable `module`. */
                var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

                /** Detect the popular CommonJS extension `module.exports`. */
                var moduleExports = freeModule && freeModule.exports === freeExports;

                /** Built-in value references. */
                var Buffer = moduleExports ? root.Buffer : undefined;

                /* Built-in method references for those with the same name as other `lodash` methods. */
                var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

                /**
                 * Checks if `value` is a buffer.
                 *
                 * @static
                 * @memberOf _
                 * @since 4.3.0
                 * @category Lang
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                 * @example
                 *
                 * _.isBuffer(new Buffer(2));
                 * // => true
                 *
                 * _.isBuffer(new Uint8Array(2));
                 * // => false
                 */
                var isBuffer = nativeIsBuffer || stubFalse;

                module.exports = isBuffer;

                /* WEBPACK VAR INJECTION */
            }.call(exports, __webpack_require__(49)(module)))

            /***/
        }),
        /* 16 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseGetTag = __webpack_require__(2),
                isObject = __webpack_require__(5);

            /** `Object#toString` result references. */
            var asyncTag = '[object AsyncFunction]',
                funcTag = '[object Function]',
                genTag = '[object GeneratorFunction]',
                proxyTag = '[object Proxy]';

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction(value) {
                if (!isObject(value)) {
                    return false;
                }
                // The use of `Object#toString` avoids issues with the `typeof` operator
                // in Safari 9 which returns 'object' for typed arrays and other constructors.
                var tag = baseGetTag(value);
                return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
            }

            module.exports = isFunction;


            /***/
        }),
        /* 17 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseIsTypedArray = __webpack_require__(80),
                baseUnary = __webpack_require__(88),
                nodeUtil = __webpack_require__(122);

            /* Node.js helper references. */
            var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

            /**
             * Checks if `value` is classified as a typed array.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             * @example
             *
             * _.isTypedArray(new Uint8Array);
             * // => true
             *
             * _.isTypedArray([]);
             * // => false
             */
            var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

            module.exports = isTypedArray;


            /***/
        }),
        /* 18 */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.deserialize = exports.serialize = undefined;

            var _get = __webpack_require__(13);

            var _get2 = _interopRequireDefault(_get);

            var _isError = __webpack_require__(136);

            var _isError2 = _interopRequireDefault(_isError);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            var isErrorType = function isErrorType() {
                var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    type = _ref.type;

                return type === 'Error' || (0, _isError2.default)((0, _get2.default)(self, [type, 'prototype']));
            };
            var toError = function toError(_ref2) {
                var type = _ref2.type,
                    stack = _ref2.stack,
                    message = _ref2.message;

                var err = new(self[type] || Error)(message);
                err.stack = stack;
                return err;
            };

            var toErrorInfo = function toErrorInfo(_ref3) {
                var type = _ref3.constructor.name,
                    message = _ref3.message,
                    stack = _ref3.stack;
                return {
                    type: type,
                    message: message,
                    stack: stack
                };
            };
            var serialize = exports.serialize = function serialize(err) {
                return Promise.reject((0, _isError2.default)(err) ? toErrorInfo(err) : err);
            };
            var deserialize = exports.deserialize = function deserialize(err) {
                return isErrorType(err) ? toError(err) : err;
            };

            /***/
        }),
        /* 19 */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.sendResponse = exports.send = undefined;

            var _windowModule = __webpack_require__(30);

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }
                    return arr2;
                } else {
                    return Array.from(arr);
                }
            }

            var send = exports.send = function send(message, _ref) {
                var target = _ref.target,
                    targetOrigin = _ref.targetOrigin;
                var transfer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                return new Promise(function(resolve) {
                    var _ref2 = new MessageChannel(),
                        port1 = _ref2.port1,
                        port2 = _ref2.port2;

                    message.__port = port2;
                    if ((0, _windowModule.isWorker)() || target instanceof Worker || target instanceof MessagePort) {
                        target.postMessage(message, [port2].concat(_toConsumableArray(transfer)));
                    } else {
                        target.postMessage(message, targetOrigin, [port2].concat(_toConsumableArray(transfer)));
                    }
                    port1.onmessage = function(_ref3) {
                        var data = _ref3.data;
                        return resolve(data);
                    };
                });
            };

            var sendResponse = exports.sendResponse = function sendResponse(port, intent) {
                return function(result) {
                    return port.postMessage({
                        intent: intent,
                        result: result
                    });
                };
            };

            /***/
        }),
        /* 20 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getNative = __webpack_require__(3),
                root = __webpack_require__(1);

            /* Built-in method references that are verified to be native. */
            var Map = getNative(root, 'Map');

            module.exports = Map;


            /***/
        }),
        /* 21 */
        /***/
        (function(module, exports, __webpack_require__) {

            var mapCacheClear = __webpack_require__(114),
                mapCacheDelete = __webpack_require__(115),
                mapCacheGet = __webpack_require__(116),
                mapCacheHas = __webpack_require__(117),
                mapCacheSet = __webpack_require__(118);

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype['delete'] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;

            module.exports = MapCache;


            /***/
        }),
        /* 22 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseFor = __webpack_require__(73),
                keys = __webpack_require__(28);

            /**
             * The base implementation of `_.forOwn` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwn(object, iteratee) {
                return object && baseFor(object, iteratee, keys);
            }

            module.exports = baseForOwn;


            /***/
        }),
        /* 23 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseMatches = __webpack_require__(82),
                baseMatchesProperty = __webpack_require__(83),
                identity = __webpack_require__(134),
                isArray = __webpack_require__(0),
                property = __webpack_require__(141);

            /**
             * The base implementation of `_.iteratee`.
             *
             * @private
             * @param {*} [value=_.identity] The value to convert to an iteratee.
             * @returns {Function} Returns the iteratee.
             */
            function baseIteratee(value) {
                // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                if (typeof value == 'function') {
                    return value;
                }
                if (value == null) {
                    return identity;
                }
                if (typeof value == 'object') {
                    return isArray(value) ?
                        baseMatchesProperty(value[0], value[1]) :
                        baseMatches(value);
                }
                return property(value);
            }

            module.exports = baseIteratee;


            /***/
        }),
        /* 24 */
        /***/
        (function(module, exports, __webpack_require__) {

            var isArray = __webpack_require__(0),
                isSymbol = __webpack_require__(27);

            /** Used to match property names within property paths. */
            var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                reIsPlainProp = /^\w*$/;

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
                if (isArray(value)) {
                    return false;
                }
                var type = typeof value;
                if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                    value == null || isSymbol(value)) {
                    return true;
                }
                return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                    (object != null && value in Object(object));
            }

            module.exports = isKey;


            /***/
        }),
        /* 25 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseIsArguments = __webpack_require__(76),
                isObjectLike = __webpack_require__(4);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Built-in value references. */
            var propertyIsEnumerable = objectProto.propertyIsEnumerable;

            /**
             * Checks if `value` is likely an `arguments` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             *  else `false`.
             * @example
             *
             * _.isArguments(function() { return arguments; }());
             * // => true
             *
             * _.isArguments([1, 2, 3]);
             * // => false
             */
            var isArguments = baseIsArguments(function() {
                return arguments;
            }()) ? baseIsArguments : function(value) {
                return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                    !propertyIsEnumerable.call(value, 'callee');
            };

            module.exports = isArguments;


            /***/
        }),
        /* 26 */
        /***/
        (function(module, exports) {

            /** Used as references for various `Number` constants. */
            var MAX_SAFE_INTEGER = 9007199254740991;

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
                return typeof value == 'number' &&
                    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
            }

            module.exports = isLength;


            /***/
        }),
        /* 27 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseGetTag = __webpack_require__(2),
                isObjectLike = __webpack_require__(4);

            /** `Object#toString` result references. */
            var symbolTag = '[object Symbol]';

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol(value) {
                return typeof value == 'symbol' ||
                    (isObjectLike(value) && baseGetTag(value) == symbolTag);
            }

            module.exports = isSymbol;


            /***/
        }),
        /* 28 */
        /***/
        (function(module, exports, __webpack_require__) {

            var arrayLikeKeys = __webpack_require__(67),
                baseKeys = __webpack_require__(35),
                isArrayLike = __webpack_require__(14);

            /**
             * Creates an array of the own enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects. See the
             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * for more details.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keys(new Foo);
             * // => ['a', 'b'] (iteration order is not guaranteed)
             *
             * _.keys('hi');
             * // => ['0', '1']
             */
            function keys(object) {
                return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
            }

            module.exports = keys;


            /***/
        }),
        /* 29 */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _Intents = __webpack_require__(6);

            var _Intents2 = _interopRequireDefault(_Intents);

            var _errorSerializer = __webpack_require__(18);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            exports.default = function(_ref) {
                var intent = _ref.intent,
                    result = _ref.result;

                switch (intent) {
                    case _Intents2.default.RESOLVE:
                        return result;
                    case _Intents2.default.REJECT:
                        return Promise.reject((0, _errorSerializer.deserialize)(result));
                    default:
                        break;
                }
            };

            /***/
        }),
        /* 30 */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var isWorker = function isWorker() {
                return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
            };
            var getChildFrameById = function getChildFrameById(id) {
                return document.getElementById(id);
            };
            exports.isWorker = isWorker;
            exports.getChildFrameById = getChildFrameById;

            /***/
        }),
        /* 31 */
        /***/
        (function(module, exports, __webpack_require__) {

            var ListCache = __webpack_require__(7),
                stackClear = __webpack_require__(127),
                stackDelete = __webpack_require__(128),
                stackGet = __webpack_require__(129),
                stackHas = __webpack_require__(130),
                stackSet = __webpack_require__(131);

            /**
             * Creates a stack cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Stack(entries) {
                var data = this.__data__ = new ListCache(entries);
                this.size = data.size;
            }

            // Add methods to `Stack`.
            Stack.prototype.clear = stackClear;
            Stack.prototype['delete'] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;

            module.exports = Stack;


            /***/
        }),
        /* 32 */
        /***/
        (function(module, exports) {

            /**
             * A specialized version of `_.map` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function arrayMap(array, iteratee) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    result = Array(length);

                while (++index < length) {
                    result[index] = iteratee(array[index], index, array);
                }
                return result;
            }

            module.exports = arrayMap;


            /***/
        }),
        /* 33 */
        /***/
        (function(module, exports, __webpack_require__) {

            var castPath = __webpack_require__(36),
                toKey = __webpack_require__(12);

            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */
            function baseGet(object, path) {
                path = castPath(path, object);

                var index = 0,
                    length = path.length;

                while (object != null && index < length) {
                    object = object[toKey(path[index++])];
                }
                return (index && index == length) ? object : undefined;
            }

            module.exports = baseGet;


            /***/
        }),
        /* 34 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseIsEqualDeep = __webpack_require__(77),
                isObjectLike = __webpack_require__(4);

            /**
             * The base implementation of `_.isEqual` which supports partial comparisons
             * and tracks traversed objects.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Unordered comparison
             *  2 - Partial comparison
             * @param {Function} [customizer] The function to customize comparisons.
             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             */
            function baseIsEqual(value, other, bitmask, customizer, stack) {
                if (value === other) {
                    return true;
                }
                if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                    return value !== value && other !== other;
                }
                return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
            }

            module.exports = baseIsEqual;


            /***/
        }),
        /* 35 */
        /***/
        (function(module, exports, __webpack_require__) {

            var isPrototype = __webpack_require__(42),
                nativeKeys = __webpack_require__(121);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeys(object) {
                if (!isPrototype(object)) {
                    return nativeKeys(object);
                }
                var result = [];
                for (var key in Object(object)) {
                    if (hasOwnProperty.call(object, key) && key != 'constructor') {
                        result.push(key);
                    }
                }
                return result;
            }

            module.exports = baseKeys;


            /***/
        }),
        /* 36 */
        /***/
        (function(module, exports, __webpack_require__) {

            var isArray = __webpack_require__(0),
                isKey = __webpack_require__(24),
                stringToPath = __webpack_require__(132),
                toString = __webpack_require__(144);

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
                if (isArray(value)) {
                    return value;
                }
                return isKey(value, object) ? [value] : stringToPath(toString(value));
            }

            module.exports = castPath;


            /***/
        }),
        /* 37 */
        /***/
        (function(module, exports, __webpack_require__) {

            var SetCache = __webpack_require__(62),
                arraySome = __webpack_require__(69),
                cacheHas = __webpack_require__(89);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /**
             * A specialized version of `baseIsEqualDeep` for arrays with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Array} array The array to compare.
             * @param {Array} other The other array to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `array` and `other` objects.
             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
             */
            function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    arrLength = array.length,
                    othLength = other.length;

                if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                    return false;
                }
                // Assume cyclic values are equal.
                var stacked = stack.get(array);
                if (stacked && stack.get(other)) {
                    return stacked == other;
                }
                var index = -1,
                    result = true,
                    seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

                stack.set(array, other);
                stack.set(other, array);

                // Ignore non-index properties.
                while (++index < arrLength) {
                    var arrValue = array[index],
                        othValue = other[index];

                    if (customizer) {
                        var compared = isPartial ?
                            customizer(othValue, arrValue, index, other, array, stack) :
                            customizer(arrValue, othValue, index, array, other, stack);
                    }
                    if (compared !== undefined) {
                        if (compared) {
                            continue;
                        }
                        result = false;
                        break;
                    }
                    // Recursively compare arrays (susceptible to call stack limits).
                    if (seen) {
                        if (!arraySome(other, function(othValue, othIndex) {
                                if (!cacheHas(seen, othIndex) &&
                                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                    return seen.push(othIndex);
                                }
                            })) {
                            result = false;
                            break;
                        }
                    } else if (!(
                            arrValue === othValue ||
                            equalFunc(arrValue, othValue, bitmask, customizer, stack)
                        )) {
                        result = false;
                        break;
                    }
                }
                stack['delete'](array);
                stack['delete'](other);
                return result;
            }

            module.exports = equalArrays;


            /***/
        }),
        /* 38 */
        /***/
        (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */
            (function(global) { /** Detect free variable `global` from Node.js. */
                var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

                module.exports = freeGlobal;

                /* WEBPACK VAR INJECTION */
            }.call(exports, __webpack_require__(48)))

            /***/
        }),
        /* 39 */
        /***/
        (function(module, exports, __webpack_require__) {

            var overArg = __webpack_require__(45);

            /** Built-in value references. */
            var getPrototype = overArg(Object.getPrototypeOf, Object);

            module.exports = getPrototype;


            /***/
        }),
        /* 40 */
        /***/
        (function(module, exports, __webpack_require__) {

            var DataView = __webpack_require__(58),
                Map = __webpack_require__(20),
                Promise = __webpack_require__(60),
                Set = __webpack_require__(61),
                WeakMap = __webpack_require__(64),
                baseGetTag = __webpack_require__(2),
                toSource = __webpack_require__(46);

            /** `Object#toString` result references. */
            var mapTag = '[object Map]',
                objectTag = '[object Object]',
                promiseTag = '[object Promise]',
                setTag = '[object Set]',
                weakMapTag = '[object WeakMap]';

            var dataViewTag = '[object DataView]';

            /** Used to detect maps, sets, and weakmaps. */
            var dataViewCtorString = toSource(DataView),
                mapCtorString = toSource(Map),
                promiseCtorString = toSource(Promise),
                setCtorString = toSource(Set),
                weakMapCtorString = toSource(WeakMap);

            /**
             * Gets the `toStringTag` of `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            var getTag = baseGetTag;

            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
            if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                (Map && getTag(new Map) != mapTag) ||
                (Promise && getTag(Promise.resolve()) != promiseTag) ||
                (Set && getTag(new Set) != setTag) ||
                (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                getTag = function(value) {
                    var result = baseGetTag(value),
                        Ctor = result == objectTag ? value.constructor : undefined,
                        ctorString = Ctor ? toSource(Ctor) : '';

                    if (ctorString) {
                        switch (ctorString) {
                            case dataViewCtorString:
                                return dataViewTag;
                            case mapCtorString:
                                return mapTag;
                            case promiseCtorString:
                                return promiseTag;
                            case setCtorString:
                                return setTag;
                            case weakMapCtorString:
                                return weakMapTag;
                        }
                    }
                    return result;
                };
            }

            module.exports = getTag;


            /***/
        }),
        /* 41 */
        /***/
        (function(module, exports) {

            /** Used as references for various `Number` constants. */
            var MAX_SAFE_INTEGER = 9007199254740991;

            /** Used to detect unsigned integer values. */
            var reIsUint = /^(?:0|[1-9]\d*)$/;

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
                length = length == null ? MAX_SAFE_INTEGER : length;
                return !!length &&
                    (typeof value == 'number' || reIsUint.test(value)) &&
                    (value > -1 && value % 1 == 0 && value < length);
            }

            module.exports = isIndex;


            /***/
        }),
        /* 42 */
        /***/
        (function(module, exports) {

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /**
             * Checks if `value` is likely a prototype object.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
             */
            function isPrototype(value) {
                var Ctor = value && value.constructor,
                    proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                return value === proto;
            }

            module.exports = isPrototype;


            /***/
        }),
        /* 43 */
        /***/
        (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(5);

            /**
             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` if suitable for strict
             *  equality comparisons, else `false`.
             */
            function isStrictComparable(value) {
                return value === value && !isObject(value);
            }

            module.exports = isStrictComparable;


            /***/
        }),
        /* 44 */
        /***/
        (function(module, exports) {

            /**
             * A specialized version of `matchesProperty` for source values suitable
             * for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function matchesStrictComparable(key, srcValue) {
                return function(object) {
                    if (object == null) {
                        return false;
                    }
                    return object[key] === srcValue &&
                        (srcValue !== undefined || (key in Object(object)));
                };
            }

            module.exports = matchesStrictComparable;


            /***/
        }),
        /* 45 */
        /***/
        (function(module, exports) {

            /**
             * Creates a unary function that invokes `func` with its argument transformed.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {Function} transform The argument transform.
             * @returns {Function} Returns the new function.
             */
            function overArg(func, transform) {
                return function(arg) {
                    return func(transform(arg));
                };
            }

            module.exports = overArg;


            /***/
        }),
        /* 46 */
        /***/
        (function(module, exports) {

            /** Used for built-in method references. */
            var funcProto = Function.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
                if (func != null) {
                    try {
                        return funcToString.call(func);
                    } catch (e) {}
                    try {
                        return (func + '');
                    } catch (e) {}
                }
                return '';
            }

            module.exports = toSource;


            /***/
        }),
        /* 47 */
        /***/
        (function(module, exports) {

            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
                return value === other || (value !== value && other !== other);
            }

            module.exports = eq;


            /***/
        }),
        /* 48 */
        /***/
        (function(module, exports) {

            var g;

            // This works in non-strict mode
            g = (function() {
                return this;
            })();

            try {
                // This works if eval is allowed (see CSP)
                g = g || Function("return this")() || (1, eval)("this");
            } catch (e) {
                // This works if the window reference is available
                if (typeof window === "object")
                    g = window;
            }

            // g can still be undefined, but nothing to do about it...
            // We return undefined, instead of nothing here, so it's
            // easier to handle this case. if(!global) { ...}

            module.exports = g;


            /***/
        }),
        /* 49 */
        /***/
        (function(module, exports) {

            module.exports = function(module) {
                if (!module.webpackPolyfill) {
                    module.deprecate = function() {};
                    module.paths = [];
                    // module.parent = undefined by default
                    if (!module.children) module.children = [];
                    Object.defineProperty(module, "loaded", {
                        enumerable: true,
                        get: function() {
                            return module.l;
                        }
                    });
                    Object.defineProperty(module, "id", {
                        enumerable: true,
                        get: function() {
                            return module.i;
                        }
                    });
                    module.webpackPolyfill = 1;
                }
                return module;
            };


            /***/
        }),
        /* 50 */
        /***/
        (function(module, exports, __webpack_require__) {

            module.exports = (typeof Array.from === 'function' ?
                Array.from :
                __webpack_require__(53)
            );


            /***/
        }),
        /* 51 */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.unset = exports.request = exports.set = undefined;

            var _get = __webpack_require__(13);

            var _get2 = _interopRequireDefault(_get);

            var _appsRegistrar = __webpack_require__(55);

            var appsRegistrar = _interopRequireWildcard(_appsRegistrar);

            var _windowModule = __webpack_require__(30);

            var _Intents = __webpack_require__(6);

            var _Intents2 = _interopRequireDefault(_Intents);

            var _apiManager = __webpack_require__(54);

            var _messageManager = __webpack_require__(19);

            var _messageHandler = __webpack_require__(57);

            var messageHandler = _interopRequireWildcard(_messageHandler);

            var _errorSerializer = __webpack_require__(18);

            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj;
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                        }
                    }
                    newObj.default = obj;
                    return newObj;
                }
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            var getTargetInfoFromDef = function getTargetInfoFromDef(_ref) {
                var target = _ref.target,
                    initiator = _ref.initiator;

                switch (true) {
                    case (0, _windowModule.isWorker)():
                        return {
                            target: self,
                            targetOrigin: '*'
                        };
                    case target === parent:
                        return {
                            target: parent,
                            targetOrigin: '*'
                        };
                    case target instanceof Worker:
                        return {
                            target: target
                        };
                    case Boolean(target):
                        if (target.contentWindow) {
                            return {
                                target: target.contentWindow,
                                targetOrigin: target.src
                            };
                        }
                        return {
                            target: target,
                            targetOrigin: '*'
                        };
                    case Boolean(initiator):
                        var element = (0, _windowModule.getChildFrameById)(initiator);
                        return {
                            target: element.contentWindow,
                            targetOrigin: element.src
                        };
                    default:
                        throw new Error('Invalid target');
                }
            };

            var onMessage = function onMessage(_ref2) {
                var _ref2$data = _ref2.data,
                    appId = _ref2$data.appId,
                    intent = _ref2$data.intent,
                    call = _ref2$data.call,
                    args = _ref2$data.args,
                    __port = _ref2$data.__port,
                    messagePorts = _ref2.ports;

                messagePorts = messagePorts || [];
                var port = __port || messagePorts[0];
                switch (intent) {
                    case _Intents2.default.REQUEST_API:
                        var app = appsRegistrar.getAppById(appId);
                        var description = app ? (0, _apiManager.getDescription)(app) : null;
                        port.postMessage(description);
                        return;
                    case _Intents2.default.INVOKE_FUNCTION:
                        var appData = appsRegistrar.getAppData(appId);
                        if (!appData) {
                            var noApiError = new Error('The API for ' + appId + ' has been removed');
                            return (0, _messageManager.sendResponse)(port, _Intents2.default.REJECT)((0, _errorSerializer.serialize)(noApiError));
                        }
                        if (appData.onApiCall) {
                            appData.onApiCall({
                                appId: appId,
                                call: call,
                                args: args
                            });
                        }
                        var func = (0, _get2.default)(appData.app, call);
                        return (0, _apiManager.invokeApiFunction)(func, args, messagePorts.slice(1)).then((0, _messageManager.sendResponse)(port, _Intents2.default.RESOLVE), (0, _messageManager.sendResponse)(port, _Intents2.default.REJECT));

                }
            };

            var set = exports.set = function set(appId, app) {
                var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
                    onApiCall = _ref3.onApiCall;

                if (appsRegistrar.hasApp(appId)) {
                    appsRegistrar.unregisterApp(appId);
                }
                appsRegistrar.registerApp(appId, app, onApiCall);
                messageHandler.addSingleHandler(onMessage);
            };

            var request = exports.request = function request(appId) {
                var targetDef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                var targetInfo = getTargetInfoFromDef(targetDef);
                return (0, _messageManager.send)({
                    intent: _Intents2.default.REQUEST_API,
                    appId: appId
                }, targetInfo).then(function(description) {
                    return description ? (0, _apiManager.buildApiFromDescription)(appId, description, targetInfo) : Promise.reject(new Error('App with ID ' + appId + ' not found'));
                });
            };

            var unset = exports.unset = function unset(appId) {
                appsRegistrar.unregisterApp(appId);
                if (appsRegistrar.isEmpty()) {
                    messageHandler.removeSingleHandler(onMessage);
                }
            };

            /***/
        }),
        /* 52 */
        /***/
        (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */
            (function(process, global) {
                var require;
                /*!
                 * @overview es6-promise - a tiny implementation of Promises/A+.
                 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
                 * @license   Licensed under MIT license
                 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
                 * @version   4.1.0
                 */

                (function(global, factory) {
                    true ? module.exports = factory() :
                        typeof define === 'function' && define.amd ? define(factory) :
                        (global.ES6Promise = factory());
                }(this, (function() {
                    'use strict';

                    function objectOrFunction(x) {
                        return typeof x === 'function' || typeof x === 'object' && x !== null;
                    }

                    function isFunction(x) {
                        return typeof x === 'function';
                    }

                    var _isArray = undefined;
                    if (!Array.isArray) {
                        _isArray = function(x) {
                            return Object.prototype.toString.call(x) === '[object Array]';
                        };
                    } else {
                        _isArray = Array.isArray;
                    }

                    var isArray = _isArray;

                    var len = 0;
                    var vertxNext = undefined;
                    var customSchedulerFn = undefined;

                    var asap = function asap(callback, arg) {
                        queue[len] = callback;
                        queue[len + 1] = arg;
                        len += 2;
                        if (len === 2) {
                            // If len is 2, that means that we need to schedule an async flush.
                            // If additional callbacks are queued before the queue is flushed, they
                            // will be processed by this flush that we are scheduling.
                            if (customSchedulerFn) {
                                customSchedulerFn(flush);
                            } else {
                                scheduleFlush();
                            }
                        }
                    };

                    function setScheduler(scheduleFn) {
                        customSchedulerFn = scheduleFn;
                    }

                    function setAsap(asapFn) {
                        asap = asapFn;
                    }

                    var browserWindow = typeof window !== 'undefined' ? window : undefined;
                    var browserGlobal = browserWindow || {};
                    var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
                    var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';

                    // test for web worker but not in IE10
                    var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

                    // node
                    function useNextTick() {
                        // node version 0.10.x displays a deprecation warning when nextTick is used recursively
                        // see https://github.com/cujojs/when/issues/410 for details
                        return function() {
                            return process.nextTick(flush);
                        };
                    }

                    // vertx
                    function useVertxTimer() {
                        if (typeof vertxNext !== 'undefined') {
                            return function() {
                                vertxNext(flush);
                            };
                        }

                        return useSetTimeout();
                    }

                    function useMutationObserver() {
                        var iterations = 0;
                        var observer = new BrowserMutationObserver(flush);
                        var node = document.createTextNode('');
                        observer.observe(node, {
                            characterData: true
                        });

                        return function() {
                            node.data = iterations = ++iterations % 2;
                        };
                    }

                    // web worker
                    function useMessageChannel() {
                        var channel = new MessageChannel();
                        channel.port1.onmessage = flush;
                        return function() {
                            return channel.port2.postMessage(0);
                        };
                    }

                    function useSetTimeout() {
                        // Store setTimeout reference so es6-promise will be unaffected by
                        // other code modifying setTimeout (like sinon.useFakeTimers())
                        var globalSetTimeout = setTimeout;
                        return function() {
                            return globalSetTimeout(flush, 1);
                        };
                    }

                    var queue = new Array(1000);

                    function flush() {
                        for (var i = 0; i < len; i += 2) {
                            var callback = queue[i];
                            var arg = queue[i + 1];

                            callback(arg);

                            queue[i] = undefined;
                            queue[i + 1] = undefined;
                        }

                        len = 0;
                    }

                    function attemptVertx() {
                        try {
                            var r = require;
                            var vertx = __webpack_require__(147);
                            vertxNext = vertx.runOnLoop || vertx.runOnContext;
                            return useVertxTimer();
                        } catch (e) {
                            return useSetTimeout();
                        }
                    }

                    var scheduleFlush = undefined;
                    // Decide what async method to use to triggering processing of queued callbacks:
                    if (isNode) {
                        scheduleFlush = useNextTick();
                    } else if (BrowserMutationObserver) {
                        scheduleFlush = useMutationObserver();
                    } else if (isWorker) {
                        scheduleFlush = useMessageChannel();
                    } else if (browserWindow === undefined && "function" === 'function') {
                        scheduleFlush = attemptVertx();
                    } else {
                        scheduleFlush = useSetTimeout();
                    }

                    function then(onFulfillment, onRejection) {
                        var _arguments = arguments;

                        var parent = this;

                        var child = new this.constructor(noop);

                        if (child[PROMISE_ID] === undefined) {
                            makePromise(child);
                        }

                        var _state = parent._state;

                        if (_state) {
                            (function() {
                                var callback = _arguments[_state - 1];
                                asap(function() {
                                    return invokeCallback(_state, child, callback, parent._result);
                                });
                            })();
                        } else {
                            subscribe(parent, child, onFulfillment, onRejection);
                        }

                        return child;
                    }

                    /**
                      `Promise.resolve` returns a promise that will become resolved with the
                      passed `value`. It is shorthand for the following:

                      ```javascript
                      let promise = new Promise(function(resolve, reject){
                        resolve(1);
                      });

                      promise.then(function(value){
                        // value === 1
                      });
                      ```

                      Instead of writing the above, your code now simply becomes the following:

                      ```javascript
                      let promise = Promise.resolve(1);

                      promise.then(function(value){
                        // value === 1
                      });
                      ```

                      @method resolve
                      @static
                      @param {Any} value value that the returned promise will be resolved with
                      Useful for tooling.
                      @return {Promise} a promise that will become fulfilled with the given
                      `value`
                    */
                    function resolve(object) {
                        /*jshint validthis:true */
                        var Constructor = this;

                        if (object && typeof object === 'object' && object.constructor === Constructor) {
                            return object;
                        }

                        var promise = new Constructor(noop);
                        _resolve(promise, object);
                        return promise;
                    }

                    var PROMISE_ID = Math.random().toString(36).substring(16);

                    function noop() {}

                    var PENDING = void 0;
                    var FULFILLED = 1;
                    var REJECTED = 2;

                    var GET_THEN_ERROR = new ErrorObject();

                    function selfFulfillment() {
                        return new TypeError("You cannot resolve a promise with itself");
                    }

                    function cannotReturnOwn() {
                        return new TypeError('A promises callback cannot return that same promise.');
                    }

                    function getThen(promise) {
                        try {
                            return promise.then;
                        } catch (error) {
                            GET_THEN_ERROR.error = error;
                            return GET_THEN_ERROR;
                        }
                    }

                    function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
                        try {
                            then.call(value, fulfillmentHandler, rejectionHandler);
                        } catch (e) {
                            return e;
                        }
                    }

                    function handleForeignThenable(promise, thenable, then) {
                        asap(function(promise) {
                            var sealed = false;
                            var error = tryThen(then, thenable, function(value) {
                                if (sealed) {
                                    return;
                                }
                                sealed = true;
                                if (thenable !== value) {
                                    _resolve(promise, value);
                                } else {
                                    fulfill(promise, value);
                                }
                            }, function(reason) {
                                if (sealed) {
                                    return;
                                }
                                sealed = true;

                                _reject(promise, reason);
                            }, 'Settle: ' + (promise._label || ' unknown promise'));

                            if (!sealed && error) {
                                sealed = true;
                                _reject(promise, error);
                            }
                        }, promise);
                    }

                    function handleOwnThenable(promise, thenable) {
                        if (thenable._state === FULFILLED) {
                            fulfill(promise, thenable._result);
                        } else if (thenable._state === REJECTED) {
                            _reject(promise, thenable._result);
                        } else {
                            subscribe(thenable, undefined, function(value) {
                                return _resolve(promise, value);
                            }, function(reason) {
                                return _reject(promise, reason);
                            });
                        }
                    }

                    function handleMaybeThenable(promise, maybeThenable, then$$) {
                        if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
                            handleOwnThenable(promise, maybeThenable);
                        } else {
                            if (then$$ === GET_THEN_ERROR) {
                                _reject(promise, GET_THEN_ERROR.error);
                                GET_THEN_ERROR.error = null;
                            } else if (then$$ === undefined) {
                                fulfill(promise, maybeThenable);
                            } else if (isFunction(then$$)) {
                                handleForeignThenable(promise, maybeThenable, then$$);
                            } else {
                                fulfill(promise, maybeThenable);
                            }
                        }
                    }

                    function _resolve(promise, value) {
                        if (promise === value) {
                            _reject(promise, selfFulfillment());
                        } else if (objectOrFunction(value)) {
                            handleMaybeThenable(promise, value, getThen(value));
                        } else {
                            fulfill(promise, value);
                        }
                    }

                    function publishRejection(promise) {
                        if (promise._onerror) {
                            promise._onerror(promise._result);
                        }

                        publish(promise);
                    }

                    function fulfill(promise, value) {
                        if (promise._state !== PENDING) {
                            return;
                        }

                        promise._result = value;
                        promise._state = FULFILLED;

                        if (promise._subscribers.length !== 0) {
                            asap(publish, promise);
                        }
                    }

                    function _reject(promise, reason) {
                        if (promise._state !== PENDING) {
                            return;
                        }
                        promise._state = REJECTED;
                        promise._result = reason;

                        asap(publishRejection, promise);
                    }

                    function subscribe(parent, child, onFulfillment, onRejection) {
                        var _subscribers = parent._subscribers;
                        var length = _subscribers.length;

                        parent._onerror = null;

                        _subscribers[length] = child;
                        _subscribers[length + FULFILLED] = onFulfillment;
                        _subscribers[length + REJECTED] = onRejection;

                        if (length === 0 && parent._state) {
                            asap(publish, parent);
                        }
                    }

                    function publish(promise) {
                        var subscribers = promise._subscribers;
                        var settled = promise._state;

                        if (subscribers.length === 0) {
                            return;
                        }

                        var child = undefined,
                            callback = undefined,
                            detail = promise._result;

                        for (var i = 0; i < subscribers.length; i += 3) {
                            child = subscribers[i];
                            callback = subscribers[i + settled];

                            if (child) {
                                invokeCallback(settled, child, callback, detail);
                            } else {
                                callback(detail);
                            }
                        }

                        promise._subscribers.length = 0;
                    }

                    function ErrorObject() {
                        this.error = null;
                    }

                    var TRY_CATCH_ERROR = new ErrorObject();

                    function tryCatch(callback, detail) {
                        try {
                            return callback(detail);
                        } catch (e) {
                            TRY_CATCH_ERROR.error = e;
                            return TRY_CATCH_ERROR;
                        }
                    }

                    function invokeCallback(settled, promise, callback, detail) {
                        var hasCallback = isFunction(callback),
                            value = undefined,
                            error = undefined,
                            succeeded = undefined,
                            failed = undefined;

                        if (hasCallback) {
                            value = tryCatch(callback, detail);

                            if (value === TRY_CATCH_ERROR) {
                                failed = true;
                                error = value.error;
                                value.error = null;
                            } else {
                                succeeded = true;
                            }

                            if (promise === value) {
                                _reject(promise, cannotReturnOwn());
                                return;
                            }
                        } else {
                            value = detail;
                            succeeded = true;
                        }

                        if (promise._state !== PENDING) {
                            // noop
                        } else if (hasCallback && succeeded) {
                            _resolve(promise, value);
                        } else if (failed) {
                            _reject(promise, error);
                        } else if (settled === FULFILLED) {
                            fulfill(promise, value);
                        } else if (settled === REJECTED) {
                            _reject(promise, value);
                        }
                    }

                    function initializePromise(promise, resolver) {
                        try {
                            resolver(function resolvePromise(value) {
                                _resolve(promise, value);
                            }, function rejectPromise(reason) {
                                _reject(promise, reason);
                            });
                        } catch (e) {
                            _reject(promise, e);
                        }
                    }

                    var id = 0;

                    function nextId() {
                        return id++;
                    }

                    function makePromise(promise) {
                        promise[PROMISE_ID] = id++;
                        promise._state = undefined;
                        promise._result = undefined;
                        promise._subscribers = [];
                    }

                    function Enumerator(Constructor, input) {
                        this._instanceConstructor = Constructor;
                        this.promise = new Constructor(noop);

                        if (!this.promise[PROMISE_ID]) {
                            makePromise(this.promise);
                        }

                        if (isArray(input)) {
                            this._input = input;
                            this.length = input.length;
                            this._remaining = input.length;

                            this._result = new Array(this.length);

                            if (this.length === 0) {
                                fulfill(this.promise, this._result);
                            } else {
                                this.length = this.length || 0;
                                this._enumerate();
                                if (this._remaining === 0) {
                                    fulfill(this.promise, this._result);
                                }
                            }
                        } else {
                            _reject(this.promise, validationError());
                        }
                    }

                    function validationError() {
                        return new Error('Array Methods must be provided an Array');
                    };

                    Enumerator.prototype._enumerate = function() {
                        var length = this.length;
                        var _input = this._input;

                        for (var i = 0; this._state === PENDING && i < length; i++) {
                            this._eachEntry(_input[i], i);
                        }
                    };

                    Enumerator.prototype._eachEntry = function(entry, i) {
                        var c = this._instanceConstructor;
                        var resolve$$ = c.resolve;

                        if (resolve$$ === resolve) {
                            var _then = getThen(entry);

                            if (_then === then && entry._state !== PENDING) {
                                this._settledAt(entry._state, i, entry._result);
                            } else if (typeof _then !== 'function') {
                                this._remaining--;
                                this._result[i] = entry;
                            } else if (c === Promise) {
                                var promise = new c(noop);
                                handleMaybeThenable(promise, entry, _then);
                                this._willSettleAt(promise, i);
                            } else {
                                this._willSettleAt(new c(function(resolve$$) {
                                    return resolve$$(entry);
                                }), i);
                            }
                        } else {
                            this._willSettleAt(resolve$$(entry), i);
                        }
                    };

                    Enumerator.prototype._settledAt = function(state, i, value) {
                        var promise = this.promise;

                        if (promise._state === PENDING) {
                            this._remaining--;

                            if (state === REJECTED) {
                                _reject(promise, value);
                            } else {
                                this._result[i] = value;
                            }
                        }

                        if (this._remaining === 0) {
                            fulfill(promise, this._result);
                        }
                    };

                    Enumerator.prototype._willSettleAt = function(promise, i) {
                        var enumerator = this;

                        subscribe(promise, undefined, function(value) {
                            return enumerator._settledAt(FULFILLED, i, value);
                        }, function(reason) {
                            return enumerator._settledAt(REJECTED, i, reason);
                        });
                    };

                    /**
                      `Promise.all` accepts an array of promises, and returns a new promise which
                      is fulfilled with an array of fulfillment values for the passed promises, or
                      rejected with the reason of the first passed promise to be rejected. It casts all
                      elements of the passed iterable to promises as it runs this algorithm.

                      Example:

                      ```javascript
                      let promise1 = resolve(1);
                      let promise2 = resolve(2);
                      let promise3 = resolve(3);
                      let promises = [ promise1, promise2, promise3 ];

                      Promise.all(promises).then(function(array){
                        // The array here would be [ 1, 2, 3 ];
                      });
                      ```

                      If any of the `promises` given to `all` are rejected, the first promise
                      that is rejected will be given as an argument to the returned promises's
                      rejection handler. For example:

                      Example:

                      ```javascript
                      let promise1 = resolve(1);
                      let promise2 = reject(new Error("2"));
                      let promise3 = reject(new Error("3"));
                      let promises = [ promise1, promise2, promise3 ];

                      Promise.all(promises).then(function(array){
                        // Code here never runs because there are rejected promises!
                      }, function(error) {
                        // error.message === "2"
                      });
                      ```

                      @method all
                      @static
                      @param {Array} entries array of promises
                      @param {String} label optional string for labeling the promise.
                      Useful for tooling.
                      @return {Promise} promise that is fulfilled when all `promises` have been
                      fulfilled, or rejected if any of them become rejected.
                      @static
                    */
                    function all(entries) {
                        return new Enumerator(this, entries).promise;
                    }

                    /**
                      `Promise.race` returns a new promise which is settled in the same way as the
                      first passed promise to settle.

                      Example:

                      ```javascript
                      let promise1 = new Promise(function(resolve, reject){
                        setTimeout(function(){
                          resolve('promise 1');
                        }, 200);
                      });

                      let promise2 = new Promise(function(resolve, reject){
                        setTimeout(function(){
                          resolve('promise 2');
                        }, 100);
                      });

                      Promise.race([promise1, promise2]).then(function(result){
                        // result === 'promise 2' because it was resolved before promise1
                        // was resolved.
                      });
                      ```

                      `Promise.race` is deterministic in that only the state of the first
                      settled promise matters. For example, even if other promises given to the
                      `promises` array argument are resolved, but the first settled promise has
                      become rejected before the other promises became fulfilled, the returned
                      promise will become rejected:

                      ```javascript
                      let promise1 = new Promise(function(resolve, reject){
                        setTimeout(function(){
                          resolve('promise 1');
                        }, 200);
                      });

                      let promise2 = new Promise(function(resolve, reject){
                        setTimeout(function(){
                          reject(new Error('promise 2'));
                        }, 100);
                      });

                      Promise.race([promise1, promise2]).then(function(result){
                        // Code here never runs
                      }, function(reason){
                        // reason.message === 'promise 2' because promise 2 became rejected before
                        // promise 1 became fulfilled
                      });
                      ```

                      An example real-world use case is implementing timeouts:

                      ```javascript
                      Promise.race([ajax('foo.json'), timeout(5000)])
                      ```

                      @method race
                      @static
                      @param {Array} promises array of promises to observe
                      Useful for tooling.
                      @return {Promise} a promise which settles in the same way as the first passed
                      promise to settle.
                    */
                    function race(entries) {
                        /*jshint validthis:true */
                        var Constructor = this;

                        if (!isArray(entries)) {
                            return new Constructor(function(_, reject) {
                                return reject(new TypeError('You must pass an array to race.'));
                            });
                        } else {
                            return new Constructor(function(resolve, reject) {
                                var length = entries.length;
                                for (var i = 0; i < length; i++) {
                                    Constructor.resolve(entries[i]).then(resolve, reject);
                                }
                            });
                        }
                    }

                    /**
                      `Promise.reject` returns a promise rejected with the passed `reason`.
                      It is shorthand for the following:

                      ```javascript
                      let promise = new Promise(function(resolve, reject){
                        reject(new Error('WHOOPS'));
                      });

                      promise.then(function(value){
                        // Code here doesn't run because the promise is rejected!
                      }, function(reason){
                        // reason.message === 'WHOOPS'
                      });
                      ```

                      Instead of writing the above, your code now simply becomes the following:

                      ```javascript
                      let promise = Promise.reject(new Error('WHOOPS'));

                      promise.then(function(value){
                        // Code here doesn't run because the promise is rejected!
                      }, function(reason){
                        // reason.message === 'WHOOPS'
                      });
                      ```

                      @method reject
                      @static
                      @param {Any} reason value that the returned promise will be rejected with.
                      Useful for tooling.
                      @return {Promise} a promise rejected with the given `reason`.
                    */
                    function reject(reason) {
                        /*jshint validthis:true */
                        var Constructor = this;
                        var promise = new Constructor(noop);
                        _reject(promise, reason);
                        return promise;
                    }

                    function needsResolver() {
                        throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
                    }

                    function needsNew() {
                        throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
                    }

                    /**
                      Promise objects represent the eventual result of an asynchronous operation. The
                      primary way of interacting with a promise is through its `then` method, which
                      registers callbacks to receive either a promise's eventual value or the reason
                      why the promise cannot be fulfilled.

                      Terminology
                      -----------

                      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
                      - `thenable` is an object or function that defines a `then` method.
                      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
                      - `exception` is a value that is thrown using the throw statement.
                      - `reason` is a value that indicates why a promise was rejected.
                      - `settled` the final resting state of a promise, fulfilled or rejected.

                      A promise can be in one of three states: pending, fulfilled, or rejected.

                      Promises that are fulfilled have a fulfillment value and are in the fulfilled
                      state.  Promises that are rejected have a rejection reason and are in the
                      rejected state.  A fulfillment value is never a thenable.

                      Promises can also be said to *resolve* a value.  If this value is also a
                      promise, then the original promise's settled state will match the value's
                      settled state.  So a promise that *resolves* a promise that rejects will
                      itself reject, and a promise that *resolves* a promise that fulfills will
                      itself fulfill.


                      Basic Usage:
                      ------------

                      ```js
                      let promise = new Promise(function(resolve, reject) {
                        // on success
                        resolve(value);

                        // on failure
                        reject(reason);
                      });

                      promise.then(function(value) {
                        // on fulfillment
                      }, function(reason) {
                        // on rejection
                      });
                      ```

                      Advanced Usage:
                      ---------------

                      Promises shine when abstracting away asynchronous interactions such as
                      `XMLHttpRequest`s.

                      ```js
                      function getJSON(url) {
                        return new Promise(function(resolve, reject){
                          let xhr = new XMLHttpRequest();

                          xhr.open('GET', url);
                          xhr.onreadystatechange = handler;
                          xhr.responseType = 'json';
                          xhr.setRequestHeader('Accept', 'application/json');
                          xhr.send();

                          function handler() {
                            if (this.readyState === this.DONE) {
                              if (this.status === 200) {
                                resolve(this.response);
                              } else {
                                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
                              }
                            }
                          };
                        });
                      }

                      getJSON('/posts.json').then(function(json) {
                        // on fulfillment
                      }, function(reason) {
                        // on rejection
                      });
                      ```

                      Unlike callbacks, promises are great composable primitives.

                      ```js
                      Promise.all([
                        getJSON('/posts'),
                        getJSON('/comments')
                      ]).then(function(values){
                        values[0] // => postsJSON
                        values[1] // => commentsJSON

                        return values;
                      });
                      ```

                      @class Promise
                      @param {function} resolver
                      Useful for tooling.
                      @constructor
                    */
                    function Promise(resolver) {
                        this[PROMISE_ID] = nextId();
                        this._result = this._state = undefined;
                        this._subscribers = [];

                        if (noop !== resolver) {
                            typeof resolver !== 'function' && needsResolver();
                            this instanceof Promise ? initializePromise(this, resolver) : needsNew();
                        }
                    }

                    Promise.all = all;
                    Promise.race = race;
                    Promise.resolve = resolve;
                    Promise.reject = reject;
                    Promise._setScheduler = setScheduler;
                    Promise._setAsap = setAsap;
                    Promise._asap = asap;

                    Promise.prototype = {
                        constructor: Promise,

                        /**
                          The primary way of interacting with a promise is through its `then` method,
                          which registers callbacks to receive either a promise's eventual value or the
                          reason why the promise cannot be fulfilled.
  
                          ```js
                          findUser().then(function(user){
                            // user is available
                          }, function(reason){
                            // user is unavailable, and you are given the reason why
                          });
                          ```
  
                          Chaining
                          --------
  
                          The return value of `then` is itself a promise.  This second, 'downstream'
                          promise is resolved with the return value of the first promise's fulfillment
                          or rejection handler, or rejected if the handler throws an exception.
  
                          ```js
                          findUser().then(function (user) {
                            return user.name;
                          }, function (reason) {
                            return 'default name';
                          }).then(function (userName) {
                            // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
                            // will be `'default name'`
                          });
  
                          findUser().then(function (user) {
                            throw new Error('Found user, but still unhappy');
                          }, function (reason) {
                            throw new Error('`findUser` rejected and we're unhappy');
                          }).then(function (value) {
                            // never reached
                          }, function (reason) {
                            // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
                            // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
                          });
                          ```
                          If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
                          ```js
                          findUser().then(function (user) {
                            throw new PedagogicalException('Upstream error');
                          }).then(function (value) {
                            // never reached
                          }).then(function (value) {
                            // never reached
                          }, function (reason) {
                            // The `PedgagocialException` is propagated all the way down to here
                          });
                          ```
  
                          Assimilation
                          ------------
  
                          Sometimes the value you want to propagate to a downstream promise can only be
                          retrieved asynchronously. This can be achieved by returning a promise in the
                          fulfillment or rejection handler. The downstream promise will then be pending
                          until the returned promise is settled. This is called *assimilation*.
  
                          ```js
                          findUser().then(function (user) {
                            return findCommentsByAuthor(user);
                          }).then(function (comments) {
                            // The user's comments are now available
                          });
                          ```
  
                          If the assimliated promise rejects, then the downstream promise will also reject.
  
                          ```js
                          findUser().then(function (user) {
                            return findCommentsByAuthor(user);
                          }).then(function (comments) {
                            // If `findCommentsByAuthor` fulfills, we'll have the value here
                          }, function (reason) {
                            // If `findCommentsByAuthor` rejects, we'll have the reason here
                          });
                          ```
  
                          Simple Example
                          --------------
  
                          Synchronous Example
  
                          ```javascript
                          let result;
  
                          try {
                            result = findResult();
                            // success
                          } catch(reason) {
                            // failure
                          }
                          ```
  
                          Errback Example
  
                          ```js
                          findResult(function(result, err){
                            if (err) {
                              // failure
                            } else {
                              // success
                            }
                          });
                          ```
  
                          Promise Example;
  
                          ```javascript
                          findResult().then(function(result){
                            // success
                          }, function(reason){
                            // failure
                          });
                          ```
  
                          Advanced Example
                          --------------
  
                          Synchronous Example
  
                          ```javascript
                          let author, books;
  
                          try {
                            author = findAuthor();
                            books  = findBooksByAuthor(author);
                            // success
                          } catch(reason) {
                            // failure
                          }
                          ```
  
                          Errback Example
  
                          ```js
  
                          function foundBooks(books) {
  
                          }
  
                          function failure(reason) {
  
                          }
  
                          findAuthor(function(author, err){
                            if (err) {
                              failure(err);
                              // failure
                            } else {
                              try {
                                findBoooksByAuthor(author, function(books, err) {
                                  if (err) {
                                    failure(err);
                                  } else {
                                    try {
                                      foundBooks(books);
                                    } catch(reason) {
                                      failure(reason);
                                    }
                                  }
                                });
                              } catch(error) {
                                failure(err);
                              }
                              // success
                            }
                          });
                          ```
  
                          Promise Example;
  
                          ```javascript
                          findAuthor().
                            then(findBooksByAuthor).
                            then(function(books){
                              // found books
                          }).catch(function(reason){
                            // something went wrong
                          });
                          ```
  
                          @method then
                          @param {Function} onFulfilled
                          @param {Function} onRejected
                          Useful for tooling.
                          @return {Promise}
                        */
                        then: then,

                        /**
                          `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
                          as the catch block of a try/catch statement.
  
                          ```js
                          function findAuthor(){
                            throw new Error('couldn't find that author');
                          }
  
                          // synchronous
                          try {
                            findAuthor();
                          } catch(reason) {
                            // something went wrong
                          }
  
                          // async with promises
                          findAuthor().catch(function(reason){
                            // something went wrong
                          });
                          ```
  
                          @method catch
                          @param {Function} onRejection
                          Useful for tooling.
                          @return {Promise}
                        */
                        'catch': function _catch(onRejection) {
                            return this.then(null, onRejection);
                        }
                    };

                    function polyfill() {
                        var local = undefined;

                        if (typeof global !== 'undefined') {
                            local = global;
                        } else if (typeof self !== 'undefined') {
                            local = self;
                        } else {
                            try {
                                local = Function('return this')();
                            } catch (e) {
                                throw new Error('polyfill failed because global object is unavailable in this environment');
                            }
                        }

                        var P = local.Promise;

                        if (P) {
                            var promiseToString = null;
                            try {
                                promiseToString = Object.prototype.toString.call(P.resolve());
                            } catch (e) {
                                // silently ignored
                            }

                            if (promiseToString === '[object Promise]' && !P.cast) {
                                return;
                            }
                        }

                        local.Promise = Promise;
                    }

                    // Strange compat..
                    Promise.polyfill = polyfill;
                    Promise.Promise = Promise;

                    return Promise;

                })));
                //# sourceMappingURL=es6-promise.map

                /* WEBPACK VAR INJECTION */
            }.call(exports, __webpack_require__(146), __webpack_require__(48)))

            /***/
        }),
        /* 53 */
        /***/
        (function(module, exports) {

            // Production steps of ECMA-262, Edition 6, 22.1.2.1
            // Reference: http://www.ecma-international.org/ecma-262/6.0/#sec-array.from
            module.exports = (function() {
                var isCallable = function(fn) {
                    return typeof fn === 'function';
                };
                var toInteger = function(value) {
                    var number = Number(value);
                    if (isNaN(number)) {
                        return 0;
                    }
                    if (number === 0 || !isFinite(number)) {
                        return number;
                    }
                    return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
                };
                var maxSafeInteger = Math.pow(2, 53) - 1;
                var toLength = function(value) {
                    var len = toInteger(value);
                    return Math.min(Math.max(len, 0), maxSafeInteger);
                };
                var iteratorProp = function(value) {
                    if (value != null) {
                        if (['string', 'number', 'boolean', 'symbol'].indexOf(typeof value) > -1) {
                            return Symbol.iterator;
                        } else if (
                            (typeof Symbol !== 'undefined') &&
                            ('iterator' in Symbol) &&
                            (Symbol.iterator in value)
                        ) {
                            return Symbol.iterator;
                        }
                        // Support "@@iterator" placeholder, Gecko 27 to Gecko 35
                        else if ('@@iterator' in value) {
                            return '@@iterator';
                        }
                    }
                };
                var getMethod = function(O, P) {
                    // Assert: IsPropertyKey(P) is true.
                    if (O != null && P != null) {
                        // Let func be GetV(O, P).
                        var func = O[P];
                        // ReturnIfAbrupt(func).
                        // If func is either undefined or null, return undefined.
                        if (func == null) {
                            return void 0;
                        }
                        // If IsCallable(func) is false, throw a TypeError exception.
                        if (!isCallable(func)) {
                            throw new TypeError(func + ' is not a function');
                        }
                        return func;
                    }
                };
                var iteratorStep = function(iterator) {
                    // Let result be IteratorNext(iterator).
                    // ReturnIfAbrupt(result).
                    var result = iterator.next();
                    // Let done be IteratorComplete(result).
                    // ReturnIfAbrupt(done).
                    var done = Boolean(result.done);
                    // If done is true, return false.
                    if (done) {
                        return false;
                    }
                    // Return result.
                    return result;
                };

                // The length property of the from method is 1.
                return function from(items /*, mapFn, thisArg */ ) {
                    'use strict';

                    // 1. Let C be the this value.
                    var C = this;

                    // 2. If mapfn is undefined, let mapping be false.
                    var mapFn = arguments.length > 1 ? arguments[1] : void 0;

                    var T;
                    if (typeof mapFn !== 'undefined') {
                        // 3. else
                        //   a. If IsCallable(mapfn) is false, throw a TypeError exception.
                        if (!isCallable(mapFn)) {
                            throw new TypeError(
                                'Array.from: when provided, the second argument must be a function'
                            );
                        }

                        //   b. If thisArg was supplied, let T be thisArg; else let T
                        //      be undefined.
                        if (arguments.length > 2) {
                            T = arguments[2];
                        }
                        //   c. Let mapping be true (implied by mapFn)
                    }

                    var A, k;

                    // 4. Let usingIterator be GetMethod(items, @@iterator).
                    // 5. ReturnIfAbrupt(usingIterator).
                    var usingIterator = getMethod(items, iteratorProp(items));

                    // 6. If usingIterator is not undefined, then
                    if (usingIterator !== void 0) {
                        // a. If IsConstructor(C) is true, then
                        //   i. Let A be the result of calling the [[Construct]]
                        //      internal method of C with an empty argument list.
                        // b. Else,
                        //   i. Let A be the result of the abstract operation ArrayCreate
                        //      with argument 0.
                        // c. ReturnIfAbrupt(A).
                        A = isCallable(C) ? Object(new C()) : [];

                        // d. Let iterator be GetIterator(items, usingIterator).
                        var iterator = usingIterator.call(items);

                        // e. ReturnIfAbrupt(iterator).
                        if (iterator == null) {
                            throw new TypeError(
                                'Array.from requires an array-like or iterable object'
                            );
                        }

                        // f. Let k be 0.
                        k = 0;

                        // g. Repeat
                        var next, nextValue;
                        while (true) {
                            // i. Let Pk be ToString(k).
                            // ii. Let next be IteratorStep(iterator).
                            // iii. ReturnIfAbrupt(next).
                            next = iteratorStep(iterator);

                            // iv. If next is false, then
                            if (!next) {

                                // 1. Let setStatus be Set(A, "length", k, true).
                                // 2. ReturnIfAbrupt(setStatus).
                                A.length = k;

                                // 3. Return A.
                                return A;
                            }
                            // v. Let nextValue be IteratorValue(next).
                            // vi. ReturnIfAbrupt(nextValue)
                            nextValue = next.value;

                            // vii. If mapping is true, then
                            //   1. Let mappedValue be Call(mapfn, T, «nextValue, k»).
                            //   2. If mappedValue is an abrupt completion, return
                            //      IteratorClose(iterator, mappedValue).
                            //   3. Let mappedValue be mappedValue.[[value]].
                            // viii. Else, let mappedValue be nextValue.
                            // ix.  Let defineStatus be the result of
                            //      CreateDataPropertyOrThrow(A, Pk, mappedValue).
                            // x. [TODO] If defineStatus is an abrupt completion, return
                            //    IteratorClose(iterator, defineStatus).
                            if (mapFn) {
                                A[k] = mapFn.call(T, nextValue, k);
                            } else {
                                A[k] = nextValue;
                            }
                            // xi. Increase k by 1.
                            k++;
                        }
                        // 7. Assert: items is not an Iterable so assume it is
                        //    an array-like object.
                    } else {

                        // 8. Let arrayLike be ToObject(items).
                        var arrayLike = Object(items);

                        // 9. ReturnIfAbrupt(items).
                        if (items == null) {
                            throw new TypeError(
                                'Array.from requires an array-like object - not null or undefined'
                            );
                        }

                        // 10. Let len be ToLength(Get(arrayLike, "length")).
                        // 11. ReturnIfAbrupt(len).
                        var len = toLength(arrayLike.length);

                        // 12. If IsConstructor(C) is true, then
                        //     a. Let A be Construct(C, «len»).
                        // 13. Else
                        //     a. Let A be ArrayCreate(len).
                        // 14. ReturnIfAbrupt(A).
                        A = isCallable(C) ? Object(new C(len)) : new Array(len);

                        // 15. Let k be 0.
                        k = 0;
                        // 16. Repeat, while k < len… (also steps a - h)
                        var kValue;
                        while (k < len) {
                            kValue = arrayLike[k];
                            if (mapFn) {
                                A[k] = mapFn.call(T, kValue, k);
                            } else {
                                A[k] = kValue;
                            }
                            k++;
                        }
                        // 17. Let setStatus be Set(A, "length", len, true).
                        // 18. ReturnIfAbrupt(setStatus).
                        A.length = len;
                        // 19. Return A.
                    }
                    return A;
                };
            })();


            /***/
        }),
        /* 54 */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.invokeApiFunction = exports.getDescription = exports.buildApiFromDescription = undefined;

            var _Intents = __webpack_require__(6);

            var _Intents2 = _interopRequireDefault(_Intents);

            var _messageManager = __webpack_require__(19);

            var _mapValues = __webpack_require__(139);

            var _mapValues2 = _interopRequireDefault(_mapValues);

            var _argumentsSerializer = __webpack_require__(56);

            var argumentsSerializer = _interopRequireWildcard(_argumentsSerializer);

            var _errorSerializer = __webpack_require__(18);

            var _handleFunctionResult = __webpack_require__(29);

            var _handleFunctionResult2 = _interopRequireDefault(_handleFunctionResult);

            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj;
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                        }
                    }
                    newObj.default = obj;
                    return newObj;
                }
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }
                    return arr2;
                } else {
                    return Array.from(arr);
                }
            }

            var DUMMY = true;

            var getRemoteCaller = function getRemoteCaller(appId, targetInfo, call) {
                return function() {
                    for (var _len = arguments.length, callArgs = Array(_len), _key = 0; _key < _len; _key++) {
                        callArgs[_key] = arguments[_key];
                    }

                    var _argumentsSerializer$ = argumentsSerializer.serialize(callArgs),
                        args = _argumentsSerializer$.args,
                        transfer = _argumentsSerializer$.transfer;

                    return (0, _messageManager.send)({
                        appId: appId,
                        call: call,
                        args: args,
                        intent: _Intents2.default.INVOKE_FUNCTION
                    }, targetInfo, transfer).then(_handleFunctionResult2.default);
                };
            };

            var buildApiFromDescription = exports.buildApiFromDescription = function buildApiFromDescription(appId, description, targetInfo) {
                return (0, _mapValues2.default)(description, function(dummy, call) {
                    return getRemoteCaller(appId, targetInfo, call);
                });
            };

            var getDescription = exports.getDescription = function getDescription(app) {
                return (0, _mapValues2.default)(app, function() {
                    return DUMMY;
                });
            };

            var invokeApiFunction = exports.invokeApiFunction = function invokeApiFunction(func, args, ports) {
                try {
                    var actualArgs = argumentsSerializer.deserialize(args, ports);
                    return Promise.resolve(func.apply(undefined, _toConsumableArray(actualArgs))).catch(_errorSerializer.serialize);
                } catch (e) {
                    return (0, _errorSerializer.serialize)(e);
                }
            };

            /***/
        }),
        /* 55 */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.isEmpty = exports.unregisterApp = exports.hasApp = exports.getAppData = exports.getAppById = exports.registerApp = undefined;

            var _get = __webpack_require__(13);

            var _get2 = _interopRequireDefault(_get);

            var _isEmpty2 = __webpack_require__(135);

            var _isEmpty3 = _interopRequireDefault(_isEmpty2);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            var _apps = {};

            var registerApp = exports.registerApp = function registerApp(id, app, onApiCall) {
                _apps[id] = {
                    app: app,
                    onApiCall: onApiCall
                };
            };

            var getAppById = exports.getAppById = function getAppById(id) {
                return (0, _get2.default)(_apps, [id, 'app']);
            };

            var getAppData = exports.getAppData = function getAppData(id) {
                return _apps[id];
            };

            var hasApp = exports.hasApp = function hasApp(id) {
                return Boolean(_apps[id]);
            };

            var unregisterApp = exports.unregisterApp = function unregisterApp(id) {
                return delete _apps[id];
            };

            var isEmpty = exports.isEmpty = function isEmpty() {
                return (0, _isEmpty3.default)(_apps);
            };

            /***/
        }),
        /* 56 */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.deserialize = exports.serialize = undefined;

            var _slicedToArray = function() {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally {
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally {
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                return function(arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();

            var _isFunction = __webpack_require__(16);

            var _isFunction2 = _interopRequireDefault(_isFunction);

            var _transform = __webpack_require__(145);

            var _transform2 = _interopRequireDefault(_transform);

            var _map = __webpack_require__(138);

            var _map2 = _interopRequireDefault(_map);

            var _messageManager = __webpack_require__(19);

            var _Intents = __webpack_require__(6);

            var _Intents2 = _interopRequireDefault(_Intents);

            var _handleFunctionResult = __webpack_require__(29);

            var _handleFunctionResult2 = _interopRequireDefault(_handleFunctionResult);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            function _toConsumableArray(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }
                    return arr2;
                } else {
                    return Array.from(arr);
                }
            }

            var serialize = exports.serialize = function serialize(arr) {
                return (0, _transform2.default)(arr, function(_ref, arg) {
                    var args = _ref.args,
                        transfer = _ref.transfer;

                    if ((0, _isFunction2.default)(arg)) {
                        var _ref2 = new MessageChannel(),
                            port1 = _ref2.port1,
                            port2 = _ref2.port2;

                        port1.onmessage = function(_ref3) {
                            var data = _ref3.data,
                                _ref3$ports = _slicedToArray(_ref3.ports, 1),
                                transferPort = _ref3$ports[0];

                            var port = data.__port || transferPort;
                            Promise.resolve(arg.apply(undefined, _toConsumableArray(data))).then((0, _messageManager.sendResponse)(port, _Intents2.default.RESOLVE), (0, _messageManager.sendResponse)(port, _Intents2.default.REJECT));
                        };
                        var index = transfer.length;
                        args.push({
                            type: 'function',
                            index: index,
                            port: port2
                        });
                        transfer.push(port2);
                    } else {
                        args.push({
                            type: 'value',
                            value: arg
                        });
                    }
                }, {
                    args: [],
                    transfer: []
                });
            };

            var deserialize = exports.deserialize = function deserialize(arr, ports) {
                return (0, _map2.default)(arr, function(arg) {
                    switch (arg.type) {
                        case 'value':
                            return arg.value;
                        case 'function':
                            return function() {
                                var target = arg.port || ports[arg.index];

                                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                                    args[_key] = arguments[_key];
                                }

                                return (0, _messageManager.send)(args, {
                                    target: target
                                }).then(_handleFunctionResult2.default);
                            };
                    }
                });
            };

            /***/
        }),
        /* 57 */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var isListening = false;
            var addSingleHandler = exports.addSingleHandler = function addSingleHandler(handler) {
                if (!isListening) {
                    isListening = true;
                    self.addEventListener('message', handler);
                }
            };

            var removeSingleHandler = exports.removeSingleHandler = function removeSingleHandler(handler) {
                self.removeEventListener('message', handler);
                isListening = false;
            };

            /***/
        }),
        /* 58 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getNative = __webpack_require__(3),
                root = __webpack_require__(1);

            /* Built-in method references that are verified to be native. */
            var DataView = getNative(root, 'DataView');

            module.exports = DataView;


            /***/
        }),
        /* 59 */
        /***/
        (function(module, exports, __webpack_require__) {

            var hashClear = __webpack_require__(102),
                hashDelete = __webpack_require__(103),
                hashGet = __webpack_require__(104),
                hashHas = __webpack_require__(105),
                hashSet = __webpack_require__(106);

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = hashClear;
            Hash.prototype['delete'] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;

            module.exports = Hash;


            /***/
        }),
        /* 60 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getNative = __webpack_require__(3),
                root = __webpack_require__(1);

            /* Built-in method references that are verified to be native. */
            var Promise = getNative(root, 'Promise');

            module.exports = Promise;


            /***/
        }),
        /* 61 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getNative = __webpack_require__(3),
                root = __webpack_require__(1);

            /* Built-in method references that are verified to be native. */
            var Set = getNative(root, 'Set');

            module.exports = Set;


            /***/
        }),
        /* 62 */
        /***/
        (function(module, exports, __webpack_require__) {

            var MapCache = __webpack_require__(21),
                setCacheAdd = __webpack_require__(124),
                setCacheHas = __webpack_require__(125);

            /**
             *
             * Creates an array cache object to store unique values.
             *
             * @private
             * @constructor
             * @param {Array} [values] The values to cache.
             */
            function SetCache(values) {
                var index = -1,
                    length = values == null ? 0 : values.length;

                this.__data__ = new MapCache;
                while (++index < length) {
                    this.add(values[index]);
                }
            }

            // Add methods to `SetCache`.
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;

            module.exports = SetCache;


            /***/
        }),
        /* 63 */
        /***/
        (function(module, exports, __webpack_require__) {

            var root = __webpack_require__(1);

            /** Built-in value references. */
            var Uint8Array = root.Uint8Array;

            module.exports = Uint8Array;


            /***/
        }),
        /* 64 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getNative = __webpack_require__(3),
                root = __webpack_require__(1);

            /* Built-in method references that are verified to be native. */
            var WeakMap = getNative(root, 'WeakMap');

            module.exports = WeakMap;


            /***/
        }),
        /* 65 */
        /***/
        (function(module, exports) {

            /**
             * A specialized version of `_.forEach` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns `array`.
             */
            function arrayEach(array, iteratee) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                    if (iteratee(array[index], index, array) === false) {
                        break;
                    }
                }
                return array;
            }

            module.exports = arrayEach;


            /***/
        }),
        /* 66 */
        /***/
        (function(module, exports) {

            /**
             * A specialized version of `_.filter` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function arrayFilter(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                        result[resIndex++] = value;
                    }
                }
                return result;
            }

            module.exports = arrayFilter;


            /***/
        }),
        /* 67 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseTimes = __webpack_require__(86),
                isArguments = __webpack_require__(25),
                isArray = __webpack_require__(0),
                isBuffer = __webpack_require__(15),
                isIndex = __webpack_require__(41),
                isTypedArray = __webpack_require__(17);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Creates an array of the enumerable property names of the array-like `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @param {boolean} inherited Specify returning inherited property names.
             * @returns {Array} Returns the array of property names.
             */
            function arrayLikeKeys(value, inherited) {
                var isArr = isArray(value),
                    isArg = !isArr && isArguments(value),
                    isBuff = !isArr && !isArg && isBuffer(value),
                    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                    skipIndexes = isArr || isArg || isBuff || isType,
                    result = skipIndexes ? baseTimes(value.length, String) : [],
                    length = result.length;

                for (var key in value) {
                    if ((inherited || hasOwnProperty.call(value, key)) &&
                        !(skipIndexes && (
                            // Safari 9 has enumerable `arguments.length` in strict mode.
                            key == 'length' ||
                            // Node.js 0.10 has enumerable non-index properties on buffers.
                            (isBuff && (key == 'offset' || key == 'parent')) ||
                            // PhantomJS 2 has enumerable non-index properties on typed arrays.
                            (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                            // Skip index properties.
                            isIndex(key, length)
                        ))) {
                        result.push(key);
                    }
                }
                return result;
            }

            module.exports = arrayLikeKeys;


            /***/
        }),
        /* 68 */
        /***/
        (function(module, exports) {

            /**
             * Appends the elements of `values` to `array`.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to append.
             * @returns {Array} Returns `array`.
             */
            function arrayPush(array, values) {
                var index = -1,
                    length = values.length,
                    offset = array.length;

                while (++index < length) {
                    array[offset + index] = values[index];
                }
                return array;
            }

            module.exports = arrayPush;


            /***/
        }),
        /* 69 */
        /***/
        (function(module, exports) {

            /**
             * A specialized version of `_.some` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function arraySome(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                    if (predicate(array[index], index, array)) {
                        return true;
                    }
                }
                return false;
            }

            module.exports = arraySome;


            /***/
        }),
        /* 70 */
        /***/
        (function(module, exports, __webpack_require__) {

            var defineProperty = __webpack_require__(93);

            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
                if (key == '__proto__' && defineProperty) {
                    defineProperty(object, key, {
                        'configurable': true,
                        'enumerable': true,
                        'value': value,
                        'writable': true
                    });
                } else {
                    object[key] = value;
                }
            }

            module.exports = baseAssignValue;


            /***/
        }),
        /* 71 */
        /***/
        (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(5);

            /** Built-in value references. */
            var objectCreate = Object.create;

            /**
             * The base implementation of `_.create` without support for assigning
             * properties to the created object.
             *
             * @private
             * @param {Object} proto The object to inherit from.
             * @returns {Object} Returns the new object.
             */
            var baseCreate = (function() {
                function object() {}
                return function(proto) {
                    if (!isObject(proto)) {
                        return {};
                    }
                    if (objectCreate) {
                        return objectCreate(proto);
                    }
                    object.prototype = proto;
                    var result = new object;
                    object.prototype = undefined;
                    return result;
                };
            }());

            module.exports = baseCreate;


            /***/
        }),
        /* 72 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseForOwn = __webpack_require__(22),
                createBaseEach = __webpack_require__(91);

            /**
             * The base implementation of `_.forEach` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEach = createBaseEach(baseForOwn);

            module.exports = baseEach;


            /***/
        }),
        /* 73 */
        /***/
        (function(module, exports, __webpack_require__) {

            var createBaseFor = __webpack_require__(92);

            /**
             * The base implementation of `baseForOwn` which iterates over `object`
             * properties returned by `keysFunc` and invokes `iteratee` for each property.
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseFor = createBaseFor();

            module.exports = baseFor;


            /***/
        }),
        /* 74 */
        /***/
        (function(module, exports, __webpack_require__) {

            var arrayPush = __webpack_require__(68),
                isArray = __webpack_require__(0);

            /**
             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @param {Function} symbolsFunc The function to get the symbols of `object`.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                var result = keysFunc(object);
                return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
            }

            module.exports = baseGetAllKeys;


            /***/
        }),
        /* 75 */
        /***/
        (function(module, exports) {

            /**
             * The base implementation of `_.hasIn` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHasIn(object, key) {
                return object != null && key in Object(object);
            }

            module.exports = baseHasIn;


            /***/
        }),
        /* 76 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseGetTag = __webpack_require__(2),
                isObjectLike = __webpack_require__(4);

            /** `Object#toString` result references. */
            var argsTag = '[object Arguments]';

            /**
             * The base implementation of `_.isArguments`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             */
            function baseIsArguments(value) {
                return isObjectLike(value) && baseGetTag(value) == argsTag;
            }

            module.exports = baseIsArguments;


            /***/
        }),
        /* 77 */
        /***/
        (function(module, exports, __webpack_require__) {

            var Stack = __webpack_require__(31),
                equalArrays = __webpack_require__(37),
                equalByTag = __webpack_require__(94),
                equalObjects = __webpack_require__(95),
                getTag = __webpack_require__(40),
                isArray = __webpack_require__(0),
                isBuffer = __webpack_require__(15),
                isTypedArray = __webpack_require__(17);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1;

            /** `Object#toString` result references. */
            var argsTag = '[object Arguments]',
                arrayTag = '[object Array]',
                objectTag = '[object Object]';

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * A specialized version of `baseIsEqual` for arrays and objects which performs
             * deep comparisons and tracks traversed objects enabling objects with circular
             * references to be compared.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                var objIsArr = isArray(object),
                    othIsArr = isArray(other),
                    objTag = objIsArr ? arrayTag : getTag(object),
                    othTag = othIsArr ? arrayTag : getTag(other);

                objTag = objTag == argsTag ? objectTag : objTag;
                othTag = othTag == argsTag ? objectTag : othTag;

                var objIsObj = objTag == objectTag,
                    othIsObj = othTag == objectTag,
                    isSameTag = objTag == othTag;

                if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) {
                        return false;
                    }
                    objIsArr = true;
                    objIsObj = false;
                }
                if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack);
                    return (objIsArr || isTypedArray(object)) ?
                        equalArrays(object, other, bitmask, customizer, equalFunc, stack) :
                        equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                }
                if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                    if (objIsWrapped || othIsWrapped) {
                        var objUnwrapped = objIsWrapped ? object.value() : object,
                            othUnwrapped = othIsWrapped ? other.value() : other;

                        stack || (stack = new Stack);
                        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                    }
                }
                if (!isSameTag) {
                    return false;
                }
                stack || (stack = new Stack);
                return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
            }

            module.exports = baseIsEqualDeep;


            /***/
        }),
        /* 78 */
        /***/
        (function(module, exports, __webpack_require__) {

            var Stack = __webpack_require__(31),
                baseIsEqual = __webpack_require__(34);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /**
             * The base implementation of `_.isMatch` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Array} matchData The property names, values, and compare flags to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             */
            function baseIsMatch(object, source, matchData, customizer) {
                var index = matchData.length,
                    length = index,
                    noCustomizer = !customizer;

                if (object == null) {
                    return !length;
                }
                object = Object(object);
                while (index--) {
                    var data = matchData[index];
                    if ((noCustomizer && data[2]) ?
                        data[1] !== object[data[0]] :
                        !(data[0] in object)
                    ) {
                        return false;
                    }
                }
                while (++index < length) {
                    data = matchData[index];
                    var key = data[0],
                        objValue = object[key],
                        srcValue = data[1];

                    if (noCustomizer && data[2]) {
                        if (objValue === undefined && !(key in object)) {
                            return false;
                        }
                    } else {
                        var stack = new Stack;
                        if (customizer) {
                            var result = customizer(objValue, srcValue, key, object, source, stack);
                        }
                        if (!(result === undefined ?
                                baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) :
                                result
                            )) {
                            return false;
                        }
                    }
                }
                return true;
            }

            module.exports = baseIsMatch;


            /***/
        }),
        /* 79 */
        /***/
        (function(module, exports, __webpack_require__) {

            var isFunction = __webpack_require__(16),
                isMasked = __webpack_require__(108),
                isObject = __webpack_require__(5),
                toSource = __webpack_require__(46);

            /**
             * Used to match `RegExp`
             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
             */
            var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

            /** Used to detect host constructors (Safari). */
            var reIsHostCtor = /^\[object .+?Constructor\]$/;

            /** Used for built-in method references. */
            var funcProto = Function.prototype,
                objectProto = Object.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp('^' +
                funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
            );

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
                if (!isObject(value) || isMasked(value)) {
                    return false;
                }
                var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                return pattern.test(toSource(value));
            }

            module.exports = baseIsNative;


            /***/
        }),
        /* 80 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseGetTag = __webpack_require__(2),
                isLength = __webpack_require__(26),
                isObjectLike = __webpack_require__(4);

            /** `Object#toString` result references. */
            var argsTag = '[object Arguments]',
                arrayTag = '[object Array]',
                boolTag = '[object Boolean]',
                dateTag = '[object Date]',
                errorTag = '[object Error]',
                funcTag = '[object Function]',
                mapTag = '[object Map]',
                numberTag = '[object Number]',
                objectTag = '[object Object]',
                regexpTag = '[object RegExp]',
                setTag = '[object Set]',
                stringTag = '[object String]',
                weakMapTag = '[object WeakMap]';

            var arrayBufferTag = '[object ArrayBuffer]',
                dataViewTag = '[object DataView]',
                float32Tag = '[object Float32Array]',
                float64Tag = '[object Float64Array]',
                int8Tag = '[object Int8Array]',
                int16Tag = '[object Int16Array]',
                int32Tag = '[object Int32Array]',
                uint8Tag = '[object Uint8Array]',
                uint8ClampedTag = '[object Uint8ClampedArray]',
                uint16Tag = '[object Uint16Array]',
                uint32Tag = '[object Uint32Array]';

            /** Used to identify `toStringTag` values of typed arrays. */
            var typedArrayTags = {};
            typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
                typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
                typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                typedArrayTags[uint32Tag] = true;
            typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
                typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
                typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
                typedArrayTags[errorTag] = typedArrayTags[funcTag] =
                typedArrayTags[mapTag] = typedArrayTags[numberTag] =
                typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
                typedArrayTags[setTag] = typedArrayTags[stringTag] =
                typedArrayTags[weakMapTag] = false;

            /**
             * The base implementation of `_.isTypedArray` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             */
            function baseIsTypedArray(value) {
                return isObjectLike(value) &&
                    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
            }

            module.exports = baseIsTypedArray;


            /***/
        }),
        /* 81 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseEach = __webpack_require__(72),
                isArrayLike = __webpack_require__(14);

            /**
             * The base implementation of `_.map` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function baseMap(collection, iteratee) {
                var index = -1,
                    result = isArrayLike(collection) ? Array(collection.length) : [];

                baseEach(collection, function(value, key, collection) {
                    result[++index] = iteratee(value, key, collection);
                });
                return result;
            }

            module.exports = baseMap;


            /***/
        }),
        /* 82 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseIsMatch = __webpack_require__(78),
                getMatchData = __webpack_require__(97),
                matchesStrictComparable = __webpack_require__(44);

            /**
             * The base implementation of `_.matches` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatches(source) {
                var matchData = getMatchData(source);
                if (matchData.length == 1 && matchData[0][2]) {
                    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                }
                return function(object) {
                    return object === source || baseIsMatch(object, source, matchData);
                };
            }

            module.exports = baseMatches;


            /***/
        }),
        /* 83 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseIsEqual = __webpack_require__(34),
                get = __webpack_require__(13),
                hasIn = __webpack_require__(133),
                isKey = __webpack_require__(24),
                isStrictComparable = __webpack_require__(43),
                matchesStrictComparable = __webpack_require__(44),
                toKey = __webpack_require__(12);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /**
             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
             *
             * @private
             * @param {string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatchesProperty(path, srcValue) {
                if (isKey(path) && isStrictComparable(srcValue)) {
                    return matchesStrictComparable(toKey(path), srcValue);
                }
                return function(object) {
                    var objValue = get(object, path);
                    return (objValue === undefined && objValue === srcValue) ?
                        hasIn(object, path) :
                        baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                };
            }

            module.exports = baseMatchesProperty;


            /***/
        }),
        /* 84 */
        /***/
        (function(module, exports) {

            /**
             * The base implementation of `_.property` without support for deep paths.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function baseProperty(key) {
                return function(object) {
                    return object == null ? undefined : object[key];
                };
            }

            module.exports = baseProperty;


            /***/
        }),
        /* 85 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseGet = __webpack_require__(33);

            /**
             * A specialized version of `baseProperty` which supports deep paths.
             *
             * @private
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyDeep(path) {
                return function(object) {
                    return baseGet(object, path);
                };
            }

            module.exports = basePropertyDeep;


            /***/
        }),
        /* 86 */
        /***/
        (function(module, exports) {

            /**
             * The base implementation of `_.times` without support for iteratee shorthands
             * or max array length checks.
             *
             * @private
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             */
            function baseTimes(n, iteratee) {
                var index = -1,
                    result = Array(n);

                while (++index < n) {
                    result[index] = iteratee(index);
                }
                return result;
            }

            module.exports = baseTimes;


            /***/
        }),
        /* 87 */
        /***/
        (function(module, exports, __webpack_require__) {

            var Symbol = __webpack_require__(8),
                arrayMap = __webpack_require__(32),
                isArray = __webpack_require__(0),
                isSymbol = __webpack_require__(27);

            /** Used as references for various `Number` constants. */
            var INFINITY = 1 / 0;

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined,
                symbolToString = symbolProto ? symbolProto.toString : undefined;

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
                // Exit early for strings to avoid a performance hit in some environments.
                if (typeof value == 'string') {
                    return value;
                }
                if (isArray(value)) {
                    // Recursively convert values (susceptible to call stack limits).
                    return arrayMap(value, baseToString) + '';
                }
                if (isSymbol(value)) {
                    return symbolToString ? symbolToString.call(value) : '';
                }
                var result = (value + '');
                return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }

            module.exports = baseToString;


            /***/
        }),
        /* 88 */
        /***/
        (function(module, exports) {

            /**
             * The base implementation of `_.unary` without support for storing metadata.
             *
             * @private
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             */
            function baseUnary(func) {
                return function(value) {
                    return func(value);
                };
            }

            module.exports = baseUnary;


            /***/
        }),
        /* 89 */
        /***/
        (function(module, exports) {

            /**
             * Checks if a `cache` value for `key` exists.
             *
             * @private
             * @param {Object} cache The cache to query.
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function cacheHas(cache, key) {
                return cache.has(key);
            }

            module.exports = cacheHas;


            /***/
        }),
        /* 90 */
        /***/
        (function(module, exports, __webpack_require__) {

            var root = __webpack_require__(1);

            /** Used to detect overreaching core-js shims. */
            var coreJsData = root['__core-js_shared__'];

            module.exports = coreJsData;


            /***/
        }),
        /* 91 */
        /***/
        (function(module, exports, __webpack_require__) {

            var isArrayLike = __webpack_require__(14);

            /**
             * Creates a `baseEach` or `baseEachRight` function.
             *
             * @private
             * @param {Function} eachFunc The function to iterate over a collection.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseEach(eachFunc, fromRight) {
                return function(collection, iteratee) {
                    if (collection == null) {
                        return collection;
                    }
                    if (!isArrayLike(collection)) {
                        return eachFunc(collection, iteratee);
                    }
                    var length = collection.length,
                        index = fromRight ? length : -1,
                        iterable = Object(collection);

                    while ((fromRight ? index-- : ++index < length)) {
                        if (iteratee(iterable[index], index, iterable) === false) {
                            break;
                        }
                    }
                    return collection;
                };
            }

            module.exports = createBaseEach;


            /***/
        }),
        /* 92 */
        /***/
        (function(module, exports) {

            /**
             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseFor(fromRight) {
                return function(object, iteratee, keysFunc) {
                    var index = -1,
                        iterable = Object(object),
                        props = keysFunc(object),
                        length = props.length;

                    while (length--) {
                        var key = props[fromRight ? length : ++index];
                        if (iteratee(iterable[key], key, iterable) === false) {
                            break;
                        }
                    }
                    return object;
                };
            }

            module.exports = createBaseFor;


            /***/
        }),
        /* 93 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getNative = __webpack_require__(3);

            var defineProperty = (function() {
                try {
                    var func = getNative(Object, 'defineProperty');
                    func({}, '', {});
                    return func;
                } catch (e) {}
            }());

            module.exports = defineProperty;


            /***/
        }),
        /* 94 */
        /***/
        (function(module, exports, __webpack_require__) {

            var Symbol = __webpack_require__(8),
                Uint8Array = __webpack_require__(63),
                eq = __webpack_require__(47),
                equalArrays = __webpack_require__(37),
                mapToArray = __webpack_require__(119),
                setToArray = __webpack_require__(126);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /** `Object#toString` result references. */
            var boolTag = '[object Boolean]',
                dateTag = '[object Date]',
                errorTag = '[object Error]',
                mapTag = '[object Map]',
                numberTag = '[object Number]',
                regexpTag = '[object RegExp]',
                setTag = '[object Set]',
                stringTag = '[object String]',
                symbolTag = '[object Symbol]';

            var arrayBufferTag = '[object ArrayBuffer]',
                dataViewTag = '[object DataView]';

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined,
                symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

            /**
             * A specialized version of `baseIsEqualDeep` for comparing objects of
             * the same `toStringTag`.
             *
             * **Note:** This function only supports comparing values with tags of
             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {string} tag The `toStringTag` of the objects to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                switch (tag) {
                    case dataViewTag:
                        if ((object.byteLength != other.byteLength) ||
                            (object.byteOffset != other.byteOffset)) {
                            return false;
                        }
                        object = object.buffer;
                        other = other.buffer;

                    case arrayBufferTag:
                        if ((object.byteLength != other.byteLength) ||
                            !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                            return false;
                        }
                        return true;

                    case boolTag:
                    case dateTag:
                    case numberTag:
                        // Coerce booleans to `1` or `0` and dates to milliseconds.
                        // Invalid dates are coerced to `NaN`.
                        return eq(+object, +other);

                    case errorTag:
                        return object.name == other.name && object.message == other.message;

                    case regexpTag:
                    case stringTag:
                        // Coerce regexes to strings and treat strings, primitives and objects,
                        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                        // for more details.
                        return object == (other + '');

                    case mapTag:
                        var convert = mapToArray;

                    case setTag:
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                        convert || (convert = setToArray);

                        if (object.size != other.size && !isPartial) {
                            return false;
                        }
                        // Assume cyclic values are equal.
                        var stacked = stack.get(object);
                        if (stacked) {
                            return stacked == other;
                        }
                        bitmask |= COMPARE_UNORDERED_FLAG;

                        // Recursively compare objects (susceptible to call stack limits).
                        stack.set(object, other);
                        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                        stack['delete'](object);
                        return result;

                    case symbolTag:
                        if (symbolValueOf) {
                            return symbolValueOf.call(object) == symbolValueOf.call(other);
                        }
                }
                return false;
            }

            module.exports = equalByTag;


            /***/
        }),
        /* 95 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getAllKeys = __webpack_require__(96);

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1;

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * A specialized version of `baseIsEqualDeep` for objects with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    objProps = getAllKeys(object),
                    objLength = objProps.length,
                    othProps = getAllKeys(other),
                    othLength = othProps.length;

                if (objLength != othLength && !isPartial) {
                    return false;
                }
                var index = objLength;
                while (index--) {
                    var key = objProps[index];
                    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                        return false;
                    }
                }
                // Assume cyclic values are equal.
                var stacked = stack.get(object);
                if (stacked && stack.get(other)) {
                    return stacked == other;
                }
                var result = true;
                stack.set(object, other);
                stack.set(other, object);

                var skipCtor = isPartial;
                while (++index < objLength) {
                    key = objProps[index];
                    var objValue = object[key],
                        othValue = other[key];

                    if (customizer) {
                        var compared = isPartial ?
                            customizer(othValue, objValue, key, other, object, stack) :
                            customizer(objValue, othValue, key, object, other, stack);
                    }
                    // Recursively compare objects (susceptible to call stack limits).
                    if (!(compared === undefined ?
                            (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack)) :
                            compared
                        )) {
                        result = false;
                        break;
                    }
                    skipCtor || (skipCtor = key == 'constructor');
                }
                if (result && !skipCtor) {
                    var objCtor = object.constructor,
                        othCtor = other.constructor;

                    // Non `Object` object instances with different constructors are not equal.
                    if (objCtor != othCtor &&
                        ('constructor' in object && 'constructor' in other) &&
                        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                        result = false;
                    }
                }
                stack['delete'](object);
                stack['delete'](other);
                return result;
            }

            module.exports = equalObjects;


            /***/
        }),
        /* 96 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseGetAllKeys = __webpack_require__(74),
                getSymbols = __webpack_require__(99),
                keys = __webpack_require__(28);

            /**
             * Creates an array of own enumerable property names and symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeys(object) {
                return baseGetAllKeys(object, keys, getSymbols);
            }

            module.exports = getAllKeys;


            /***/
        }),
        /* 97 */
        /***/
        (function(module, exports, __webpack_require__) {

            var isStrictComparable = __webpack_require__(43),
                keys = __webpack_require__(28);

            /**
             * Gets the property names, values, and compare flags of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the match data of `object`.
             */
            function getMatchData(object) {
                var result = keys(object),
                    length = result.length;

                while (length--) {
                    var key = result[length],
                        value = object[key];

                    result[length] = [key, value, isStrictComparable(value)];
                }
                return result;
            }

            module.exports = getMatchData;


            /***/
        }),
        /* 98 */
        /***/
        (function(module, exports, __webpack_require__) {

            var Symbol = __webpack_require__(8);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Built-in value references. */
            var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
                var isOwn = hasOwnProperty.call(value, symToStringTag),
                    tag = value[symToStringTag];

                try {
                    value[symToStringTag] = undefined;
                    var unmasked = true;
                } catch (e) {}

                var result = nativeObjectToString.call(value);
                if (unmasked) {
                    if (isOwn) {
                        value[symToStringTag] = tag;
                    } else {
                        delete value[symToStringTag];
                    }
                }
                return result;
            }

            module.exports = getRawTag;


            /***/
        }),
        /* 99 */
        /***/
        (function(module, exports, __webpack_require__) {

            var arrayFilter = __webpack_require__(66),
                stubArray = __webpack_require__(142);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Built-in value references. */
            var propertyIsEnumerable = objectProto.propertyIsEnumerable;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeGetSymbols = Object.getOwnPropertySymbols;

            /**
             * Creates an array of the own enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
                if (object == null) {
                    return [];
                }
                object = Object(object);
                return arrayFilter(nativeGetSymbols(object), function(symbol) {
                    return propertyIsEnumerable.call(object, symbol);
                });
            };

            module.exports = getSymbols;


            /***/
        }),
        /* 100 */
        /***/
        (function(module, exports) {

            /**
             * Gets the value at `key` of `object`.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function getValue(object, key) {
                return object == null ? undefined : object[key];
            }

            module.exports = getValue;


            /***/
        }),
        /* 101 */
        /***/
        (function(module, exports, __webpack_require__) {

            var castPath = __webpack_require__(36),
                isArguments = __webpack_require__(25),
                isArray = __webpack_require__(0),
                isIndex = __webpack_require__(41),
                isLength = __webpack_require__(26),
                toKey = __webpack_require__(12);

            /**
             * Checks if `path` exists on `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @param {Function} hasFunc The function to check properties.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             */
            function hasPath(object, path, hasFunc) {
                path = castPath(path, object);

                var index = -1,
                    length = path.length,
                    result = false;

                while (++index < length) {
                    var key = toKey(path[index]);
                    if (!(result = object != null && hasFunc(object, key))) {
                        break;
                    }
                    object = object[key];
                }
                if (result || ++index != length) {
                    return result;
                }
                length = object == null ? 0 : object.length;
                return !!length && isLength(length) && isIndex(key, length) &&
                    (isArray(object) || isArguments(object));
            }

            module.exports = hasPath;


            /***/
        }),
        /* 102 */
        /***/
        (function(module, exports, __webpack_require__) {

            var nativeCreate = __webpack_require__(11);

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
                this.__data__ = nativeCreate ? nativeCreate(null) : {};
                this.size = 0;
            }

            module.exports = hashClear;


            /***/
        }),
        /* 103 */
        /***/
        (function(module, exports) {

            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
                var result = this.has(key) && delete this.__data__[key];
                this.size -= result ? 1 : 0;
                return result;
            }

            module.exports = hashDelete;


            /***/
        }),
        /* 104 */
        /***/
        (function(module, exports, __webpack_require__) {

            var nativeCreate = __webpack_require__(11);

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
                var data = this.__data__;
                if (nativeCreate) {
                    var result = data[key];
                    return result === HASH_UNDEFINED ? undefined : result;
                }
                return hasOwnProperty.call(data, key) ? data[key] : undefined;
            }

            module.exports = hashGet;


            /***/
        }),
        /* 105 */
        /***/
        (function(module, exports, __webpack_require__) {

            var nativeCreate = __webpack_require__(11);

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
                var data = this.__data__;
                return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
            }

            module.exports = hashHas;


            /***/
        }),
        /* 106 */
        /***/
        (function(module, exports, __webpack_require__) {

            var nativeCreate = __webpack_require__(11);

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
                var data = this.__data__;
                this.size += this.has(key) ? 0 : 1;
                data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
                return this;
            }

            module.exports = hashSet;


            /***/
        }),
        /* 107 */
        /***/
        (function(module, exports) {

            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
                var type = typeof value;
                return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean') ?
                    (value !== '__proto__') :
                    (value === null);
            }

            module.exports = isKeyable;


            /***/
        }),
        /* 108 */
        /***/
        (function(module, exports, __webpack_require__) {

            var coreJsData = __webpack_require__(90);

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function() {
                var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                return uid ? ('Symbol(src)_1.' + uid) : '';
            }());

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
                return !!maskSrcKey && (maskSrcKey in func);
            }

            module.exports = isMasked;


            /***/
        }),
        /* 109 */
        /***/
        (function(module, exports) {

            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
                this.__data__ = [];
                this.size = 0;
            }

            module.exports = listCacheClear;


            /***/
        }),
        /* 110 */
        /***/
        (function(module, exports, __webpack_require__) {

            var assocIndexOf = __webpack_require__(9);

            /** Used for built-in method references. */
            var arrayProto = Array.prototype;

            /** Built-in value references. */
            var splice = arrayProto.splice;

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                if (index < 0) {
                    return false;
                }
                var lastIndex = data.length - 1;
                if (index == lastIndex) {
                    data.pop();
                } else {
                    splice.call(data, index, 1);
                }
                --this.size;
                return true;
            }

            module.exports = listCacheDelete;


            /***/
        }),
        /* 111 */
        /***/
        (function(module, exports, __webpack_require__) {

            var assocIndexOf = __webpack_require__(9);

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                return index < 0 ? undefined : data[index][1];
            }

            module.exports = listCacheGet;


            /***/
        }),
        /* 112 */
        /***/
        (function(module, exports, __webpack_require__) {

            var assocIndexOf = __webpack_require__(9);

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
                return assocIndexOf(this.__data__, key) > -1;
            }

            module.exports = listCacheHas;


            /***/
        }),
        /* 113 */
        /***/
        (function(module, exports, __webpack_require__) {

            var assocIndexOf = __webpack_require__(9);

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                if (index < 0) {
                    ++this.size;
                    data.push([key, value]);
                } else {
                    data[index][1] = value;
                }
                return this;
            }

            module.exports = listCacheSet;


            /***/
        }),
        /* 114 */
        /***/
        (function(module, exports, __webpack_require__) {

            var Hash = __webpack_require__(59),
                ListCache = __webpack_require__(7),
                Map = __webpack_require__(20);

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
                this.size = 0;
                this.__data__ = {
                    'hash': new Hash,
                    'map': new(Map || ListCache),
                    'string': new Hash
                };
            }

            module.exports = mapCacheClear;


            /***/
        }),
        /* 115 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getMapData = __webpack_require__(10);

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
                var result = getMapData(this, key)['delete'](key);
                this.size -= result ? 1 : 0;
                return result;
            }

            module.exports = mapCacheDelete;


            /***/
        }),
        /* 116 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getMapData = __webpack_require__(10);

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
                return getMapData(this, key).get(key);
            }

            module.exports = mapCacheGet;


            /***/
        }),
        /* 117 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getMapData = __webpack_require__(10);

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
                return getMapData(this, key).has(key);
            }

            module.exports = mapCacheHas;


            /***/
        }),
        /* 118 */
        /***/
        (function(module, exports, __webpack_require__) {

            var getMapData = __webpack_require__(10);

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
                var data = getMapData(this, key),
                    size = data.size;

                data.set(key, value);
                this.size += data.size == size ? 0 : 1;
                return this;
            }

            module.exports = mapCacheSet;


            /***/
        }),
        /* 119 */
        /***/
        (function(module, exports) {

            /**
             * Converts `map` to its key-value pairs.
             *
             * @private
             * @param {Object} map The map to convert.
             * @returns {Array} Returns the key-value pairs.
             */
            function mapToArray(map) {
                var index = -1,
                    result = Array(map.size);

                map.forEach(function(value, key) {
                    result[++index] = [key, value];
                });
                return result;
            }

            module.exports = mapToArray;


            /***/
        }),
        /* 120 */
        /***/
        (function(module, exports, __webpack_require__) {

            var memoize = __webpack_require__(140);

            /** Used as the maximum memoize cache size. */
            var MAX_MEMOIZE_SIZE = 500;

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
                var result = memoize(func, function(key) {
                    if (cache.size === MAX_MEMOIZE_SIZE) {
                        cache.clear();
                    }
                    return key;
                });

                var cache = result.cache;
                return result;
            }

            module.exports = memoizeCapped;


            /***/
        }),
        /* 121 */
        /***/
        (function(module, exports, __webpack_require__) {

            var overArg = __webpack_require__(45);

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeKeys = overArg(Object.keys, Object);

            module.exports = nativeKeys;


            /***/
        }),
        /* 122 */
        /***/
        (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */
            (function(module) {
                var freeGlobal = __webpack_require__(38);

                /** Detect free variable `exports`. */
                var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

                /** Detect free variable `module`. */
                var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

                /** Detect the popular CommonJS extension `module.exports`. */
                var moduleExports = freeModule && freeModule.exports === freeExports;

                /** Detect free variable `process` from Node.js. */
                var freeProcess = moduleExports && freeGlobal.process;

                /** Used to access faster Node.js helpers. */
                var nodeUtil = (function() {
                    try {
                        return freeProcess && freeProcess.binding && freeProcess.binding('util');
                    } catch (e) {}
                }());

                module.exports = nodeUtil;

                /* WEBPACK VAR INJECTION */
            }.call(exports, __webpack_require__(49)(module)))

            /***/
        }),
        /* 123 */
        /***/
        (function(module, exports) {

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString(value) {
                return nativeObjectToString.call(value);
            }

            module.exports = objectToString;


            /***/
        }),
        /* 124 */
        /***/
        (function(module, exports) {

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /**
             * Adds `value` to the array cache.
             *
             * @private
             * @name add
             * @memberOf SetCache
             * @alias push
             * @param {*} value The value to cache.
             * @returns {Object} Returns the cache instance.
             */
            function setCacheAdd(value) {
                this.__data__.set(value, HASH_UNDEFINED);
                return this;
            }

            module.exports = setCacheAdd;


            /***/
        }),
        /* 125 */
        /***/
        (function(module, exports) {

            /**
             * Checks if `value` is in the array cache.
             *
             * @private
             * @name has
             * @memberOf SetCache
             * @param {*} value The value to search for.
             * @returns {number} Returns `true` if `value` is found, else `false`.
             */
            function setCacheHas(value) {
                return this.__data__.has(value);
            }

            module.exports = setCacheHas;


            /***/
        }),
        /* 126 */
        /***/
        (function(module, exports) {

            /**
             * Converts `set` to an array of its values.
             *
             * @private
             * @param {Object} set The set to convert.
             * @returns {Array} Returns the values.
             */
            function setToArray(set) {
                var index = -1,
                    result = Array(set.size);

                set.forEach(function(value) {
                    result[++index] = value;
                });
                return result;
            }

            module.exports = setToArray;


            /***/
        }),
        /* 127 */
        /***/
        (function(module, exports, __webpack_require__) {

            var ListCache = __webpack_require__(7);

            /**
             * Removes all key-value entries from the stack.
             *
             * @private
             * @name clear
             * @memberOf Stack
             */
            function stackClear() {
                this.__data__ = new ListCache;
                this.size = 0;
            }

            module.exports = stackClear;


            /***/
        }),
        /* 128 */
        /***/
        (function(module, exports) {

            /**
             * Removes `key` and its value from the stack.
             *
             * @private
             * @name delete
             * @memberOf Stack
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function stackDelete(key) {
                var data = this.__data__,
                    result = data['delete'](key);

                this.size = data.size;
                return result;
            }

            module.exports = stackDelete;


            /***/
        }),
        /* 129 */
        /***/
        (function(module, exports) {

            /**
             * Gets the stack value for `key`.
             *
             * @private
             * @name get
             * @memberOf Stack
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function stackGet(key) {
                return this.__data__.get(key);
            }

            module.exports = stackGet;


            /***/
        }),
        /* 130 */
        /***/
        (function(module, exports) {

            /**
             * Checks if a stack value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Stack
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function stackHas(key) {
                return this.__data__.has(key);
            }

            module.exports = stackHas;


            /***/
        }),
        /* 131 */
        /***/
        (function(module, exports, __webpack_require__) {

            var ListCache = __webpack_require__(7),
                Map = __webpack_require__(20),
                MapCache = __webpack_require__(21);

            /** Used as the size to enable large array optimizations. */
            var LARGE_ARRAY_SIZE = 200;

            /**
             * Sets the stack `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Stack
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the stack cache instance.
             */
            function stackSet(key, value) {
                var data = this.__data__;
                if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                        pairs.push([key, value]);
                        this.size = ++data.size;
                        return this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                }
                data.set(key, value);
                this.size = data.size;
                return this;
            }

            module.exports = stackSet;


            /***/
        }),
        /* 132 */
        /***/
        (function(module, exports, __webpack_require__) {

            var memoizeCapped = __webpack_require__(120);

            /** Used to match property names within property paths. */
            var reLeadingDot = /^\./,
                rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

            /** Used to match backslashes in property paths. */
            var reEscapeChar = /\\(\\)?/g;

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = memoizeCapped(function(string) {
                var result = [];
                if (reLeadingDot.test(string)) {
                    result.push('');
                }
                string.replace(rePropName, function(match, number, quote, string) {
                    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
                });
                return result;
            });

            module.exports = stringToPath;


            /***/
        }),
        /* 133 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseHasIn = __webpack_require__(75),
                hasPath = __webpack_require__(101);

            /**
             * Checks if `path` is a direct or inherited property of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.hasIn(object, 'a');
             * // => true
             *
             * _.hasIn(object, 'a.b');
             * // => true
             *
             * _.hasIn(object, ['a', 'b']);
             * // => true
             *
             * _.hasIn(object, 'b');
             * // => false
             */
            function hasIn(object, path) {
                return object != null && hasPath(object, path, baseHasIn);
            }

            module.exports = hasIn;


            /***/
        }),
        /* 134 */
        /***/
        (function(module, exports) {

            /**
             * This method returns the first argument it receives.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {*} value Any value.
             * @returns {*} Returns `value`.
             * @example
             *
             * var object = { 'a': 1 };
             *
             * console.log(_.identity(object) === object);
             * // => true
             */
            function identity(value) {
                return value;
            }

            module.exports = identity;


            /***/
        }),
        /* 135 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseKeys = __webpack_require__(35),
                getTag = __webpack_require__(40),
                isArguments = __webpack_require__(25),
                isArray = __webpack_require__(0),
                isArrayLike = __webpack_require__(14),
                isBuffer = __webpack_require__(15),
                isPrototype = __webpack_require__(42),
                isTypedArray = __webpack_require__(17);

            /** `Object#toString` result references. */
            var mapTag = '[object Map]',
                setTag = '[object Set]';

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Checks if `value` is an empty object, collection, map, or set.
             *
             * Objects are considered empty if they have no own enumerable string keyed
             * properties.
             *
             * Array-like values such as `arguments` objects, arrays, buffers, strings, or
             * jQuery-like collections are considered empty if they have a `length` of `0`.
             * Similarly, maps and sets are considered empty if they have a `size` of `0`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is empty, else `false`.
             * @example
             *
             * _.isEmpty(null);
             * // => true
             *
             * _.isEmpty(true);
             * // => true
             *
             * _.isEmpty(1);
             * // => true
             *
             * _.isEmpty([1, 2, 3]);
             * // => false
             *
             * _.isEmpty({ 'a': 1 });
             * // => false
             */
            function isEmpty(value) {
                if (value == null) {
                    return true;
                }
                if (isArrayLike(value) &&
                    (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                    return !value.length;
                }
                var tag = getTag(value);
                if (tag == mapTag || tag == setTag) {
                    return !value.size;
                }
                if (isPrototype(value)) {
                    return !baseKeys(value).length;
                }
                for (var key in value) {
                    if (hasOwnProperty.call(value, key)) {
                        return false;
                    }
                }
                return true;
            }

            module.exports = isEmpty;


            /***/
        }),
        /* 136 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseGetTag = __webpack_require__(2),
                isObjectLike = __webpack_require__(4),
                isPlainObject = __webpack_require__(137);

            /** `Object#toString` result references. */
            var domExcTag = '[object DOMException]',
                errorTag = '[object Error]';

            /**
             * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
             * `SyntaxError`, `TypeError`, or `URIError` object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
             * @example
             *
             * _.isError(new Error);
             * // => true
             *
             * _.isError(Error);
             * // => false
             */
            function isError(value) {
                if (!isObjectLike(value)) {
                    return false;
                }
                var tag = baseGetTag(value);
                return tag == errorTag || tag == domExcTag ||
                    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
            }

            module.exports = isError;


            /***/
        }),
        /* 137 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseGetTag = __webpack_require__(2),
                getPrototype = __webpack_require__(39),
                isObjectLike = __webpack_require__(4);

            /** `Object#toString` result references. */
            var objectTag = '[object Object]';

            /** Used for built-in method references. */
            var funcProto = Function.prototype,
                objectProto = Object.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to infer the `Object` constructor. */
            var objectCtorString = funcToString.call(Object);

            /**
             * Checks if `value` is a plain object, that is, an object created by the
             * `Object` constructor or one with a `[[Prototype]]` of `null`.
             *
             * @static
             * @memberOf _
             * @since 0.8.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * _.isPlainObject(new Foo);
             * // => false
             *
             * _.isPlainObject([1, 2, 3]);
             * // => false
             *
             * _.isPlainObject({ 'x': 0, 'y': 0 });
             * // => true
             *
             * _.isPlainObject(Object.create(null));
             * // => true
             */
            function isPlainObject(value) {
                if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                    return false;
                }
                var proto = getPrototype(value);
                if (proto === null) {
                    return true;
                }
                var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                    funcToString.call(Ctor) == objectCtorString;
            }

            module.exports = isPlainObject;


            /***/
        }),
        /* 138 */
        /***/
        (function(module, exports, __webpack_require__) {

            var arrayMap = __webpack_require__(32),
                baseIteratee = __webpack_require__(23),
                baseMap = __webpack_require__(81),
                isArray = __webpack_require__(0);

            /**
             * Creates an array of values by running each element in `collection` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
             *
             * The guarded methods are:
             * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
             * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
             * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
             * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * _.map([4, 8], square);
             * // => [16, 64]
             *
             * _.map({ 'a': 4, 'b': 8 }, square);
             * // => [16, 64] (iteration order is not guaranteed)
             *
             * var users = [
             *   { 'user': 'barney' },
             *   { 'user': 'fred' }
             * ];
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, 'user');
             * // => ['barney', 'fred']
             */
            function map(collection, iteratee) {
                var func = isArray(collection) ? arrayMap : baseMap;
                return func(collection, baseIteratee(iteratee, 3));
            }

            module.exports = map;


            /***/
        }),
        /* 139 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseAssignValue = __webpack_require__(70),
                baseForOwn = __webpack_require__(22),
                baseIteratee = __webpack_require__(23);

            /**
             * Creates an object with the same keys as `object` and values generated
             * by running each own enumerable string keyed property of `object` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapKeys
             * @example
             *
             * var users = {
             *   'fred':    { 'user': 'fred',    'age': 40 },
             *   'pebbles': { 'user': 'pebbles', 'age': 1 }
             * };
             *
             * _.mapValues(users, function(o) { return o.age; });
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             *
             * // The `_.property` iteratee shorthand.
             * _.mapValues(users, 'age');
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             */
            function mapValues(object, iteratee) {
                var result = {};
                iteratee = baseIteratee(iteratee, 3);

                baseForOwn(object, function(value, key, object) {
                    baseAssignValue(result, key, iteratee(value, key, object));
                });
                return result;
            }

            module.exports = mapValues;


            /***/
        }),
        /* 140 */
        /***/
        (function(module, exports, __webpack_require__) {

            var MapCache = __webpack_require__(21);

            /** Error message constants. */
            var FUNC_ERROR_TEXT = 'Expected a function';

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
                if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                var memoized = function() {
                    var args = arguments,
                        key = resolver ? resolver.apply(this, args) : args[0],
                        cache = memoized.cache;

                    if (cache.has(key)) {
                        return cache.get(key);
                    }
                    var result = func.apply(this, args);
                    memoized.cache = cache.set(key, result) || cache;
                    return result;
                };
                memoized.cache = new(memoize.Cache || MapCache);
                return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = MapCache;

            module.exports = memoize;


            /***/
        }),
        /* 141 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseProperty = __webpack_require__(84),
                basePropertyDeep = __webpack_require__(85),
                isKey = __webpack_require__(24),
                toKey = __webpack_require__(12);

            /**
             * Creates a function that returns the value at `path` of a given object.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': 2 } },
             *   { 'a': { 'b': 1 } }
             * ];
             *
             * _.map(objects, _.property('a.b'));
             * // => [2, 1]
             *
             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
             * // => [1, 2]
             */
            function property(path) {
                return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
            }

            module.exports = property;


            /***/
        }),
        /* 142 */
        /***/
        (function(module, exports) {

            /**
             * This method returns a new empty array.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Array} Returns the new empty array.
             * @example
             *
             * var arrays = _.times(2, _.stubArray);
             *
             * console.log(arrays);
             * // => [[], []]
             *
             * console.log(arrays[0] === arrays[1]);
             * // => false
             */
            function stubArray() {
                return [];
            }

            module.exports = stubArray;


            /***/
        }),
        /* 143 */
        /***/
        (function(module, exports) {

            /**
             * This method returns `false`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `false`.
             * @example
             *
             * _.times(2, _.stubFalse);
             * // => [false, false]
             */
            function stubFalse() {
                return false;
            }

            module.exports = stubFalse;


            /***/
        }),
        /* 144 */
        /***/
        (function(module, exports, __webpack_require__) {

            var baseToString = __webpack_require__(87);

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString(value) {
                return value == null ? '' : baseToString(value);
            }

            module.exports = toString;


            /***/
        }),
        /* 145 */
        /***/
        (function(module, exports, __webpack_require__) {

            var arrayEach = __webpack_require__(65),
                baseCreate = __webpack_require__(71),
                baseForOwn = __webpack_require__(22),
                baseIteratee = __webpack_require__(23),
                getPrototype = __webpack_require__(39),
                isArray = __webpack_require__(0),
                isBuffer = __webpack_require__(15),
                isFunction = __webpack_require__(16),
                isObject = __webpack_require__(5),
                isTypedArray = __webpack_require__(17);

            /**
             * An alternative to `_.reduce`; this method transforms `object` to a new
             * `accumulator` object which is the result of running each of its own
             * enumerable string keyed properties thru `iteratee`, with each invocation
             * potentially mutating the `accumulator` object. If `accumulator` is not
             * provided, a new object with the same `[[Prototype]]` will be used. The
             * iteratee is invoked with four arguments: (accumulator, value, key, object).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The custom accumulator value.
             * @returns {*} Returns the accumulated value.
             * @example
             *
             * _.transform([2, 3, 4], function(result, n) {
             *   result.push(n *= n);
             *   return n % 2 == 0;
             * }, []);
             * // => [4, 9]
             *
             * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] }
             */
            function transform(object, iteratee, accumulator) {
                var isArr = isArray(object),
                    isArrLike = isArr || isBuffer(object) || isTypedArray(object);

                iteratee = baseIteratee(iteratee, 4);
                if (accumulator == null) {
                    var Ctor = object && object.constructor;
                    if (isArrLike) {
                        accumulator = isArr ? new Ctor : [];
                    } else if (isObject(object)) {
                        accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                    } else {
                        accumulator = {};
                    }
                }
                (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
                    return iteratee(accumulator, value, index, object);
                });
                return accumulator;
            }

            module.exports = transform;


            /***/
        }),
        /* 146 */
        /***/
        (function(module, exports) {

            // shim for using process in browser
            var process = module.exports = {};

            // cached from whatever global is present so that test runners that stub it
            // don't break things.  But we need to wrap it in a try catch in case it is
            // wrapped in strict mode code which doesn't define any globals.  It's inside a
            // function because try/catches deoptimize in certain engines.

            var cachedSetTimeout;
            var cachedClearTimeout;

            function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
            }

            function defaultClearTimeout() {
                throw new Error('clearTimeout has not been defined');
            }
            (function() {
                try {
                    if (typeof setTimeout === 'function') {
                        cachedSetTimeout = setTimeout;
                    } else {
                        cachedSetTimeout = defaultSetTimout;
                    }
                } catch (e) {
                    cachedSetTimeout = defaultSetTimout;
                }
                try {
                    if (typeof clearTimeout === 'function') {
                        cachedClearTimeout = clearTimeout;
                    } else {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                } catch (e) {
                    cachedClearTimeout = defaultClearTimeout;
                }
            }())

            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                    //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedSetTimeout(fun, 0);
                } catch (e) {
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch (e) {
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }


            }

            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                    //normal enviroments in sane situations
                    return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedClearTimeout(marker);
                } catch (e) {
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                        return cachedClearTimeout.call(null, marker);
                    } catch (e) {
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                        return cachedClearTimeout.call(this, marker);
                    }
                }



            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }

            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while (len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
            }

            process.nextTick = function(fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            };

            // v8 likes predictible objects
            function Item(fun, array) {
                this.fun = fun;
                this.array = array;
            }
            Item.prototype.run = function() {
                this.fun.apply(null, this.array);
            };
            process.title = 'browser';
            process.browser = true;
            process.env = {};
            process.argv = [];
            process.version = ''; // empty string to avoid regexp issues
            process.versions = {};

            function noop() {}

            process.on = noop;
            process.addListener = noop;
            process.once = noop;
            process.off = noop;
            process.removeListener = noop;
            process.removeAllListeners = noop;
            process.emit = noop;
            process.prependListener = noop;
            process.prependOnceListener = noop;

            process.listeners = function(name) {
                return []
            }

            process.binding = function(name) {
                throw new Error('process.binding is not supported');
            };

            process.cwd = function() {
                return '/'
            };
            process.chdir = function(dir) {
                throw new Error('process.chdir is not supported');
            };
            process.umask = function() {
                return 0;
            };


            /***/
        }),
        /* 147 */
        /***/
        (function(module, exports) {

            /* (ignored) */

            /***/
        }),
        /* 148 */
        /***/
        (function(module, exports, __webpack_require__) {

            "use strict";


            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.api = undefined;

            var _rpc = __webpack_require__(51);

            var api = _interopRequireWildcard(_rpc);

            var _es6Promise = __webpack_require__(52);

            var _es6Promise2 = _interopRequireDefault(_es6Promise);

            var _arrayFrom = __webpack_require__(50);

            var _arrayFrom2 = _interopRequireDefault(_arrayFrom);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj;
                } else {
                    var newObj = {};
                    if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                        }
                    }
                    newObj.default = obj;
                    return newObj;
                }
            }

            if (!Array.from) {
                Array.from = _arrayFrom2.default;
            }
            _es6Promise2.default.polyfill();

            exports.api = api;

            /***/
        })
        /******/
    ]);
});


// WEBPACK FOOTER //
// pm-rpc.min.js