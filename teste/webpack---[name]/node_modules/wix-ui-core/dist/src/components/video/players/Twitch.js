"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var eventemitter3_1 = require("eventemitter3");
var isString = require('lodash/isString');
var utils_1 = require("../utils");
var constants_1 = require("../constants");
var playerHOC_1 = require("./playerHOC");
var Video_st_css_1 = require("../Video.st.css");
var VIDEO_URL_REGEX = /(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/;
var CHANNEL_URL_REGEX = /(?:www\.|go\.)?twitch\.tv\/([a-z0-9_]+)($|\?)/;
exports.verifier = function(url) {
    return isString(url) &&
        (VIDEO_URL_REGEX.test(url) ||
            CHANNEL_URL_REGEX.test(url));
};
var SDKConfig = {
    name: 'Twitch',
    url: 'https://player.twitch.tv/js/embed/v1.js',
    isRequireAllow: true,
    resolveRequire: function(sdk) {
        return ({
            Player: sdk.PlayerEmbed
        });
    },
};
var mapPropsToPlayer = {
    src: function(instance) {
        return instance.reload();
    },
    playing: function(instance, player, nextPlaying) {
        if (nextPlaying) {
            player.play();
        } else {
            player.pause();
        }
    },
    muted: 'setMuted',
    volume: function(instance, player, nextVolume) {
        return player.setVolume(nextVolume / 100);
    },
};
var mapMethodsToPlayer = {
    play: 'play',
    pause: 'pause',
    stop: function(instance) {
        return instance.reload();
    },
    getDuration: 'getDuration',
    getCurrentTime: 'getCurrentTime',
    seekTo: 'seek',
    getVolume: function(instance, player) {
        return 100 * player.getVolume();
    },
    setVolume: function(instance, player, fraction) {
        return player.setVolume(fraction / 100);
    },
    isMuted: 'getMuted',
    mute: function(instance, player) {
        return player.setMuted(true);
    },
    unMute: function(instance, player) {
        return player.setMuted(false);
    },
};
var TwitchPlayer = /** @class */ (function(_super) {
    tslib_1.__extends(TwitchPlayer, _super);

    function TwitchPlayer(props) {
        var _this = _super.call(this, props) || this;
        _this.isDurationReady = false;
        _this.initPlayer = function(Twitch) {
            var _a = _this.props,
                playing = _a.playing,
                muted = _a.muted,
                playerOptions = _a.playerOptions,
                onInit = _a.onInit,
                onReady = _a.onReady;
            var src = _this.props.src;
            var isChannel = CHANNEL_URL_REGEX.test(src);
            var id = isChannel ?
                src.match(CHANNEL_URL_REGEX)[1] :
                src.match(VIDEO_URL_REGEX)[1];
            var _b = Twitch.Player,
                READY = _b.READY,
                PLAY = _b.PLAY,
                PAUSE = _b.PAUSE,
                ENDED = _b.ENDED;
            _this.player = new Twitch.Player(_this.playerId, tslib_1.__assign({
                video: isChannel ? '' : id,
                channel: isChannel ? id : '',
                height: '100%',
                width: '100%',
                playsinline: true,
                autoplay: playing,
                muted: muted
            }, playerOptions));
            _this.player.addEventListener(READY, function() {
                _this.awaitDuration();
                onReady();
            });
            _this.player.addEventListener(PLAY, function() {
                _this.eventEmitter.emit(constants_1.EVENTS.PLAYING);
                _this.progress();
            });
            _this.player.addEventListener(PAUSE, function() {
                _this.eventEmitter.emit(constants_1.EVENTS.PAUSED);
                _this.stopProgress();
            });
            _this.player.addEventListener(ENDED, function() {
                _this.eventEmitter.emit(constants_1.EVENTS.ENDED);
                _this.stopProgress();
            });
            onInit(_this.player, TwitchPlayer.playerName);
        };
        _this.awaitDuration = function() {
            if (!_this.isDurationReady) {
                var duration = _this.player.getDuration();
                if (duration) {
                    _this.isDurationReady = true;
                    _this.props.onDuration(duration);
                }
            }
            _this.durationTimeout = window.setTimeout(_this.awaitDuration, constants_1.PROGRESS_INTERVAL);
        };
        _this.progress = function() {
            _this.stopProgress();
            _this.props.onProgress(_this.player.getCurrentTime() || 0);
            _this.progressTimeout = window.setTimeout(_this.progress, constants_1.PROGRESS_INTERVAL);
        };
        _this.eventEmitter = new eventemitter3_1.EventEmitter();
        _this.playerId = "twitch-" + props.id;
        return _this;
    }
    TwitchPlayer.prototype.componentDidMount = function() {
        var _this = this;
        utils_1.getSDK(SDKConfig)
            .then(this.initPlayer)
            .catch(function(error) {
                _this.props.onError(error);
            });
    };
    TwitchPlayer.prototype.componentWillUnmount = function() {
        if (this.player) {
            this.player.destroy();
        }
        this.eventEmitter.removeAllListeners();
        this.stopProgress();
        this.stopAwaitDuration();
    };
    TwitchPlayer.prototype.stopAwaitDuration = function() {
        window.clearTimeout(this.durationTimeout);
    };
    TwitchPlayer.prototype.stopProgress = function() {
        window.clearTimeout(this.progressTimeout);
    };
    TwitchPlayer.prototype.render = function() {
        return (React.createElement("div", {
            id: this.playerId,
            className: Video_st_css_1.default.playerContainer,
            "data-player-name": "Twitch"
        }));
    };
    TwitchPlayer.displayName = 'Twitch';
    TwitchPlayer.playerName = 'twitch';
    return TwitchPlayer;
}(React.PureComponent));
exports.Player = playerHOC_1.default(TwitchPlayer, mapPropsToPlayer, mapMethodsToPlayer);
//# sourceMappingURL=Twitch.js.map