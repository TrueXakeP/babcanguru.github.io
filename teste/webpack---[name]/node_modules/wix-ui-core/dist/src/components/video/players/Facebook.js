"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var eventemitter3_1 = require("eventemitter3");
var isString = require('lodash/isString');
var utils_1 = require("../utils");
var playerHOC_1 = require("./playerHOC");
var constants_1 = require("../constants");
var Video_st_css_1 = require("../Video.st.css");
var URL_REGEX = /facebook\.com\/([^/?].+\/)?video(s|\.php)[/?].*$/;
exports.verifier = function(url) {
    return isString(url) && URL_REGEX.test(url);
};
var SDKConfig = {
    name: 'FB',
    url: '//connect.facebook.net/en_US/sdk.js',
    onReady: 'fbAsyncInit',
    isRequireAllow: false,
};
var mapPropsToPlayer = {
    src: function(instance) {
        return instance.reload();
    },
    playing: function(instance, player, nextPlaying) {
        if (nextPlaying) {
            player.play();
        } else {
            player.pause();
        }
    },
    muted: function(instance, player, nextMuted) {
        if (nextMuted) {
            player.mute();
        } else {
            player.unmute();
        }
    },
    volume: function(instance, player, nextVolume) {
        return player.setVolume(nextVolume / 100);
    },
};
var mapMethodsToPlayer = {
    play: 'play',
    pause: 'pause',
    stop: function(instance) {
        return instance.reload();
    },
    getDuration: 'getDuration',
    getCurrentTime: 'getCurrentPosition',
    seekTo: 'seek',
    getVolume: function(instance, player) {
        return 100 * player.getVolume();
    },
    setVolume: function(instance, player, fraction) {
        return player.setVolume(fraction / 100);
    },
    isMuted: 'isMuted',
    mute: 'mute',
    unMute: 'unmute',
};
var parseSize = function(value) {
    return Math.ceil(value) || 'auto';
};
var FacebookPlayer = /** @class */ (function(_super) {
    tslib_1.__extends(FacebookPlayer, _super);

    function FacebookPlayer(props) {
        var _this = _super.call(this, props) || this;
        _this.isDurationReady = false;
        _this.unsubscribeFBEvents = function() {
            return null;
        };
        _this.initPlayer = function(FB) {
            var appId = _this.props.appId;
            FB.init({
                appId: appId,
                xfbml: true,
                version: 'v2.5',
            });
            FB.Event.subscribe('xfbml.ready', _this.handleReady);
            FB.Event.subscribe('iframeplugin:create', _this.setAllowAttribute);
            _this.unsubscribeFBEvents = function() {
                FB.Event.unsubscribe('xfbml.ready', _this.handleReady);
                FB.Event.unsubscribe('iframeplugin:create', _this.setAllowAttribute);
            };
            _this.parser = FB.XFBML.parse;
        };
        _this.handleReady = function(msg) {
            var _a = _this.props,
                muted = _a.muted,
                onInit = _a.onInit,
                onReady = _a.onReady,
                onError = _a.onError;
            if (msg.type === 'video' && msg.id === _this.playerId) {
                _this.player = msg.instance;
                _this.player.subscribe('startedPlaying', function() {
                    _this.eventEmitter.emit(constants_1.EVENTS.PLAYING);
                    _this.progress();
                });
                _this.player.subscribe('paused', function() {
                    _this.eventEmitter.emit(constants_1.EVENTS.PAUSED);
                    _this.stopProgress();
                });
                _this.player.subscribe('finishedPlaying', function() {
                    _this.eventEmitter.emit(constants_1.EVENTS.ENDED);
                    _this.stopProgress();
                });
                _this.player.subscribe('error', onError);
                if (!muted) {
                    _this.player.unmute();
                }
                _this.awaitDuration();
                onInit(_this.player, FacebookPlayer.playerName);
                onReady();
            }
        };
        _this.awaitDuration = function() {
            if (!_this.isDurationReady) {
                var duration = _this.player.getDuration();
                if (duration) {
                    _this.isDurationReady = true;
                    _this.props.onDuration(duration);
                }
            }
            _this.durationTimeout = window.setTimeout(_this.awaitDuration, constants_1.PROGRESS_INTERVAL);
        };
        _this.progress = function() {
            _this.stopProgress();
            _this.props.onProgress(_this.player.getCurrentPosition() || 0);
            _this.progressTimeout = window.setTimeout(_this.progress, constants_1.PROGRESS_INTERVAL);
        };
        _this.setAllowAttribute = function() {
            if (!_this.containerRef.current) {
                return;
            }
            var iframe = _this.containerRef.current.querySelector('iframe');
            if (!iframe) {
                return;
            }
            iframe.setAttribute('allow', 'autoplay; encrypted-media');
        };
        _this.containerRef = React.createRef();
        _this.eventEmitter = new eventemitter3_1.EventEmitter();
        _this.playerId = "facebook-" + props.id;
        return _this;
    }
    FacebookPlayer.prototype.componentDidMount = function() {
        var _this = this;
        utils_1.getSDK(SDKConfig)
            .then(this.initPlayer)
            .catch(function(error) {
                _this.props.onError(error);
            });
    };
    FacebookPlayer.prototype.componentWillUnmount = function() {
        this.eventEmitter.removeAllListeners();
        this.unsubscribeFBEvents();
        this.stopAwaitDuration();
        this.stopProgress();
        this.parser = null;
    };
    FacebookPlayer.prototype.componentDidUpdate = function(prevProps) {
        if ((this.props.width !== prevProps.width ||
                this.props.height !== prevProps.height) &&
            this.parser) {
            this.parser(this.containerRef.current.parentElement);
        }
    };
    FacebookPlayer.prototype.stopAwaitDuration = function() {
        window.clearTimeout(this.durationTimeout);
    };
    FacebookPlayer.prototype.stopProgress = function() {
        window.clearTimeout(this.progressTimeout);
    };
    FacebookPlayer.prototype.render = function() {
        var _a = this.props,
            src = _a.src,
            playing = _a.playing,
            controls = _a.controls,
            width = _a.width,
            height = _a.height;
        return (React.createElement("div", {
            ref: this.containerRef,
            id: this.playerId,
            className: "fb-video " + Video_st_css_1.default.playerContainer,
            "data-href": src,
            "data-width": parseSize(width),
            "data-height": parseSize(height),
            "data-autoplay": playing ? 'true' : 'false',
            "data-allowfullscreen": "true",
            "data-controls": controls ? 'true' : 'false',
            "data-player-name": "Facebook",
            "data-hook": "player-container"
        }));
    };
    FacebookPlayer.displayName = 'Facebook';
    FacebookPlayer.playerName = 'facebook';
    return FacebookPlayer;
}(React.PureComponent));
exports.Player = playerHOC_1.default(FacebookPlayer, mapPropsToPlayer, mapMethodsToPlayer);
//# sourceMappingURL=Facebook.js.map