"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var eventemitter3_1 = require("eventemitter3");
var isString = require('lodash/isString');
var utils_1 = require("../utils");
var constants_1 = require("../constants");
var playerHOC_1 = require("./playerHOC");
var Video_st_css_1 = require("../Video.st.css");
var URL_REGEX = /(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})/;
exports.verifier = function(url) {
    return isString(url) && URL_REGEX.test(url);
};
var SDKConfig = {
    name: 'YT',
    url: 'https://www.youtube.com/iframe_api',
    onReady: 'onYouTubeIframeAPIReady',
    isLoaded: function(YT) {
        return !!YT.loaded;
    },
    isRequireAllow: false,
};
var mapPropsToPlayer = {
    src: function(instance) {
        return instance.reload();
    },
    playing: function(instance, player, nextPlaying) {
        if (nextPlaying) {
            player.playVideo();
        } else {
            player.pauseVideo();
        }
    },
    muted: function(instance, player, nextMuted) {
        if (nextMuted) {
            player.mute();
        } else {
            player.unMute();
        }
    },
    volume: 'setVolume',
    loop: 'setLoop',
};
var mapMethodsToPlayer = {
    play: 'playVideo',
    pause: 'pauseVideo',
    stop: 'stopVideo',
    getDuration: 'getDuration',
    getCurrentTime: 'getCurrentTime',
    seekTo: 'seekTo',
    getVolume: 'getVolume',
    setVolume: 'setVolume',
    isMuted: 'isMuted',
    mute: 'mute',
    unMute: 'unMute',
};
var YouTubePlayer = /** @class */ (function(_super) {
    tslib_1.__extends(YouTubePlayer, _super);

    function YouTubePlayer(props) {
        var _this = _super.call(this, props) || this;
        _this.initPlayer = function(YT) {
            var _a = _this.props,
                playing = _a.playing,
                muted = _a.muted,
                controls = _a.controls,
                loop = _a.loop,
                playerOptions = _a.playerOptions,
                onInit = _a.onInit,
                onReady = _a.onReady,
                onDuration = _a.onDuration,
                onError = _a.onError;
            var src = _this.props.src;
            var videoId = src.match(URL_REGEX)[1];
            _this.player = new YT.Player(_this.containerRef.current, {
                width: '100%',
                height: '100%',
                videoId: videoId,
                playerVars: tslib_1.__assign({
                    autoplay: playing ? 1 : 0,
                    mute: muted ? 1 : 0,
                    controls: controls ? 1 : 0,
                    loop: loop ? 1 : 0,
                    origin: window.location.origin,
                    playsinline: 1
                }, (loop && {
                    playlist: videoId
                }), playerOptions),
                events: {
                    onReady: function() {
                        onReady();
                        onDuration(_this.player.getDuration());
                    },
                    onStateChange: _this.onStateChange(YT.PlayerState),
                    onError: onError,
                },
            });
            onInit(_this.player, YouTubePlayer.playerName);
        };
        _this.onStateChange = function(PlayerState) {
            return function(_a) {
                var data = _a.data;
                var PLAYING = PlayerState.PLAYING,
                    PAUSED = PlayerState.PAUSED,
                    ENDED = PlayerState.ENDED;
                switch (data) {
                    case PLAYING:
                        _this.eventEmitter.emit(constants_1.EVENTS.PLAYING);
                        _this.progress();
                        break;
                    case PAUSED:
                        _this.eventEmitter.emit(constants_1.EVENTS.PAUSED);
                        _this.stopProgress();
                        break;
                    case ENDED:
                        _this.eventEmitter.emit(constants_1.EVENTS.ENDED);
                        _this.stopProgress();
                        break;
                    default:
                }
            };
        };
        _this.progress = function() {
            _this.stopProgress();
            _this.props.onProgress(_this.player.getCurrentTime() || 0);
            _this.progressTimeout = window.setTimeout(_this.progress, constants_1.PROGRESS_INTERVAL);
        };
        _this.containerRef = React.createRef();
        _this.eventEmitter = new eventemitter3_1.EventEmitter();
        return _this;
    }
    YouTubePlayer.prototype.componentDidMount = function() {
        var _this = this;
        utils_1.getSDK(SDKConfig)
            .then(this.initPlayer)
            .catch(function(error) {
                _this.props.onError(error);
            });
    };
    YouTubePlayer.prototype.componentWillUnmount = function() {
        if (this.player) {
            this.player.destroy();
        }
        this.eventEmitter.removeAllListeners();
        this.stopProgress();
    };
    YouTubePlayer.prototype.stopProgress = function() {
        window.clearTimeout(this.progressTimeout);
    };
    YouTubePlayer.prototype.render = function() {
        return (React.createElement("div", {
            ref: this.containerRef,
            className: Video_st_css_1.default.playerContainer,
            "data-player-name": "YouTube"
        }));
    };
    YouTubePlayer.displayName = 'YouTube';
    YouTubePlayer.playerName = 'youtube';
    return YouTubePlayer;
}(React.PureComponent));
exports.Player = playerHOC_1.default(YouTubePlayer, mapPropsToPlayer, mapMethodsToPlayer);
//# sourceMappingURL=YouTube.js.map