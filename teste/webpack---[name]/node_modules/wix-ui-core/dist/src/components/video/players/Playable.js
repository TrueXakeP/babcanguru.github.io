"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var eventemitter3_1 = require("eventemitter3");
var classnames_1 = require("classnames");
var isString = require('lodash/isString');
var isArray = require('lodash/isArray');
var playable_1 = require("playable");
var constants_1 = require("../constants");
var playerHOC_1 = require("./playerHOC");
var Video_st_css_1 = require("../Video.st.css");
var URL_REGEX = /\.(mp4|og[gv]|webm|mov|m4v)($|\?)/i;
exports.verifier = function(url) {
    if (isString(url)) {
        return URL_REGEX.test(url);
    }
    if (isArray(url)) {
        return url.some(function(item) {
            return URL_REGEX.test(item);
        });
    }
    return false;
};
var mapPropsToPlayer = {
    src: function(instance) {
        return instance.reload();
    },
    playing: function(instance, player, nextPlaying) {
        if (nextPlaying) {
            player.play();
        } else {
            player.pause();
        }
    },
    muted: function(instance, player, nextMuted) {
        if (nextMuted) {
            player.mute();
        } else {
            player.unmute();
        }
    },
    volume: 'setVolume',
    title: 'setTitle',
    loop: 'setLoop',
    logoUrl: 'setLogo',
    alwaysShowLogo: 'setAlwaysShowLogo',
    onLogoClick: 'setLogoClickCallback',
    preload: 'setPreload',
    showTitle: function(instance, player, isShowTitle) {
        if (isShowTitle) {
            player.showTitle();
        } else {
            player.hideTitle();
        }
    },
    controls: function(instance, player, isShowControls) {
        if (isShowControls) {
            player.showPlayControl();
            player.showVolumeControl();
            player.showTimeControl();
            player.showFullScreenControl();
            player.showProgressControl();
        } else {
            player.hidePlayControl();
            player.hideVolumeControl();
            player.hideTimeControl();
            player.hideFullScreenControl();
            player.hideProgressControl();
        }
    },
};
var mapMethodsToPlayer = {
    play: 'play',
    pause: 'pause',
    stop: 'reset',
    getDuration: 'getDuration',
    getCurrentTime: 'getCurrentTime',
    seekTo: 'seekTo',
    getVolume: 'getVolume',
    setVolume: 'setVolume',
    isMuted: function(instance, player) {
        return player.isMuted;
    },
    mute: 'mute',
    unMute: 'unmute',
};
var PlayablePlayer = /** @class */ (function(_super) {
    tslib_1.__extends(PlayablePlayer, _super);

    function PlayablePlayer(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            hasBeenPlayed: false,
        };
        _this.onPlayClick = function() {
            _this.player.play();
        };
        _this._handleRightClick = function(event) {
            return event.preventDefault();
        };
        _this.containerRef = React.createRef();
        _this.eventEmitter = new eventemitter3_1.EventEmitter();
        return _this;
    }
    PlayablePlayer.prototype.componentDidMount = function() {
        this.initPlayer();
    };
    PlayablePlayer.prototype.componentWillUnmount = function() {
        if (this.player) {
            this.player.getElement().removeEventListener('contextmenu', this._handleRightClick);
            this.player.destroy();
        }
        this.eventEmitter.removeAllListeners();
    };
    PlayablePlayer.prototype.initPlayer = function() {
        var _this = this;
        var _a = this.props,
            src = _a.src,
            playing = _a.playing,
            poster = _a.poster,
            muted = _a.muted,
            title = _a.title,
            texts = _a.texts,
            showTitle = _a.showTitle,
            loop = _a.loop,
            volume = _a.volume,
            controls = _a.controls,
            onInit = _a.onInit,
            onReady = _a.onReady,
            onDuration = _a.onDuration,
            onProgress = _a.onProgress,
            logoUrl = _a.logoUrl,
            onLogoClick = _a.onLogoClick,
            alwaysShowLogo = _a.alwaysShowLogo,
            modules = _a.modules,
            hideMainUI = _a.hideMainUI;
        var preload = (!poster ? 'metadata' : this.props.preload);
        this.registerModules(modules);
        this.player = playable_1.create({
            src: src,
            autoplay: !!playing,
            playsinline: true,
            muted: muted,
            fillAllSpace: true,
            title: title,
            preload: preload,
            loop: loop,
            volume: volume,
            texts: texts,
            hideOverlay: true,
            hideMainUI: hideMainUI,
        });
        this.player.getElement().addEventListener('contextmenu', this._handleRightClick);
        this._hidePlayableUI();
        if (!showTitle) {
            this.player.hideTitle();
        }
        if (logoUrl || onLogoClick || alwaysShowLogo) {
            this.player.setLogo(logoUrl);
            this.player.setAlwaysShowLogo(alwaysShowLogo);
            this.player.setLogoClickCallback(onLogoClick);
        }
        this.player.attachToElement(this.containerRef.current);
        this.player.on(playable_1.ENGINE_STATES.PLAY_REQUESTED, function() {
            if (controls) {
                _this._showPlayableUI();
            }
            _this.setState({
                hasBeenPlayed: true
            });
        });
        this.player.on(playable_1.ENGINE_STATES.METADATA_LOADED, function() {
            onReady();
            onDuration(_this.player.getDuration());
        });
        this.player.on(playable_1.ENGINE_STATES.PLAYING, function() {
            _this.setState({
                hasBeenPlayed: true
            });
            _this.eventEmitter.emit(constants_1.EVENTS.PLAYING);
        });
        this.player.on(playable_1.ENGINE_STATES.PAUSED, function() {
            _this.eventEmitter.emit(constants_1.EVENTS.PAUSED);
        });
        this.player.on(playable_1.ENGINE_STATES.ENDED, function() {
            _this.setState({
                hasBeenPlayed: false
            });
            _this.eventEmitter.emit(constants_1.EVENTS.ENDED);
        });
        this.player.on(playable_1.VIDEO_EVENTS.CURRENT_TIME_UPDATED, function(currentTime) {
            onProgress(currentTime);
        });
        onInit(this.player, PlayablePlayer.playerName);
    };
    PlayablePlayer.prototype._showPlayableUI = function() {
        this.player.showPlayControl();
        this.player.showVolumeControl();
        this.player.showTimeControl();
        this.player.showFullScreenControl();
        this.player.showProgressControl();
        this.player.showPictureInPictureControl();
    };
    PlayablePlayer.prototype._hidePlayableUI = function() {
        this.player.hidePlayControl();
        this.player.hideVolumeControl();
        this.player.hideTimeControl();
        this.player.hideFullScreenControl();
        this.player.hideProgressControl();
        this.player.hidePictureInPictureControl();
    };
    PlayablePlayer.prototype._renderCover = function() {
        var _a;
        var _b = this.props,
            showTitle = _b.showTitle,
            title = _b.title,
            poster = _b.poster,
            hideOverlay = _b.hideOverlay,
            playButton = _b.playButton,
            playing = _b.playing,
            description = _b.description;
        var hasBeenPlayed = this.state.hasBeenPlayed;
        if (hideOverlay || playing || hasBeenPlayed) {
            return null;
        }
        return (React.createElement("div", {
                className: classnames_1.default(Video_st_css_1.default.cover, (_a = {},
                    _a[Video_st_css_1.default.transparentOverlay] = !poster,
                    _a)),
                onClick: this.onPlayClick,
                onContextMenu: this._handleRightClick,
                "data-hook": "cover"
            },
            poster && React.createElement("img", {
                src: poster,
                alt: description,
                className: Video_st_css_1.default.poster
            }),
            React.createElement("div", {
                    className: Video_st_css_1.default.overlay
                },
                showTitle && title && (React.createElement("div", {
                    "data-hook": "title",
                    title: title,
                    className: Video_st_css_1.default.title
                }, title)),
                playButton)));
    };
    PlayablePlayer.prototype.registerModules = function(modules) {
        if (modules === void 0) {
            modules = {};
        }
        Object.keys(modules).forEach(function(moduleName) {
            return playable_1.registerModule(moduleName, modules[moduleName]);
        });
    };
    PlayablePlayer.prototype.render = function() {
        return (React.createElement(React.Fragment, null,
            React.createElement("div", {
                ref: this.containerRef,
                className: Video_st_css_1.default.playerContainer,
                "data-player-name": "Playable"
            }),
            this._renderCover()));
    };
    PlayablePlayer.displayName = 'Playable';
    PlayablePlayer.playerName = 'playable';
    PlayablePlayer.defaultProps = {
        poster: '',
        playButton: null,
    };
    return PlayablePlayer;
}(React.PureComponent));
exports.Player = playerHOC_1.default(PlayablePlayer, mapPropsToPlayer, mapMethodsToPlayer);
//# sourceMappingURL=Playable.js.map