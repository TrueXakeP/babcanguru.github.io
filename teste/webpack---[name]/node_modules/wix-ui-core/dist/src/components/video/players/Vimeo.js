"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var eventemitter3_1 = require("eventemitter3");
var isString = require('lodash/isString');
var utils_1 = require("../utils");
var constants_1 = require("../constants");
var playerHOC_1 = require("./playerHOC");
var Video_st_css_1 = require("../Video.st.css");
var URL_REGEX = /vimeo\.com\/.+/;
exports.verifier = function(url) {
    return isString(url) && URL_REGEX.test(url);
};
var SDKConfig = {
    name: 'Vimeo',
    url: 'https://player.vimeo.com/api/player.js',
    isRequireAllow: true,
    resolveRequire: function(sdk) {
        return ({
            Player: sdk
        });
    },
};
var mapPropsToPlayer = {
    src: function(instance) {
        return instance.reload();
    },
    playing: function(instance, player, nextPlaying) {
        if (nextPlaying) {
            player.play();
        } else {
            player.pause();
        }
    },
    muted: function(instance, player, nextMuted) {
        if (nextMuted) {
            player.setVolume(0);
        } else {
            player.setVolume(instance.props.volume / 100);
        }
    },
    volume: function(instance, player, nextVolume) {
        return player.setVolume(nextVolume / 100);
    },
};
var mapMethodsToPlayer = {
    play: 'play',
    pause: 'pause',
    stop: 'unload',
    getDuration: function(instance) {
        return instance.ref.duration;
    },
    getCurrentTime: function(instance) {
        return instance.ref.currentTime;
    },
    seekTo: 'setCurrentTime',
    getVolume: function(instance) {
        return instance.ref.volume;
    },
    setVolume: function(instance, player, fraction) {
        return player.setVolume(fraction / 100);
    },
    isMuted: function(instance) {
        return instance.ref.volume === 0;
    },
    mute: function(instance, player) {
        return player.setVolume(0);
    },
    unMute: function(instance, player) {
        return player.setVolume(1);
    },
};
var VimeoPlayer = /** @class */ (function(_super) {
    tslib_1.__extends(VimeoPlayer, _super);

    function VimeoPlayer(props) {
        var _this = _super.call(this, props) || this;
        _this.duration = 0;
        _this.currentTime = 0;
        _this.initPlayer = function(Vimeo) {
            var _a = _this.props,
                src = _a.src,
                playing = _a.playing,
                muted = _a.muted,
                loop = _a.loop,
                showTitle = _a.showTitle,
                playerOptions = _a.playerOptions,
                onInit = _a.onInit,
                onReady = _a.onReady,
                onDuration = _a.onDuration,
                onProgress = _a.onProgress,
                onError = _a.onError;
            _this.player = new Vimeo.Player(_this.containerRef.current, tslib_1.__assign({
                url: src,
                autoplay: playing,
                muted: muted,
                loop: loop,
                title: showTitle
            }, playerOptions));
            _this.player.ready().then(function() {
                onReady();
                _this.player.getDuration().then(function(duration) {
                    _this.duration = duration;
                    onDuration(duration);
                });
            });
            _this.player.on('play', function() {
                _this.eventEmitter.emit(constants_1.EVENTS.PLAYING);
            });
            _this.player.on('pause', function() {
                _this.eventEmitter.emit(constants_1.EVENTS.PAUSED);
            });
            _this.player.on('ended', function() {
                _this.eventEmitter.emit(constants_1.EVENTS.ENDED);
            });
            _this.player.on('volumechange', function(_a) {
                var volume = _a.volume;
                _this.volume = volume * 100;
            });
            _this.player.on('timeupdate', function(_a) {
                var seconds = _a.seconds;
                _this.currentTime = seconds;
                onProgress(seconds);
            });
            _this.player.on('error', onError);
            onInit(_this.player, VimeoPlayer.playerName);
        };
        _this.containerRef = React.createRef();
        _this.eventEmitter = new eventemitter3_1.EventEmitter();
        _this.volume = props.volume;
        return _this;
    }
    VimeoPlayer.prototype.componentDidMount = function() {
        var _this = this;
        utils_1.getSDK(SDKConfig)
            .then(this.initPlayer)
            .catch(function(error) {
                _this.props.onError(error);
            });
    };
    VimeoPlayer.prototype.componentWillUnmount = function() {
        if (this.player) {
            this.player.destroy();
        }
        this.eventEmitter.removeAllListeners();
    };
    VimeoPlayer.prototype.render = function() {
        return (React.createElement("div", {
            ref: this.containerRef,
            className: Video_st_css_1.default.playerContainer,
            "data-player-name": "Vimeo"
        }));
    };
    VimeoPlayer.displayName = 'Vimeo';
    VimeoPlayer.playerName = 'vimeo';
    return VimeoPlayer;
}(React.PureComponent));
exports.Player = playerHOC_1.default(VimeoPlayer, mapPropsToPlayer, mapMethodsToPlayer);
//# sourceMappingURL=Vimeo.js.map