"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
var React = require("react");
var eventemitter3_1 = require("eventemitter3");
var isString = require('lodash/isString');
var utils_1 = require("../utils");
var constants_1 = require("../constants");
var playerHOC_1 = require("./playerHOC");
var Video_st_css_1 = require("../Video.st.css");
var URL_REGEX = /^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/;
exports.verifier = function(url) {
    return isString(url) && URL_REGEX.test(url);
};
var SDKConfig = {
    name: 'DM',
    url: 'https://api.dmcdn.net/all.js',
    onReady: 'dmAsyncInit',
    isLoaded: function(DM) {
        return !!DM.player;
    },
    isRequireAllow: false,
};
var mapPropsToPlayer = {
    src: function(instance) {
        return instance.reload();
    },
    playing: function(instance, player, nextPlaying) {
        if (nextPlaying) {
            player.play();
        } else {
            player.pause();
        }
    },
    muted: 'setMuted',
    volume: function(instance, player, nextVolume) {
        return player.setVolume(nextVolume / 100);
    },
    controls: 'setControls',
};
var mapMethodsToPlayer = {
    play: 'play',
    pause: 'pause',
    stop: function(instance) {
        return instance.reload();
    },
    getDuration: function(instance, player) {
        return player.duration || 0;
    },
    getCurrentTime: function(instance, player) {
        return player.currentTime || 0;
    },
    seekTo: 'setCurrentTime',
    getVolume: function(instance, player) {
        return 100 * player.volume;
    },
    setVolume: function(instance, player, fraction) {
        return player.setVolume(fraction / 100);
    },
    isMuted: function(instance, player) {
        return player.muted;
    },
    mute: function(instance, player) {
        return player.setMuted(true);
    },
    unMute: function(instance, player) {
        return player.setMuted(false);
    },
};
var DailyMotionPlayer = /** @class */ (function(_super) {
    tslib_1.__extends(DailyMotionPlayer, _super);

    function DailyMotionPlayer(props) {
        var _this = _super.call(this, props) || this;
        _this.initPlayer = function(DM) {
            var _a = _this.props,
                playing = _a.playing,
                muted = _a.muted,
                controls = _a.controls,
                showTitle = _a.showTitle,
                playerOptions = _a.playerOptions,
                onInit = _a.onInit,
                onReady = _a.onReady,
                onDuration = _a.onDuration,
                onError = _a.onError;
            var src = _this.props.src;
            var _b = src.match(URL_REGEX),
                id = _b[1];
            _this.player = new DM.player(_this.containerRef.current, {
                width: '100%',
                height: '100%',
                video: id,
                params: tslib_1.__assign({
                    controls: controls,
                    autoplay: playing,
                    mute: muted,
                    'ui-start-screen-info': showTitle,
                    origin: window.location.origin
                }, playerOptions),
                events: {
                    apiready: function() {
                        onReady();
                    },
                    durationchange: function() {
                        onDuration(_this.player.duration);
                    },
                    playing: function() {
                        _this.eventEmitter.emit(constants_1.EVENTS.PLAYING);
                        _this.progress();
                    },
                    pause: function() {
                        _this.eventEmitter.emit(constants_1.EVENTS.PAUSED);
                        _this.stopProgress();
                    },
                    video_end: function() {
                        _this.eventEmitter.emit(constants_1.EVENTS.ENDED);
                        _this.stopProgress();
                    },
                    error: function(event) {
                        return onError(event);
                    },
                },
            });
            onInit(_this.player, DailyMotionPlayer.playerName);
        };
        _this.progress = function() {
            _this.stopProgress();
            _this.props.onProgress(_this.player.currentTime || 0);
            _this.progressTimeout = window.setTimeout(_this.progress, constants_1.PROGRESS_INTERVAL);
        };
        _this.containerRef = React.createRef();
        _this.eventEmitter = new eventemitter3_1.EventEmitter();
        return _this;
    }
    DailyMotionPlayer.prototype.componentDidMount = function() {
        var _this = this;
        utils_1.getSDK(SDKConfig)
            .then(this.initPlayer)
            .catch(function(error) {
                _this.props.onError(error);
            });
    };
    DailyMotionPlayer.prototype.componentWillUnmount = function() {
        this.eventEmitter.removeAllListeners();
        this.stopProgress();
    };
    DailyMotionPlayer.prototype.stopProgress = function() {
        window.clearTimeout(this.progressTimeout);
    };
    DailyMotionPlayer.prototype.render = function() {
        return (React.createElement("div", {
                className: Video_st_css_1.default.playerContainer,
                "data-player-name": "DailyMotion"
            },
            React.createElement("div", {
                ref: this.containerRef
            })));
    };
    DailyMotionPlayer.displayName = 'DailyMotion';
    DailyMotionPlayer.playerName = 'dailymotion';
    return DailyMotionPlayer;
}(React.PureComponent));
exports.Player = playerHOC_1.default(DailyMotionPlayer, mapPropsToPlayer, mapMethodsToPlayer);
//# sourceMappingURL=DailyMotion.js.map