"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
            if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * @typedef {string} Url
 */
/**
 * @typedef {string} GUID
 */
/**
 * @typedef {number} DateTime
 */
var dummy;
var defaultConfig = {
    endpoint: 'video-platform'
};
var init = function(webOrMobileLogger) {
    return function(userConfig) {
        if (userConfig === void 0) {
            userConfig = {};
        }
        var defaults = userConfig.defaults,
            restOfConfig = __rest(userConfig, ["defaults"]);
        var config = __assign({}, defaultConfig, restOfConfig);
        var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
        var logger = getLogger(factoryInstance);
        return defaults ? logger.util.updateDefaults(defaults) : logger;
    };
};
exports.initCustomLogger = function(factoryInstance) {
    return getLogger(factoryInstance);
};
var getLogger = function(biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function() {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function(defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function(logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({
                src: 71
            });
        this.bi = biLoggerClientFactoryInstance.logger({
            endpoint: 'video-platform'
        });
    };
    /**
     * @typedef {Object} playableProgressInfoParams
     * @property {string} correlationId - one view id (video_id + view_id (random smthng))
     * @property {number} currentBitrate - current_bitrate
     * @property {number} currentTimeFrame - ms
     * @property {string} deliveryType - delivery_type
     * @property {string} playedRange - [[0, 15], [33, 55], [100, 140]]
     * @property {string} videoId - video_id (as backend) or videoUrl if not passed
     **/
    /**
     * Name: playable.progress.info. Evid: 904.
     * Event description: playable.progress.info (every 5 sec event).
    
     * correlationId - Type: string. Desc: one view id (video_id + view_id (random smthng))
     *
     * currentBitrate - Type: numeric. Desc: current_bitrate
     *
     * currentTimeFrame - Type: numeric. Desc: ms
     *
     * deliveryType - Type: string. Desc: delivery_type
     *
     * playedRange - Type: string. Desc: [[0, 15], [33, 55], [100, 140]]
     *
     * videoId - Type: string. Desc: video_id (as backend) or videoUrl if not passed
     * @param {playableProgressInfoParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.playableProgressInfo = function(params) {
        return this.bi.log(__assign({
            evid: 904
        }, params));
    };
    /**
     * @typedef {Object} playablePlayStartedParams
     * @property {string} correlationId - one view id (video_id + view_id (random smthng))
     * @property {string} videoId - video_id (as backend) or videoUrl if not passed
     **/
    /**
     * Name: playable.play.started. Evid: 903.
     * Event description: playable.play.started.
    
     * correlationId - Type: string. Desc: one view id (video_id + view_id (random smthng))
     *
     * videoId - Type: string. Desc: video_id (as backend) or videoUrl if not passed
     * @param {playablePlayStartedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.playablePlayStarted = function(params) {
        return this.bi.log(__assign({
            evid: 903
        }, params));
    };
    /*event 900 on project 'com.wixpress.video-platform has no function name set, please set one in BI Catalog.*/
    /**
     * @typedef {Object} playablePlayResumedParams
     * @property {string} correlationId - one view id (video_id + view_id (random smthng))
     * @property {number} currentTimeFrame - ms
     * @property {string} videoId - video_id (as backend) or videoUrl if not passed
     **/
    /**
     * Name: playable.play.resumed. Evid: 906.
     * Event description: playable.play.resumed.
    
     * correlationId - Type: string. Desc: one view id (video_id + view_id (random smthng))
     *
     * currentTimeFrame - Type: numeric. Desc: ms
     *
     * videoId - Type: string. Desc: video_id (as backend) or videoUrl if not passed
     * @param {playablePlayResumedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.playablePlayResumed = function(params) {
        return this.bi.log(__assign({
            evid: 906
        }, params));
    };
    /**
     * @typedef {Object} playablePlayRequestedParams
     * @property {string} bitrateJson - json of all bitrades ([800,1000,10000])
     * @property {string} correlationId - one view id (video_id + view_id (random smthng))
     * @property {string} customDataJson - custom data from different products
     * @property {boolean} isAutoplay - is_autoplay
     * @property {boolean} isTriggeredByUser - is_triggered_by_user
     * @property {string} product - (wix_video, wix_video_embed, wix_video_live, editor_player)
     * @property {boolean} replay - is replayed
     * @property {number} videoDuration - ms
     * @property {string} videoId - video_id (as backend) or videoUrl if not passed
     * @property {string} videoType - HLS, MP4 etc
     **/
    /**
     * Name: playable.play.requested. Evid: 901.
     * Event description: Play request.
    
     * bitrateJson - Type: string. Desc: json of all bitrades ([800,1000,10000])
     *
     * correlationId - Type: string. Desc: one view id (video_id + view_id (random smthng))
     *
     * customDataJson - Type: string. Desc: custom data from different products
     *
     * isAutoplay - Type: bool. Desc: is_autoplay
     *
     * isTriggeredByUser - Type: bool. Desc: is_triggered_by_user
     *
     * product - Type: string. Desc: (wix_video, wix_video_embed, wix_video_live, editor_player)
     *
     * replay - Type: bool. Desc: is replayed
     *
     * videoDuration - Type: numeric. Desc: ms
     *
     * videoId - Type: string. Desc: video_id (as backend) or videoUrl if not passed
     *
     * videoType - Type: string. Desc: HLS, MP4 etc
     * @param {playablePlayRequestedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.playablePlayRequested = function(params) {
        return this.bi.log(__assign({
            evid: 901
        }, params));
    };
    /**
     * @typedef {Object} playablePlayFinishedParams
     * @property {string} correlationId - one view id (video_id + view_id (random smthng))
     * @property {string} playedRange - [[0, 15], [33, 55], [100, 140]]
     * @property {string} videoId - video_id (as backend) or videoUrl if not passed
     **/
    /**
     * Name: playable.play.finished. Evid: 907.
     * Event description: playable.play.finished.
    
     * correlationId - Type: string. Desc: one view id (video_id + view_id (random smthng))
     *
     * playedRange - Type: string. Desc: [[0, 15], [33, 55], [100, 140]]
     *
     * videoId - Type: string. Desc: video_id (as backend) or videoUrl if not passed
     * @param {playablePlayFinishedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.playablePlayFinished = function(params) {
        return this.bi.log(__assign({
            evid: 907
        }, params));
    };
    /**
     * @typedef {Object} playablePlayPausedParams
     * @property {string} correlationId - one view id (video_id + view_id (random smthng))
     * @property {number} currentTimeFrame - ms
     * @property {string} playedRange - [[0, 15], [33, 55], [100, 140]]
     * @property {string} videoId - video_id (as backend) or videoUrl if not passed
     **/
    /**
     * Name: playable.play.paused. Evid: 905.
     * Event description: playable.play.paused.
    
     * correlationId - Type: string. Desc: one view id (video_id + view_id (random smthng))
     *
     * currentTimeFrame - Type: numeric. Desc: ms
     *
     * playedRange - Type: string. Desc: [[0, 15], [33, 55], [100, 140]]
     *
     * videoId - Type: string. Desc: video_id (as backend) or videoUrl if not passed
     * @param {playablePlayPausedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.playablePlayPaused = function(params) {
        return this.bi.log(__assign({
            evid: 905
        }, params));
    };
    /**
     * @typedef {Object} playablePlayAnomaliesParams
     * @property {string} anomalyName - [[0, 15], [33, 55], [100, 140]]
     * @property {string} correlationId - one view id (video_id + view_id (random smthng))
     * @property {string} videoId - video_id (as backend) or videoUrl if not passed
     **/
    /**
     * Name: playable.play.anomalies. Evid: 908.
     * Event description: playable.play.anomalies.
    
     * anomalyName - Type: string. Desc: [[0, 15], [33, 55], [100, 140]]
     *
     * correlationId - Type: string. Desc: one view id (video_id + view_id (random smthng))
     *
     * videoId - Type: string. Desc: video_id (as backend) or videoUrl if not passed
     * @param {playablePlayAnomaliesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.playablePlayAnomalies = function(params) {
        return this.bi.log(__assign({
            evid: 908
        }, params));
    };
    /**
     * @typedef {Object} playableErrorParams
     * @property {string} correlationId - one view id (video_id + view_id (random smthng))
     * @property {number} currentTimeFrame - current_time_frame
     * @property {string} errorMessage - msg
     * @property {string} errorType - error
     * @property {string} product - product
     * @property {string} videoId - video_id (as backend) or videoUrl if not passed
     * @property {string} videoType - HLS, MP4 etc
     **/
    /**
     * Name: playable.error. Evid: 909.
     * Event description: error event.
    
     * correlationId - Type: string. Desc: one view id (video_id + view_id (random smthng))
     *
     * currentTimeFrame - Type: numeric. Desc: current_time_frame
     *
     * errorMessage - Type: string. Desc: msg
     *
     * errorType - Type: string. Desc: error
     *
     * product - Type: string. Desc: product
     *
     * videoId - Type: string. Desc: video_id (as backend) or videoUrl if not passed
     *
     * videoType - Type: string. Desc: HLS, MP4 etc
     * @param {playableErrorParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.playableError = function(params) {
        return this.bi.log(__assign({
            evid: 909
        }, params));
    };
    /**
     * @typedef {Object} playablePlayAbortedParams
     * @property {string} correlationId - one view id (video_id + view_id (random smthng))
     * @property {string} reasonMessage - reason
     * @property {string} videoId - video_id (as backend) or videoUrl if not passed
     **/
    /**
     * Name: playable.play.aborted. Evid: 902.
     * Event description: Playable.play.aborted (after aborted you should change the correlation id).
    
     * correlationId - Type: string. Desc: one view id (video_id + view_id (random smthng))
     *
     * reasonMessage - Type: string. Desc: reason
     *
     * videoId - Type: string. Desc: video_id (as backend) or videoUrl if not passed
     * @param {playablePlayAbortedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.playablePlayAborted = function(params) {
        return this.bi.log(__assign({
            evid: 902
        }, params));
    };
    return Logger;
}());
exports.Logger = Logger;
exports.default = init;
//# sourceMappingURL=index.js.map