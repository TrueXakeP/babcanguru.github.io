'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = mergeOverrideScriptsInClientSpecMap;
var getOverridesMap = function getOverridesMap(overrideParam) {
    var map = {};
    var regex = /,?([^=]+)=([^=]+)(?=,|$)/g;
    var match = void 0;
    do {
        match = regex.exec(overrideParam);
        if (match && match.length > 2) {
            var key = match[1].trim();
            var value = match[2].trim();
            map[key] = value;
        }
    } while (match);

    return map;
};

/* eslint-disable santa/no-starts-with */
var isScriptValid = function isScriptValid(url, scriptsLocation) {
    return url && (url.startsWith(scriptsLocation) || url.startsWith('https://sled.wix.dev') || // used by Sled, a cloud test runner - https://wix-private.github.io/sled/
        url.startsWith('https://localhost') || url.startsWith('http://localhost'));
};

var overrideViewerScripts = function overrideViewerScripts(clientSpecMap, overrideParam, scriptsLocation) {
    if (!overrideParam) {
        return;
    }

    var overridesMap = getOverridesMap(overrideParam);

    Object.keys(clientSpecMap).forEach(function(applicationId) {
        var _clientSpecMap$applic = clientSpecMap[applicationId],
            appDefinitionId = _clientSpecMap$applic.appDefinitionId,
            appFields = _clientSpecMap$applic.appFields;

        var overridenScript = overridesMap[appDefinitionId];

        if (overridenScript && isScriptValid(overridenScript, scriptsLocation) && appFields && appFields.platform && appFields.platform.viewerScriptUrl) {
            appFields.platform.viewerScriptUrl = overridenScript;
        }
    });
};

var overrideWidgetScripts = function overrideWidgetScripts(clientSpecMap, overrideParam, scriptKeyName, scriptsLocation) {
    if (!overrideParam) {
        return;
    }

    var overridesMap = getOverridesMap(overrideParam);

    Object.keys(clientSpecMap).forEach(function(applicationId) {
        var applicationWidgets = clientSpecMap[applicationId].widgets || {};
        Object.keys(applicationWidgets).forEach(function(widgetId) {
            var componentFields = applicationWidgets[widgetId].componentFields;

            if (componentFields) {
                var urlOverride = overridesMap[widgetId];
                if (isScriptValid(urlOverride, scriptsLocation)) {
                    componentFields[scriptKeyName] = urlOverride;
                }
            }
        });
    });
};

var overridePlatformBaseUrls = function overridePlatformBaseUrls(clientSpecMap, overrideParam, scriptsLocation) {
    if (!overrideParam) {
        return;
    }

    var overridesMap = getOverridesMap(overrideParam);

    Object.keys(overridesMap).forEach(function(key) {
        var baseUrlsOverride = null;
        try {
            baseUrlsOverride = JSON.parse(overridesMap[key]);
        } catch (ex) {
            delete overridesMap[key];
            return;
        }

        overridesMap[key] = Object.keys(baseUrlsOverride).map(function(baseUrlKey) {
            return {
                key: baseUrlKey,
                value: baseUrlsOverride[baseUrlKey]
            };
        }).filter(function(_ref) {
            var value = _ref.value;
            return typeof value === 'string' && isScriptValid(value, scriptsLocation);
        });
    });

    Object.keys(clientSpecMap).forEach(function(applicationId) {
        var applicationSpec = clientSpecMap[applicationId];
        var baseUrlsOverrides = overridesMap[applicationSpec.appDefinitionId];

        if (!baseUrlsOverrides) {
            return;
        }

        // eslint-disable-next-line lodash/prefer-get
        if (applicationSpec.appFields && applicationSpec.appFields.platform && applicationSpec.appFields.platform.baseUrls) {
            baseUrlsOverrides.forEach(function(_ref2) {
                var key = _ref2.key,
                    value = _ref2.value;

                applicationSpec.appFields.platform.baseUrls[key] = value;
            });
        }
    });
};

function mergeOverrideScriptsInClientSpecMap() {
    var clientSpecMap = void 0;
    var viewerScriptOverrideParam = void 0;
    var controllerScriptsOverrideParam = void 0;
    var componentScriptsOverrideParam = void 0;
    var overridePlatformBaseUrlsParam = '';
    var scriptsLocation = void 0;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    if (args.length === 1) {
        var _args$ = args[0];
        clientSpecMap = _args$.clientSpecMap;
        viewerScriptOverrideParam = _args$.viewerScriptOverrideParam;
        controllerScriptsOverrideParam = _args$.controllerScriptsOverrideParam;
        componentScriptsOverrideParam = _args$.componentScriptsOverrideParam;
        overridePlatformBaseUrlsParam = _args$.overridePlatformBaseUrlsParam;
        scriptsLocation = _args$.scriptsLocation;
    } else {
        clientSpecMap = args[0];
        var _args$2 = args[1];
        viewerScriptOverrideParam = _args$2 === undefined ? '' : _args$2;
        var _args$3 = args[2];
        controllerScriptsOverrideParam = _args$3 === undefined ? '' : _args$3;
        var _args$4 = args[3];
        componentScriptsOverrideParam = _args$4 === undefined ? '' : _args$4;
        scriptsLocation = args[4];
    }

    overrideViewerScripts(clientSpecMap, viewerScriptOverrideParam, scriptsLocation);
    overrideWidgetScripts(clientSpecMap, controllerScriptsOverrideParam, 'controllerUrl', scriptsLocation);
    overrideWidgetScripts(clientSpecMap, componentScriptsOverrideParam, 'componentUrl', scriptsLocation);
    overridePlatformBaseUrls(clientSpecMap, overridePlatformBaseUrlsParam, scriptsLocation);
}
//# sourceMappingURL=overrideClientSpecMapScriptsFromQuery.js.map