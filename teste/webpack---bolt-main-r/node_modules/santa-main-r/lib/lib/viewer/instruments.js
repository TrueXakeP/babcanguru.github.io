'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function(window, requirejs, isBot, isSuspectedBot, experiment) {
    var _window$location = window.location,
        location = _window$location === undefined ? {} : _window$location,
        _window$performance = window.performance,
        performance = _window$performance === undefined ? {} : _window$performance,
        PerformanceObserver = window.PerformanceObserver;
    var _location$href = location.href,
        href = _location$href === undefined ? '' : _location$href;


    var BEAT_RATIO = 10;

    var BEAT_SITE_TYPES = {
        'No Site Type': 0,
        'WixSite': 1,
        'UGC': 2,
        'Template': 3
    };

    var VIEWER_BI = {
        ENDPOINT: 'ugc-viewer',
        SRC: 42
    };
    var PERF_EVID = 351;
    var BOT_EVID = 361;
    var UNLOAD_EVID = 323;
    var SSR_EVID = 380;
    var FID_EVID = 434;
    var KEEP_ALIVE = {
        EVID: 329,
        RATIO: 10,
        INTERVAL: 5 * 1000,
        LONG_LIMIT: 60,
        SHORT_LIMIT: 6
    };
    var CDN_PERF = {
        EVID: 430,
        RATIO: 0,
        DELAY: 2000,
        LONG_DELAY: 10000,
        MIN_DURATION: 6
    };
    var LCP = {
        EVID: 435,
        TIMEOUT: 2000
    };

    var PREF_BUFFER = {
        INIT_SIZE: 150,
        FACTOR: 2,
        MAX_SIZE: 1000
    };

    var BEAT_INTERACTIVE = 33;
    var BEAT_PAGE_TRANSITION = 103;

    var SESSION_TIMESTAMP = 'wixSessionTS';

    // Store errors that occurred before they can be reported
    var delayedErrors = [];

    function sendErrorOrQueue() {
        var _window$wixBiSession = window.wixBiSession;
        _window$wixBiSession = _window$wixBiSession === undefined ? {} : _window$wixBiSession;
        var sendError = _window$wixBiSession.sendError;

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        if (sendError) {
            sendError.apply(undefined, args);
        } else {
            delayedErrors.push(args);
        }
    }

    // Get call stack so that it can be reported or checked
    function getStack() {
        try {
            throw new Error('stack');
        } catch (e) {
            return e.stack.split('\n').slice(2, 18).map(function(s) {
                return s.trim();
            }).join('\n');
        }
    }

    var round = Math.round;

    function performanceNow() {
        return performance.now && round(performance.now());
    }

    function instrument(_ref, wixBiSession, queryUtil, siteModel, pageInfo, isPremium, isServerSide) {
        var staticServerUrl = _ref.staticServerUrl,
            biServerUrl = _ref.biServerUrl;
        //eslint-disable-line complexity,max-statements
        wixBiSession.pn = 1;
        wixBiSession.initialTimestamp = wixBiSession.initialTimestamp || wixBiSession.mainLoaded;

        var rendererModel = siteModel.rendererModel || window.rendererModel;
        var _rendererModel$siteIn = rendererModel.siteInfo,
            siteId = _rendererModel$siteIn.siteId,
            documentType = _rendererModel$siteIn.documentType;


        var param = function param(name, value) {
            return name + '=' + value;
        };
        var params = function params(pairs) {
            var p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : param;
            return Object.keys(pairs).map(function(value) {
                return p(value, pairs[value]);
            }).join('&');
        };

        var biBool = function biBool(bool) {
            return Number(Boolean(bool));
        };

        var suppressbi = wixBiSession.suppressbi,
            viewerSessionId = wixBiSession.viewerSessionId,
            requestId = wixBiSession.requestId;

        var sampleRatioState = queryUtil.getParameterByName('sampleratio');
        if (!wixBiSession.hasOwnProperty('coin')) {
            wixBiSession.coin = parseInt(viewerSessionId, 16);

            if (requestId) {
                wixBiSession.coinByRequestId = parseInt(requestId, 10);
            }
        }

        // Check if event is in sample ratio
        function isInSampleRatioByVsi(sampleRatio) {
            if (!sampleRatio || sampleRatioState === 'none') {
                return true;
            }

            var res = wixBiSession.coin % sampleRatio === 0;

            if (!res && wixBiSession.hasOwnProperty('coinByRequestId') && experiment && experiment.isOpen && experiment.isOpen('biSampleByRequestId')) {
                res = wixBiSession.coinByRequestId % sampleRatio === 0;
            }

            return res;
        }

        function prepareMessage(evid, src, _ref2) {
            var _ref2$omit = _ref2.omit,
                omit = _ref2$omit === undefined ? {} : _ref2$omit,
                map = _ref2.map,
                _ref2$pairs = _ref2.pairs,
                pairs = _ref2$pairs === undefined ? {} : _ref2$pairs;

            pairs.evid = evid;
            pairs.src = src;

            if (!omit.pn) {
                pairs.pn = 1;
            }
            if (!omit.isp) {
                pairs.isp = biBool(isPremium);
            }
            if (!omit.url) {
                var url = href.replace(/^[^:]+:\/\/(www\.)?/i, '');
                pairs.url = encodeURIComponent(url.substring(0, 256));
            }

            if (!omit.v) {
                pairs.v = siteModel.baseVersion || 'unknown';
            }
            if (!omit.majorVer) {
                pairs.majorVer = window.clientSideRender ? 3 : 4;
            }
            if (!omit.ver && window.santaBase) {
                var sourceMatches = window.santaBase.match(/([\d\.]+)\/?$/);
                pairs.ver = sourceMatches && sourceMatches[1] || '';
            }

            if (siteId) {
                pairs.sid = siteId;
            }
            if (rendererModel.metaSiteId) {
                pairs.msid = rendererModel.metaSiteId;
            }

            var siteHeader = siteModel.siteHeader || window.siteHeader;
            if (!omit.uuid && siteHeader && siteHeader.userId) {
                pairs.uuid = siteHeader.userId;
            }
            var publicModel = siteModel.publicModel;

            if (!omit.tsp && publicModel && publicModel.timeSincePublish) {
                pairs.tsp = publicModel.timeSincePublish;
            }
            if (viewerSessionId) {
                pairs.vsi = viewerSessionId;
            }

            if (!omit.ts && wixBiSession.initialTimestamp) {
                pairs.ts = Date.now() - wixBiSession.initialTimestamp;
            }

            var _param = map ? function(name, value) {
                return param(map[name] || name, value);
            } : param;
            return params(pairs, _param);
        }

        var document = window.document,
            navigator = window.navigator;

        if (!wixBiSession.sendBeacon) {
            wixBiSession.sendBeacon = function(url) {
                if (!suppressbi) {
                    var sent = false;
                    try {
                        sent = navigator.sendBeacon(url);
                    } catch (e) {
                        // empty
                    }
                    if (!sent) {
                        new window.Image().src = url;
                    }
                }
            };
        }

        var base = biServerUrl.replace(/\/$/, '');

        function sendBI(endpoint, evid, code) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            var src = base + '/' + endpoint + '?c=' + Date.now() + '&';
            src += prepareMessage(evid, code, options);
            if (options.extra) {
                src += options.extra;
            }
            wixBiSession.sendBeacon(src);
        }

        wixBiSession.sendBI = function(endpoint, evid, code, extra, sampleRatio) {
            if (isInSampleRatioByVsi(sampleRatio)) {
                sendBI(endpoint, evid, code, {
                    omit: {
                        pn: true,
                        isp: true,
                        ts: true,
                        url: true,
                        v: true,
                        ver: true
                    },
                    map: {
                        sid: 'did',
                        dc: 'server',
                        uuid: 'uid',
                        data_center: 'dc'
                    },
                    pairs: extra
                });
            }
        };

        var MAX_LIMIT = 4;

        var sendError = function sendError(name, errc) {
            for (var _len2 = arguments.length, args = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
                args[_key2 - 3] = arguments[_key2];
            }

            var sev = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 40;
            // eslint-disable-line func-style
            var _wixBiSession$is_roll = wixBiSession.is_rollout,
                is_rollout = _wixBiSession$is_roll === undefined ? 0 : _wixBiSession$is_roll,
                _wixBiSession$dc = wixBiSession.dc,
                dc = _wixBiSession$dc === undefined ? '' : _wixBiSession$dc,
                et = wixBiSession.et;

            var pairs = {
                errn: encodeURIComponent(name),
                errc: errc,
                sev: sev,
                errscp: 'core',
                cat: 2,
                iss: 1,
                et: et,
                is_rollout: is_rollout,
                dc: dc,
                visitor_id: viewerSessionId
            };

            var total = 0;
            pairs = args.reduce(function(result, arg, index) {
                if (index < MAX_LIMIT) {
                    if (total + arg.length > 1024) {
                        arg = arg.substring(0, Math.max(1024 - total, 32));
                    }
                    result['p' + (index + 1)] = encodeURIComponent(arg);
                    total += result.length;
                }
                return result;
            }, pairs);

            sendBI('trg', 10, 44, {
                omit: {
                    pn: true,
                    isp: true,
                    tsp: true,
                    v: true,
                    url: true,
                    uuid: true
                },
                map: {
                    sid: 'did',
                    ts: 'response_time'
                },
                pairs: pairs
            });
        };

        var prepareAndSendError = function prepareAndSendError(err, data) {
            var message = err.message,
                stack = err.stack,
                _err$requireModules = err.requireModules,
                requireModules = _err$requireModules === undefined ? [] : _err$requireModules,
                requireType = err.requireType;
            var errn = data.errn,
                errc = data.errc,
                severity = data.severity;

            var modules = requireModules && requireModules.join ? requireModules.join(';') : '';
            var what = stack ? '' + stack : message;
            sendError(errn, errc, severity, what, modules, href, requireType); // REQUIREJS_ERROR from packages/core/src/main/bi/errors.js
        };

        wixBiSession.sendError = function(err) {
            for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                args[_key3 - 1] = arguments[_key3];
            }

            return sendError.apply(undefined, [err.errorName, err.errorCode, err.severity].concat(args));
        };

        wixBiSession.suspectDeadCode = function(identifier) {
            return sendError('SUSPECTED_DEAD_CODE', 500100, 40, identifier, getStack());
        };

        delayedErrors.forEach(function(delayedError) {
            return wixBiSession.sendError.apply(wixBiSession, _toConsumableArray(delayedError));
        });
        delayedErrors = null;

        // Grow performance resource buffer as required
        var isDebug = queryUtil.getParameterByName('debug');
        if (performance.setResourceTimingBufferSize) {
            if ('onresourcetimingbufferfull' in performance) {
                var maxSize = PREF_BUFFER.INIT_SIZE;
                var incBuffer = function incBuffer() {
                    maxSize *= PREF_BUFFER.FACTOR;
                    if (maxSize >= PREF_BUFFER.MAX_SIZE) {
                        maxSize = PREF_BUFFER.MAX_SIZE;
                        if (performance.onresourcetimingbufferfull === incBuffer) {
                            performance.onresourcetimingbufferfull = null;
                        }
                    }
                    performance.setResourceTimingBufferSize(maxSize);
                };
                performance.onresourcetimingbufferfull = incBuffer;
            } else {
                performance.setResourceTimingBufferSize(isDebug ? PREF_BUFFER.MAX_SIZE : PREF_BUFFER.INIT_SIZE * 4);
            }
        }

        if (suppressbi || !viewerSessionId || rendererModel.previewMode) {
            return;
        }

        function initInfoReporting() {
            reportPerformance();
            reportFID();
            reportLCP();
            requirejs(['lodash'], function(_) {
                wixBiSession.info = (0, _info2.default)(window, _, wixBiSession);
            });
        }
        if (document.readyState === 'complete') {
            initInfoReporting();
        } else {
            window.addEventListener('load', initInfoReporting, false);
        }

        // Report CDN performance
        if (isInSampleRatioByVsi(CDN_PERF.RATIO)) {
            var getCDN = function getCDN() {
                return fetch(staticServerUrl + 'cdn_detect', {
                    method: 'GET',
                    mode: 'cors',
                    cache: 'no-cache'
                }).then(function(response) {
                    return response.headers.get('CDN-seen');
                }).catch(function(err) {
                    return console.info('CDN name fetch failed', err);
                });
            };

            var fromParastorage = function fromParastorage(entries) {
                return entries.filter(function(_ref3) {
                    var name = _ref3.name;
                    return name.includes(staticServerUrl);
                });
            };
            var filteredParastorage = function filteredParastorage(entries) {
                return fromParastorage(entries).filter(function(_ref4) {
                    var transferSize = _ref4.transferSize,
                        duration = _ref4.duration;
                    return transferSize !== 0 && duration > CDN_PERF.MIN_DURATION;
                });
            };

            var timerId = 0;
            var timerHandler = function timerHandler() {
                timerId = 0;
                getCDN().then(function(cdn) {
                    if (!cdn) {
                        return;
                    }
                    wixBiSession.cdn = cdn;

                    var parastorage = filteredParastorage(performance.getEntriesByType('resource'));
                    var nrqs = parastorage.length;
                    if (!nrqs) {
                        return;
                    }

                    var _parastorage$reduce = parastorage.reduce(function(acc, _ref5) {
                            var transferSize = _ref5.transferSize,
                                responseStart = _ref5.responseStart,
                                responseEnd = _ref5.responseEnd;
                            return {
                                tbd: acc.tbd + transferSize,
                                firstResponse: Math.min(acc.firstResponse, responseStart),
                                lastResponse: Math.max(acc.lastResponse, responseEnd)
                            };
                        }, {
                            tbd: 0,
                            firstResponse: Number.MAX_SAFE_INTEGER,
                            lastResponse: 0
                        }),
                        tbd = _parastorage$reduce.tbd,
                        firstResponse = _parastorage$reduce.firstResponse,
                        lastResponse = _parastorage$reduce.lastResponse;

                    var ttfbs = parastorage.map(function(_ref6) {
                        var requestStart = _ref6.requestStart,
                            responseStart = _ref6.responseStart;
                        return responseStart - requestStart;
                    }).sort();
                    var half = Math.floor(nrqs / 2);

                    wixBiSession.sendBI(VIEWER_BI.ENDPOINT, CDN_PERF.EVID, VIEWER_BI.SRC, {
                        cdn: cdn,
                        nrqs: nrqs,
                        tbd: tbd,
                        tld: round(lastResponse - firstResponse),
                        mttfb: round(nrqs % 2 ? ttfbs[half] : (ttfbs[half - 1] + ttfbs[half]) / 2),
                        attfb: round(ttfbs.reduce(function(acc, ttfb) {
                            return acc + ttfb;
                        }, 0) / nrqs)
                    });
                });
            };

            var po = performanceObserver(function(entries, observer) {
                var ps = fromParastorage(entries.getEntries());
                if (ps.length) {
                    if (timerId) {
                        clearTimeout(timerId);
                    }
                    timerId = setTimeout(function() {
                        observer.disconnect();
                        timerHandler();
                    }, CDN_PERF.DELAY);
                }
            }, {
                type: 'resource'
            });
            if (!po) {
                timerId = setTimeout(timerHandler, CDN_PERF.LONG_DELAY);
            }
        }

        var isTop = function() {
            try {
                return window.self === window.top;
            } catch (e) {
                return false;
            }
        }();
        wixBiSession.maybeBot = isBot || isSuspectedBot || !isTop;

        if (documentType !== 'Template' && wixBiSession.maybeBot) {
            wixBiSession.sendBI(VIEWER_BI.ENDPOINT, BOT_EVID, VIEWER_BI.SRC, {
                top: biBool(isTop),
                bot: biBool(isBot),
                sbot: biBool(isSuspectedBot)
            });
        }

        if (!window.clientSideRender) {
            var getTS = function getTS() {
                return (performance && performance.timing && performance.timing.domContentLoadedEventStart) - wixBiSession.initialTimestamp;
            }; //eslint-disable-line
            var send = function send() {
                return wixBiSession.sendBI(VIEWER_BI.ENDPOINT, SSR_EVID, VIEWER_BI.SRC, {
                    phase_name: 'did_load_dom_content',
                    status: 1,
                    ts: getTS(),
                    isBot: !!rendererModel.seo
                });
            };

            if (document.readyState === 'complete') {
                send();
            } else {
                document.onreadystatechange = function() {
                    if (document.readyState === 'complete') {
                        send();
                    }
                };
            }
        }

        if (isDebug && sampleRatioState !== 'force') {
            return;
        }

        function genPayload() {
            var et = wixBiSession.et,
                initialTimestamp = wixBiSession.initialTimestamp,
                pn = wixBiSession.pn;

            var payload = {
                isp: biBool(isPremium),
                iss: biBool(isServerSide),
                pn: pn
            };
            if (et) {
                payload.lbt = et;
            }
            if (initialTimestamp) {
                payload.ts = Date.now() - initialTimestamp;
            }
            var tts = performanceNow();
            if (tts) {
                payload.tts = tts;
            }
            return payload;
        }

        window.addEventListener('unload', function() {
            var payload = genPayload();
            if (performance.getEntriesByType) {
                var marks = performance.getEntriesByType('mark');
                var length = marks.length;

                if (length > 0) {
                    payload.mark = marks[length - 1].name;
                }
            }
            if (window.sssr && window.sssr.maxScrollData) {
                payload.max_scroll = window.sssr.maxScrollData.maxPixelReached;
                payload.page_length = window.sssr.maxScrollData.pageLength;
            }
            wixBiSession.sendBI(VIEWER_BI.ENDPOINT, UNLOAD_EVID, VIEWER_BI.SRC, payload);
        }, false);

        if (isInSampleRatioByVsi(KEEP_ALIVE.RATIO)) {
            var keepAliveLimit = KEEP_ALIVE.LONG_LIMIT;
            var did_finish = false;
            var counter = 0;
            var reportAliveInterval = setInterval(function() {
                if ((wixBiSession.pn > 1 || wixBiSession.et === 3) && !did_finish) {
                    did_finish = true;
                    keepAliveLimit = Math.min(counter + KEEP_ALIVE.SHORT_LIMIT, KEEP_ALIVE.LONG_LIMIT);
                }
                if (++counter > keepAliveLimit) {
                    clearInterval(reportAliveInterval);
                    return;
                }
                var payload = genPayload();
                payload.counter = counter;
                payload.did_finish = did_finish;
                wixBiSession.sendBI(VIEWER_BI.ENDPOINT, KEEP_ALIVE.EVID, VIEWER_BI.SRC, payload);
            }, KEEP_ALIVE.INTERVAL);
        }

        if (!wixBiSession.checkVisibility) {
            var alwaysVisible = document.hidden !== true;
            //eslint-disable-next-line no-extra-parens
            wixBiSession.checkVisibility = function() {
                return alwaysVisible = alwaysVisible && document.hidden !== true;
            };
            document.addEventListener('visibilitychange', wixBiSession.checkVisibility, false);
        }

        var markBeat = performance.mark ? function(et, name) {
            var beatMessage = 'beat ' + et;
            performance.mark(name ? name + ' (' + beatMessage + ')' : beatMessage);
        } : function() {};

        var sendBeat = wixBiSession.sendBeat;

        wixBiSession.sendBeat = function(et, event_name) {
            var extra = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
            var pageNumber = arguments[3];

            wixBiSession.et = et;

            if (et === BEAT_INTERACTIVE || et === BEAT_PAGE_TRANSITION && !wixBiSession.tti) {
                wixBiSession.tti = performanceNow();
            }

            if (et >= 5 && et <= 11 && !isInSampleRatioByVsi(BEAT_RATIO)) {
                // currently Beat 4 isn't sampled
                markBeat(et, event_name);
                return;
            }

            if (sendBeat) {
                sendBeat(et, event_name, '&isjp=' + biBool(wixBiSession.maybeBot) + '&ita=' + biBool(wixBiSession.checkVisibility()) + extra, pageNumber);
                return;
            }
            markBeat(et, event_name);

            var siteType = BEAT_SITE_TYPES[documentType] || documentType;
            var pairs = {
                dc: wixBiSession.dc || '',
                isjp: biBool(wixBiSession.maybeBot),
                et: et,
                event_name: event_name,
                st: siteType,
                is_rollout: wixBiSession.is_rollout,
                ita: biBool(wixBiSession.checkVisibility())
            };
            if (performance.now) {
                pairs.tts = round(performance.now());
            }
            if (typeof wixBiSession.isCached === 'boolean') {
                pairs.is_cached = biBool(wixBiSession.isCached);
            }

            sendBI('bt', 3, 29, {
                omit: {
                    majorVer: true,
                    tsp: true,
                    ver: true
                },
                pairs: pairs,
                extra: extra
            });
        };

        var ignoreURLs = [/^chrome(\-extension)?\:/, /^file\:/, /^resource\:/, /\.net\//, /\.info\//, /\.ru\//, /google/, /facebook/, /dropbox/, /ad\-score/, /drivemac/, /shopping/, /datafast/, /shopcomp/, /vimeo/, /olark/];

        function ignoreError(where) {
            where = where.trim();
            return where && ignoreURLs.find(function(ignore) {
                return ignore.test(where);
            });
        }

        if (!isSuspectedBot && wixBiSession.renderType !== 'bolt') {
            var firstTime = true;

            var onerror = window.onerror;

            window.onerror = function(errorMsg, url, line, column, err) {
                if (firstTime) {
                    firstTime = false;
                    var where = err && err.stack ? '' + err.stack : url;
                    if (!ignoreError(where)) {
                        sendError('JAVASCRIPT_ERROR', 111022, 40, errorMsg, where, href); // JAVASCRIPT_ERROR from packages/core/src/main/bi/errors.js
                    }
                }
                if (onerror) {
                    return onerror.apply(this, arguments);
                }
            };

            if (window.console) {
                var _console = console,
                    error = _console.error;

                if (error) {
                    console.error = function() {
                        var stack = getStack();

                        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                            args[_key4] = arguments[_key4];
                        }

                        sendError.apply(undefined, ['CONSOLE_ERROR', 111023, 30, stack, href].concat(args)); // CONSOLE_ERROR from packages/core/src/main/bi/errors.js
                        error.apply(this, args);
                        console.error = error;
                    };
                }
            }

            requirejs.onError = function(err) {
                if (!firstTime) {
                    return;
                }
                firstTime = false;

                prepareAndSendError(err, err.requireType !== 'define' ? {
                    errc: 111027,
                    errn: 'REQUIREJS_FILE_DOWNLOAD_ERROR',
                    severity: 40
                } : {
                    errc: 111028,
                    errn: 'REQUIREJS_SCRIPT_ERROR',
                    severity: 40
                });
            };
        }

        function reportPerformance() {
            var pairs = {};
            var navigation = performance.navigation,
                timing = performance.timing;

            if (timing) {
                var fetchStart = timing.fetchStart,
                    domainLookupStart = timing.domainLookupStart,
                    domainLookupEnd = timing.domainLookupEnd,
                    redirectStart = timing.redirectStart,
                    redirectEnd = timing.redirectEnd,
                    connectStart = timing.connectStart,
                    connectEnd = timing.connectEnd,
                    secureConnectionStart = timing.secureConnectionStart,
                    requestStart = timing.requestStart,
                    responseStart = timing.responseStart,
                    responseEnd = timing.responseEnd;

                var dnsTime = domainLookupEnd - domainLookupStart;
                if (dnsTime >= 0) {
                    pairs.dns_time = dnsTime;
                }
                var redirectTime = redirectEnd - redirectStart;
                if (redirectTime >= 0) {
                    pairs.redirect_time = redirectTime;
                }
                var connectTime = connectEnd - connectStart;
                if (connectTime >= 0) {
                    pairs.connect_time = connectTime;
                }
                if (secureConnectionStart > 0) {
                    var sslTime = connectEnd - secureConnectionStart;
                    pairs.ssl_time = sslTime;
                }
                var ttfbTime = responseStart - requestStart;
                if (ttfbTime >= 0) {
                    pairs.ttfb_time = ttfbTime;
                }
                var responseTime = responseEnd - responseStart;
                if (responseTime >= 0) {
                    pairs.response_time = responseTime;
                }
                var loadTime = timing.navigationStart || timing.fetchStart || domainLookupStart || connectStart;
                loadTime = wixBiSession.initialTimestamp - loadTime;
                if (loadTime >= 0) {
                    pairs.load_time = loadTime;
                }
                if (pageInfo) {
                    pairs.page_id = pageInfo.pageId;
                }
                pairs.is_ssl = biBool(location.protocol === 'https:');

                var totalHtmlTime = responseEnd - fetchStart;
                if (totalHtmlTime) {
                    pairs.total_html_time = totalHtmlTime;
                }
                var htmlTime = responseEnd - connectStart;
                if (htmlTime) {
                    pairs.html_time = htmlTime;
                }
            }
            if (navigation) {
                var redirectCount = navigation.redirectCount,
                    type = navigation.type;

                if (type >= 0) {
                    pairs.navigation_type = type;
                }
                if (redirectCount >= 0) {
                    pairs.redirect_count = redirectCount;
                }
            }

            pairs.is_premium = biBool(isPremium);
            pairs.is_wixsite = biBool(documentType === 'WixSite');
            pairs.is_ssr = biBool(!window.clientSideRender);

            var _navigator$connection = navigator.connection;
            _navigator$connection = _navigator$connection === undefined ? {} : _navigator$connection;
            var effectiveType = _navigator$connection.effectiveType;
            var timeSpentInSSR = window.timeSpentInSSR;

            if (timeSpentInSSR) {
                pairs.ssr_time = timeSpentInSSR;
            }
            if (effectiveType) {
                pairs.network_type = effectiveType;
            }

            pairs.viewer_name = wixBiSession.renderType;
            pairs.dcm = wixBiSession.dc;
            pairs.data_center = wixBiSession.microPop;

            var storage = (0, _storageUtil2.default)(window);
            var past = storage.load(SESSION_TIMESTAMP);
            var present = Date.now();
            if (past) {
                pairs.elapsedTime = round((present - past) / 1000);
            }
            storage.save(SESSION_TIMESTAMP, present);

            jsTimings(pairs);

            paintTimings().then(function(fcp) {
                if (fcp) {
                    pairs.fcp = fcp;
                }
                wixBiSession.sendBI(VIEWER_BI.ENDPOINT, PERF_EVID, VIEWER_BI.SRC, pairs);
            });
        }

        function jsTimings(pairs) {
            if (!performance.getEntriesByType) {
                return;
            }

            var fitsJS = performance.getEntriesByType('resource').find(function(_ref7) {
                var name = _ref7.name;
                return (/\.js$/.test(name));
            });
            if (!fitsJS) {
                return;
            }

            var domainLookupStart = fitsJS.domainLookupStart,
                domainLookupEnd = fitsJS.domainLookupEnd,
                connectStart = fitsJS.connectStart,
                connectEnd = fitsJS.connectEnd,
                secureConnectionStart = fitsJS.secureConnectionStart,
                requestStart = fitsJS.requestStart,
                responseStart = fitsJS.responseStart,
                responseEnd = fitsJS.responseEnd;

            var dnsTime = domainLookupEnd - domainLookupStart;
            if (dnsTime >= 0) {
                pairs.dns_js = round(dnsTime);
            }
            var connectTime = connectEnd - connectStart;
            if (connectTime >= 0) {
                pairs.connect_js = round(connectTime);
            }
            if (secureConnectionStart > 0) {
                var sslTime = connectEnd - secureConnectionStart;
                pairs.ssl_js = round(sslTime);
            }
            var ttfbTime = responseStart - requestStart;
            if (ttfbTime >= 0) {
                pairs.ttfb_js = round(ttfbTime);
            }
            var responseTime = responseEnd - responseStart;
            if (responseTime >= 0) {
                pairs.response_js = round(responseTime);
            }
        }

        function paintTimings() {
            return new Promise(function(resolve) {
                var fcp = getFCP(performance);
                if (fcp > 0) {
                    resolve(fcp);
                } else {
                    var _po = performanceObserver(function(entries, observer) {
                        var v = getFCP(entries);
                        if (v > 0) {
                            observer.disconnect();
                            resolve(v);
                        }
                    }, {
                        type: 'paint'
                    });
                    if (!_po) {
                        resolve();
                    }
                }
            });

            function getFCP(enties) {
                var fcp = enties.getEntriesByType('paint').find(function(_ref8) {
                    var name = _ref8.name;
                    return name === 'first-contentful-paint';
                });
                return fcp ? round(fcp.startTime) : -1;
            }
        }

        function reportFID() {
            performanceObserver(function(list, observer) {
                observer.disconnect();
                var _list$getEntries$ = list.getEntries()[0],
                    name = _list$getEntries$.name,
                    startTime = _list$getEntries$.startTime,
                    duration = _list$getEntries$.duration,
                    processingStart = _list$getEntries$.processingStart,
                    processingEnd = _list$getEntries$.processingEnd;

                wixBiSession.sendBI(VIEWER_BI.ENDPOINT, FID_EVID, VIEWER_BI.SRC, {
                    tts: round(startTime),
                    type: encodeURIComponent(name),
                    duration: round(duration),
                    pstart: round(processingStart),
                    pend: round(processingEnd)
                });
            }, {
                type: 'first-input',
                buffered: true
            });
        }

        function reportLCP() {
            var lcpTimer = 0;
            performanceObserver(function(list, observer) {
                var entries = list.getEntries();
                var _wixBiSession$tti = wixBiSession.tti,
                    tti = _wixBiSession$tti === undefined ? Number.MAX_SAFE_INTEGER : _wixBiSession$tti;

                var lcpCandidate = entries.reverse().find(function(_ref9) {
                    var url = _ref9.url,
                        startTime = _ref9.startTime;

                    if (url) {
                        var resource = performance.getEntriesByName(url)[0];
                        if (resource) {
                            startTime = resource.startTime;
                        }
                    }
                    return startTime <= tti;
                });
                if (lcpCandidate) {
                    var lcp = lcpCandidate.toJSON();
                    clearTimeout(lcpTimer);
                    lcpTimer = setTimeout(function() {
                        observer.disconnect();
                        var element = lcp.element;

                        var comp = element && element.closest('*[id]');
                        wixBiSession.sendBI(VIEWER_BI.ENDPOINT, LCP.EVID, VIEWER_BI.SRC, {
                            tts: round(lcp.startTime),
                            area_size: lcp.size,
                            name: encodeURIComponent(comp.id || '')
                        });
                    }, LCP.TIMEOUT);
                }
            }, {
                type: 'largest-contentful-paint',
                buffered: true
            });
        }

        function performanceObserver(cb) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (PerformanceObserver) {
                var supportedEntryTypes = PerformanceObserver.supportedEntryTypes;

                if (supportedEntryTypes) {
                    var type = options.type || options.entryTypes && options.entryTypes[0];
                    if (supportedEntryTypes.includes(type)) {
                        try {
                            var observer = new PerformanceObserver(cb);
                            observer.observe(options);
                            return observer;
                        } catch (e) {
                            // empty
                        }
                    }
                }
            }
        }
    }

    return {
        sendErrorOrQueue: sendErrorOrQueue,
        instrument: instrument
    };
};

var _info = require('./info.js');

var _info2 = _interopRequireDefault(_info);

var _storageUtil = require('../common/storageUtil.js');

var _storageUtil2 = _interopRequireDefault(_storageUtil);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
        }
        return arr2;
    } else {
        return Array.from(arr);
    }
}
//# sourceMappingURL=instruments.js.map