'use strict';

exports.__esModule = true;

var _dataItem = require('../common/data-item');

var _dataItem2 = _interopRequireDefault(_dataItem);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var LoadingPhaseCollectionItem = function(_DataItem) {
    _inherits(LoadingPhaseCollectionItem, _DataItem);

    function LoadingPhaseCollectionItem(phasesOfApp) {
        _classCallCheck(this, LoadingPhaseCollectionItem);

        var _this = _possibleConstructorReturn(this, _DataItem.call(this, {}));

        _this.data.phases = LoadingPhaseCollectionItem.mergePhasesWithoutIndex(phasesOfApp);
        _this.data.phases = JSON.stringify(_this.data.phases);
        return _this;
    }

    LoadingPhaseCollectionItem.mergePhasesWithoutIndex = function mergePhasesWithoutIndex(phasesOfApp) {
        var phases = {};
        for (var _iterator = phasesOfApp, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var phase = _ref;

            LoadingPhaseCollectionItem.deleteIndexFrom(phase);
            phases = Object.assign(phases, phase);
        }
        return phases;
    };

    LoadingPhaseCollectionItem.deleteIndexFrom = function deleteIndexFrom(phase) {
        delete phase[Object.getOwnPropertyNames(phase)[0]].index;
    };

    return LoadingPhaseCollectionItem;
}(_dataItem2.default);

exports.default = LoadingPhaseCollectionItem;