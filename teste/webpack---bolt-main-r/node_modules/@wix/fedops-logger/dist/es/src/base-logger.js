'use strict';

exports.__esModule = true;
exports.phasesConfigValues = undefined;

var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

var _env = require('./env');

var _performance = require('./performance/performance');

var _performance2 = _interopRequireDefault(_performance);

var _times = require('./times/times');

var _times2 = _interopRequireDefault(_times);

var _dataSource = require('./data-source/data-source');

var _dataSource2 = _interopRequireDefault(_dataSource);

var _dataItem = require('./data-items/common/data-item');

var _dataItem2 = _interopRequireDefault(_dataItem);

var _resourceItem = require('./data-items/resource/resource-item');

var _resourceItem2 = _interopRequireDefault(_resourceItem);

var _biLoadStartItem = require('./data-items/app-load/bi-load-start-item');

var _biLoadStartItem2 = _interopRequireDefault(_biLoadStartItem);

var _biLoadPhaseItem = require('./data-items/phases/bi-load-phase-item');

var _biLoadPhaseItem2 = _interopRequireDefault(_biLoadPhaseItem);

var _durationItem = require('./data-items/duration/duration-item');

var _durationItem2 = _interopRequireDefault(_durationItem);

var _biErrorItem = require('./data-items/common/bi-error-item');

var _biErrorItem2 = _interopRequireDefault(_biErrorItem);

var _loadingPhaseItem = require('./data-items/phases/loading-phase-item');

var _loadingPhaseItem2 = _interopRequireDefault(_loadingPhaseItem);

var _loadingPhaseItemPrefixed = require('./data-items/phases/loading-phase-item-prefixed');

var _loadingPhaseItemPrefixed2 = _interopRequireDefault(_loadingPhaseItemPrefixed);

var _loadingPhaseCollectionItem = require('./data-items/phases/loading-phase-collection-item');

var _loadingPhaseCollectionItem2 = _interopRequireDefault(_loadingPhaseCollectionItem);

var _biLoadFinishItem = require('./data-items/app-load/bi-load-finish-item');

var _biLoadFinishItem2 = _interopRequireDefault(_biLoadFinishItem);

var _biInteractionStartItem = require('./data-items/interaction/bi-interaction-start-item');

var _biInteractionStartItem2 = _interopRequireDefault(_biInteractionStartItem);

var _biInteractionEndItem = require('./data-items/interaction/bi-interaction-end-item');

var _biInteractionEndItem2 = _interopRequireDefault(_biInteractionEndItem);

var _biAppContextItem = require('./data-items/common/bi-app-context-item');

var _biAppContextItem2 = _interopRequireDefault(_biAppContextItem);

var _sessionManager = require('./session-manager/session-manager');

var _sessionManager2 = _interopRequireDefault(_sessionManager);

var _loadingPhases = require('./loading-phases/loading-phases');

var _loadingPhases2 = _interopRequireDefault(_loadingPhases);

var _reporter = require('./reporter/reporter');

var _reporter2 = _interopRequireDefault(_reporter);

var _conf = require('./conf');

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var callHook = function callHook(hook, hookArgs) {
    if (hook) {
        return hook(hookArgs);
    }
};

/**
 * Base Logger
 * @param appName
 * @param appVersion
 * @param reporter
 *
 * Params object properties:
 * @param baseUrl
 * @param appId
 * @param disableAutoLoadFinish
 * @param phasesConfig
 * @param interactionTimeout
 * @param timeoutHook
 * @param startHook
 * @param endHook
 * Before adding new parameters to the reported events, please make sure the BI schema supports them:
 * http://bo.wix.com/bi-catalog-webapp/#/sources/72
 */

var BaseLogger = function() {
    function BaseLogger(appName, appVersion, reporter, params) {
        _classCallCheck(this, BaseLogger);

        var defaultParams = {
            appId: null,
            widgetId: null,
            metasiteId: null,
            sessionId: _sessionManager2.default.getSessionId(),
            isServerSide: null,
            disableAutoLoadFinish: false,
            phasesConfig: phasesConfigValues.SEND_ON_START,
            interactionTimeout: null,
            timeoutHook: null,
            startHook: null,
            endHook: null,
            isPersistent: false
        };

        var paramsWithDefaults = Object.assign({}, defaultParams, params);
        this.appName = appName;
        this.appVersion = appVersion;
        this.appId = paramsWithDefaults.appId;
        this.widgetId = paramsWithDefaults.widgetId;
        this.metasiteId = paramsWithDefaults.metasiteId;

        this.isServerSide = paramsWithDefaults.isServerSide;
        this.params = {
            sessionId: paramsWithDefaults.sessionId
        };
        this.disableAutoLoadFinish = paramsWithDefaults.disableAutoLoadFinish;
        this.phasesConfig = paramsWithDefaults.phasesConfig;
        this._appLoadedCalled = {};

        this.reporter = reporter || new _reporter2.default();
        this.loadingPhases = new _loadingPhases2.default(appName);
        this.dataSourceBase = new _dataSource2.default({
            appName: appName
        });

        this._outgoingInteractions = {};
        this.interactionTimeout = paramsWithDefaults.interactionTimeout;
        this.timeoutHook = paramsWithDefaults.timeoutHook;
        this.startHook = paramsWithDefaults.startHook;
        this.endHook = paramsWithDefaults.endHook;
        this.isPersistent = paramsWithDefaults.isPersistent;

        this.times = new _times2.default(appName);
    }

    BaseLogger.prototype._report = function _report(dataSource, reporterEndpoint) {
        return this.reporter.report(dataSource.mergeItems(), reporterEndpoint);
    };

    BaseLogger.prototype.getAppName = function getAppName() {
        return this.appName;
    };

    BaseLogger.prototype.getAppVersion = function getAppVersion() {
        return this.appVersion;
    };

    BaseLogger.prototype.getReporter = function getReporter() {
        return this.reporter;
    };

    BaseLogger.prototype.getParam = function getParam(paramName) {
        return this.params[paramName];
    };

    BaseLogger.prototype._isDisableAutoLoadFinish = function _isDisableAutoLoadFinish() {
        return this.disableAutoLoadFinish;
    };

    BaseLogger.prototype.isDisableAutoLoadFinish = function isDisableAutoLoadFinish() {
        return this._isDisableAutoLoadFinish();
    };

    BaseLogger.prototype.reportNetworkAnalysis = function reportNetworkAnalysis() {
        var _this = this;

        var resources = _performance2.default.getResources();
        setTimeout(function() {
            try {
                var resourceDataItem = new _resourceItem2.default(_this.sessionId);

                var analysis = resourceDataItem.performNetworkAnalysis(resources);
                if (!analysis) {
                    return;
                }
                var dataSource = _this.dataSource.addItem(resourceDataItem).addItem(analysis);

                _this._report(dataSource);
            } catch (e) {
                console.error('[fedops] Failed to report resource metrics', e);
            }
        }, 1000);
    };

    /**
     * Manual report for widget load start - Should only be used if your widget doesn't have its own .vm / .ejs file
     * Call this method at the earliest point possible when your widget starts loading.
     */


    BaseLogger.prototype.appLoadStarted = function appLoadStarted() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            appId = _ref.appId;

        this.times.setLoadStarted();

        var dataSource = this.dataSource.addItem(new _biLoadStartItem2.default(this.sessionId)).addItem(new _biAppContextItem2.default({
            appId: appId || this.appId,
            widgetId: this.widgetId,
            isServerSide: this.isServerSide
        }));

        if (appId) {
            dataSource.addItem(new _dataItem2.default({
                appName: appId
            }));
        }

        return this._report(dataSource, this.isPersistent ? _conf.PERFORMANCE_BI_ENPOINT : _conf.FEDOPS_BI_ENDPOINT);
    };

    /**
     * Final phase.
     * Call this method when your application finishes loading and after all custom phases.
     * @param appId
     */


    BaseLogger.prototype.appLoaded = function appLoaded() {
        var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            appId = _ref2.appId;

        if (this._appLoadedCalled[appId] || this._appLoadedCalled[this.appName]) {
            return;
        }

        BaseLogger._clearLoadTimeout();
        BaseLogger._markAndMeasureAppLoad();
        this._appLoadedCalled[appId || this.appName] = true;

        this._sendLastAppLoadPhaseIfNeeded();
        this.reportNetworkAnalysis();

        var dataSource = this.dataSource.addItem(new _biLoadFinishItem2.default(this.sessionId)).addItem(new _biAppContextItem2.default({
            appId: appId || this.appId,
            widgetId: this.widgetId,
            isServerSide: this.isServerSide
        })).addItem(new _durationItem2.default(this.times.getAppLoadTime()).setFirstRequestDuration(this.times.getFirstRequestDuration()));

        if (appId) {
            dataSource.addItem(new _dataItem2.default({
                appName: appId
            }));
        }

        if (this.phasesConfig === phasesConfigValues.SEND_ON_APP_LOADED) {
            var phasesOfApp = this.loadingPhases.getPhases({
                appId: appId
            });
            if (phasesOfApp.length > 0) {
                dataSource.addItem(new _loadingPhaseCollectionItem2.default(phasesOfApp));
            }
        }

        return this._report(dataSource, this.isPersistent ? _conf.PERFORMANCE_BI_ENPOINT : _conf.FEDOPS_BI_ENDPOINT);
    };

    /**
     * Start of an app loading phase, reports end of previous phase if configured
     * Sends phase event (http://bo.wix.com/bi-catalog-webapp/#/sources/72/events/13)
     * @param name of the step
     * @param appId that the step belongs to
     * @param widgetId that the step belongs to
     */


    BaseLogger.prototype.appLoadingPhaseStart = function appLoadingPhaseStart(name) {
        var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            appId = _ref3.appId,
            widgetId = _ref3.widgetId;

        if (this.phasesConfig === phasesConfigValues.SEND_ON_START) {
            this.loadingPhases.createCodeParsingPhaseIfNotExist({
                appId: appId,
                widgetId: widgetId
            });
        }

        this.loadingPhases.saveLoadingPhase({
            name: name,
            appId: appId,
            widgetId: widgetId
        });
        this._sendPreviousPhaseIfNeeded(name, {
            appId: appId,
            widgetId: widgetId
        });

        _performance2.default.mark('[fedops] ' + name + ' started');
    };

    BaseLogger.prototype._sendPreviousPhaseIfNeeded = function _sendPreviousPhaseIfNeeded(name) {
        var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            appId = _ref4.appId,
            widgetId = _ref4.widgetId;

        if (this.phasesConfig === phasesConfigValues.SEND_ON_START) {
            var previousPhase = this.loadingPhases.getPhasePreviousTo({
                name: name,
                appId: appId,
                widgetId: widgetId
            });

            _performance2.default.mark('[fedops] ' + previousPhase.name + ' finished');

            var loadingPhaseDataItem = new _loadingPhaseItemPrefixed2.default(previousPhase);
            var loadingPhaseBiItem = new _biLoadPhaseItem2.default(this.sessionId);

            var dataSource = this.dataSource.addItem(loadingPhaseDataItem).addItem(loadingPhaseBiItem);

            this._report(dataSource);
        }
    };

    /**
     * End of an app loading phase, reports end of previous phase
     * Sends phase event (http://bo.wix.com/bi-catalog-webapp/#/sources/72/events/13)
     * @param name of the step
     * @param appId that the step belongs to
     * @param widgetId that the step belongs to
     * @param widgetArray that are related to this step
     */


    BaseLogger.prototype.appLoadingPhaseFinish = function appLoadingPhaseFinish(name) {
        var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            appId = _ref5.appId,
            widgetId = _ref5.widgetId,
            widgetArray = _ref5.widgetArray;

        if (this.phasesConfig === phasesConfigValues.SEND_ON_START) {
            throw new Error('To use appLoadingPhaseFinish you must create the logger with the "phasesConfig: SEND_ON_FINISH or SEND_ON_APP_LOADED" param');
        }

        _performance2.default.mark('[fedops] ' + name + ' finished');

        if (this.phasesConfig === phasesConfigValues.SEND_ON_APP_LOADED) {
            this.loadingPhases.endLoadingPhase({
                name: name,
                appId: appId,
                widgetId: widgetId,
                widgetArray: widgetArray
            });
        } else {
            var loadingPhase = this.loadingPhases.getAppLoadingPhaseData({
                name: name,
                appId: appId,
                widgetId: widgetId
            });

            if (!loadingPhase) {
                throw new Error('Cannot report end of a phase that wasn\'t started. Phase ' + name + ' doesn\'t exist');
            }

            var loadingPhaseDataItem = new _loadingPhaseItem2.default(loadingPhase);
            var loadingPhaseBiItem = new _biLoadPhaseItem2.default(this.sessionId);
            var eventContextDataItem = new _biAppContextItem2.default({
                appId: appId,
                widgetId: widgetId,
                widgetArray: widgetArray,
                isServerSide: this.isServerSide
            });

            var dataSource = this.dataSource.addItem(loadingPhaseDataItem).addItem(loadingPhaseBiItem).addItem(eventContextDataItem);

            return this._report(dataSource, this.isPersistent ? _conf.PERFORMANCE_BI_ENPOINT : _conf.FEDOPS_BI_ENDPOINT);
        }
    };

    BaseLogger.prototype._sendLastAppLoadPhaseIfNeeded = function _sendLastAppLoadPhaseIfNeeded() {
        var appLoadingPhase = this.loadingPhases.getNextPhaseToReport();
        var shouldReportLastPhase = this.phasesConfig === phasesConfigValues.SEND_ON_START && appLoadingPhase && appLoadingPhase.name !== _loadingPhases.CODE_PARSING_PHASE_NAME;

        if (shouldReportLastPhase) {
            this._report(this.dataSource.addItem(new _loadingPhaseItemPrefixed2.default(appLoadingPhase)).addItem(new _biLoadPhaseItem2.default(this.sessionId)));
        }
    };

    BaseLogger._clearLoadTimeout = function _clearLoadTimeout() {
        if ((0, _env.env)() && (0, _env.env)().fedops && typeof(0, _env.env)().fedops.clearLoadTimeout === 'function') {
            (0, _env.env)().fedops.clearLoadTimeout();
        }
    };

    BaseLogger.prototype.clearResourceTimings = function clearResourceTimings() {
        _performance2.default.clearResourceTimings();
    };

    BaseLogger._markAndMeasureAppLoad = function _markAndMeasureAppLoad() {
        _performance2.default.mark('[fedops] app-loaded');
        _performance2.default.measure('[fedops] app-loaded', 'navigationStart', '[fedops] app-loaded');
    };

    /**
     * Custom interaction start (http://bo.wix.com/bi-catalog-webapp/#/sources/72/events/15)
     * @param {String} interactionName  interaction name
     */


    BaseLogger.prototype.interactionStarted = function interactionStarted(interactionName) {
        var _this2 = this;

        var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            interactionTimeout = _ref6.interactionTimeout,
            startHook = _ref6.startHook,
            timeoutHook = _ref6.timeoutHook;

        _performance2.default.mark(interactionName + ' started');
        var scheduleTimeoutEvent = function scheduleTimeoutEvent() {
            if (interactionTimeout || _this2.interactionTimeout) {
                return setTimeout(function() {
                    var dataSource = _this2.dataSource.addItem({
                        interactionName: interactionName
                    }).addItem({
                        errorType: 'timeout'
                    }).addItem(new _biErrorItem2.default(_this2.sessionId));

                    _this2._report(dataSource);
                    callHook(timeoutHook || _this2.timeoutHook, {
                        name: interactionName,
                        timeout: interactionTimeout || _this2.interactionTimeout
                    });
                }, interactionTimeout || _this2.interactionTimeout);
            }
        };

        var dataSource = this.dataSource.addItem({
            name: interactionName
        }).addItem(new _biInteractionStartItem2.default(this.sessionId));

        this._outgoingInteractions[interactionName] = {
            timestamp: _performance2.default.now(),
            timeout: interactionTimeout || this.interactionTimeout
        };
        this._report(dataSource);
        callHook(startHook || this.startHook, {
            name: interactionName
        });

        var timeoutId = scheduleTimeoutEvent();
        return {
            timeoutId: timeoutId
        };
    };

    /**
     * Custom interaction end (http://bo.wix.com/bi-catalog-webapp/#/sources/72/events/16)
     * @param {String} interactionName  interaction name
     */


    BaseLogger.prototype.interactionEnded = function interactionEnded(interactionName) {
        var _this3 = this;

        var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            timeoutId = _ref7.timeoutId,
            endHook = _ref7.endHook;

        _performance2.default.mark(interactionName + ' ended');
        _performance2.default.measure(interactionName + ' duration', interactionName + ' started', interactionName + ' ended');

        if (timeoutId) {
            clearTimeout(timeoutId);
        }

        var getInteractionFromWindowIfPresent = function getInteractionFromWindowIfPresent(actualEnv) {
            return actualEnv.fedops && actualEnv.fedops.apps && actualEnv.fedops.apps[_this3.appName] && actualEnv.fedops.apps[_this3.appName].interactions && actualEnv.fedops.apps[_this3.appName].interactions[interactionName];
        };

        var interaction = this._outgoingInteractions[interactionName] || getInteractionFromWindowIfPresent((0, _env.env)());
        var duration = interaction ? Math.floor(_performance2.default.now() - interaction.timestamp) : '';

        callHook(endHook || this.endHook, {
            name: interactionName,
            duration: duration,
            timeout: this._outgoingInteractions[interactionName] && this._outgoingInteractions[interactionName].timeout
        });

        var dataSource = this.dataSource.addItem({
            name: interactionName
        }).addItem({
            duration: duration
        }).addItem(new _biInteractionEndItem2.default(this.sessionId));

        delete this._outgoingInteractions[interactionName];

        this._report(dataSource);
    };

    BaseLogger.prototype.getLoggerForWidget = function getLoggerForWidget(_ref8) {
        var appName = _ref8.appName,
            appId = _ref8.appId,
            widgetId = _ref8.widgetId,
            version = _ref8.version;

        var widgetAppName = appName || appId + '_' + widgetId;
        var widgetVersion = version || this.getAppVersion();
        var reporter = new _reporter2.default(this.reporter.factory);

        var config = {
            isServerSide: this.isServerSide,
            appId: appId,
            widgetId: widgetId,
            sessionId: this.sessionId,
            phasesConfig: phasesConfigValues.SEND_ON_APP_LOADED,
            isPersistent: this.isPersistent
        };

        return new BaseLogger(widgetAppName, widgetVersion, reporter, config);
    };

    _createClass(BaseLogger, [{
        key: 'dataSource',
        get: function get() {
            return this.dataSourceBase.clone();
        }
    }, {
        key: 'sessionId',
        get: function get() {
            return this.getParam('sessionId');
        }
    }]);

    return BaseLogger;
}();

exports.default = BaseLogger;
var phasesConfigValues = exports.phasesConfigValues = {
    SEND_ON_START: 'SEND_ON_START',
    SEND_ON_FINISH: 'SEND_ON_FINISH',
    SEND_ON_APP_LOADED: 'SEND_ON_APP_LOADED'
};