'use strict';

exports.__esModule = true;

var _location = require('../app-data/location');

var _location2 = _interopRequireDefault(_location);

var _env = require('../env');

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

/**
 * env().performance wrappers
 */
exports.default = {
    getNavigation: function getNavigation() {
        return typeof(0, _env.env)() !== 'undefined' && (0, _env.env)().performance ? (0, _env.env)().performance.navigation : {};
    },


    /**
     * get all loaded resources
     */
    getResources: function getResources() {
        var emptyVal = [];
        try {
            return (0, _env.env)() && (0, _env.env)().performance && (0, _env.env)().performance.getEntriesByType && (0, _env.env)().performance.getEntriesByType('resource') || emptyVal;
        } catch (e) {
            return emptyVal;
        }
    },
    getTiming: function getTiming() {
        return (0, _env.env)() && (0, _env.env)().performance ? (0, _env.env)().performance.timing : {};
    },
    clearResourceTimings: function clearResourceTimings() {
        (0, _env.env)() && (0, _env.env)().performance && (0, _env.env)().performance.clearResourceTimings && (0, _env.env)().performance.clearResourceTimings();
    },


    /**
     * Duration relative to navigation start (env().performance.timing.navigationStart)
     * fallback to: performance.now -> now (nodejs) -> getTime()
     */
    now: function now() {
        if ((0, _env.env)() && (0, _env.env)().performance && (0, _env.env)().performance.now) {
            return (0, _env.env)().performance.now();
        } else if (typeof performance !== 'undefined' && performance && performance.now) {
            return performance.now();
        }

        return new Date().getTime();
    },


    /**
     * Duration from fetch start to response end
     */
    responseEndTime: function responseEndTime() {
        if (typeof performance !== 'undefined' && performance && performance.timing && performance.timing.responseEnd && performance.timing.fetchStart) {
            return performance.timing.responseEnd - performance.timing.fetchStart;
        }
    },


    /**
     * Create a performance timestamp
     */
    mark: function mark(name) {
        if (_location2.default.isFedopsDev()) {
            (0, _env.env)() && (0, _env.env)().performance && (0, _env.env)().performance.mark && (0, _env.env)().performance.mark(name);
        }
    },


    /**
     * Record a performance measurement
     */
    measure: function measure(name, startMark, endMark) {
        if (_location2.default.isFedopsDev()) {
            (0, _env.env)() && (0, _env.env)().performance && (0, _env.env)().performance.measure && (0, _env.env)().performance.measure(name, startMark, endMark);
        }
    }
};