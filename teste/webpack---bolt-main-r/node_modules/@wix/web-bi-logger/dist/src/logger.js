"use strict";
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
var __importStar = (this && this.__importStar) || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
        for (var k in mod)
            if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var wix_bi_logger_client_1 = __importDefault(require("@wix/wix-bi-logger-client"));
var assert = __importStar(require("./lib/assert"));
var publishers_1 = require("./lib/publishers");
var utils_1 = require("./lib/utils");
var constants_1 = require("./constants");
var constants_2 = require("./constants");
exports.PublishMethods = constants_2.PublishMethods;
var env_1 = require("./lib/env");
exports.setHost = env_1.setHost;
var filterContext = function(context) {
    return Object.keys(context).reduce(function(res, key) {
        if (constants_1.EventContextMap[key]) {
            res[constants_1.EventContextMap[key]] = context[key];
        }
        return res;
    }, {});
};
var getUserContextFromCookies = function() {
    return utils_1.getCookies({
        clientId: '_wixCIDX',
        uuid: {
            name: '_wixUIDX',
            transform: function(value) {
                return typeof value === 'string' && value.split('|')[1];
            },
        },
    });
};
var validatePublishMethod = function(publishMethod) {
    return (Object.keys(constants_1.PublishMethods)
        .map(function(key) {
            return constants_1.PublishMethods[key];
        })
        .indexOf(publishMethod) !== -1);
};
var Factory = /** @class */ (function() {
    function Factory(options) {
        this.options = options;
        this.initialized = false;
        this.muted = false;
        assert.ok(!options.publishMethod || validatePublishMethod(options.publishMethod), "Unsupported publish method \"" + options.publishMethod + "\"");
        this.factory = wix_bi_logger_client_1.default.factory(options);
        this.withUserContext(getUserContextFromCookies());
    }
    Factory.prototype.initFactory = function() {
        if (this.initialized) {
            return this.factory;
        }
        this.initialized = true;
        var publisher = publishers_1.getPublisher(this.options, this.transformer);
        return this.factory.addPublisher(publisher);
    };
    Factory.prototype.withTransformer = function(transformer) {
        assert.defined(transformer, 'Transformer must be provided');
        assert.ok(typeof transformer === 'function' ||
            (transformer && transformer.postMessage), 'Valid transformer must be provided');
        this.transformer = transformer;
        return this;
    };
    Factory.prototype.withUserContext = function(context) {
        assert.defined(context, 'User context object must be provided');
        this.updateDefaults(filterContext(context));
        return this;
    };
    Factory.prototype.withUoUContext = function(context) {
        assert.defined(context, 'UoU context object must be provided');
        this.updateDefaults(filterContext(context));
        return this;
    };
    Factory.prototype.updateDefaults = function(params) {
        this.factory.updateDefaults(params);
        return this;
    };
    Factory.prototype.setMuted = function(muted) {
        this.muted = muted;
        return this;
    };
    Factory.prototype.logger = function(options) {
        if (options === void 0) {
            options = {};
        }
        var logger = this.initFactory().logger(options);
        var self = this;
        return {
            log: function(params, context) {
                if (self.muted) {
                    return Promise.resolve();
                }
                return logger.log(params, context);
            },
        };
    };
    return Factory;
}());
exports.Factory = Factory;
exports.factory = function(options) {
    if (options === void 0) {
        options = {};
    }
    return new Factory(options);
};
//# sourceMappingURL=logger.js.map