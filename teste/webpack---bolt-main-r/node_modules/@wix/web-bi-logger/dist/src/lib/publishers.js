"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var utils_1 = require("./utils");
var env_1 = require("./env");
var constants_1 = require("../constants");
var errors_1 = require("./errors");
var browser_1 = require("./browser");
var transport_1 = require("./transport");
var baseTransformer = function(params) {
    if (params === void 0) {
        params = {};
    }
    params.ms = Math.round(browser_1.now());
    params._lv = constants_1.LoggerVersion;
    return params;
};
var resolveTransformer = function(options, transformer) {
    var resolvedTransformer;
    if (transformer) {
        if (typeof transformer === 'function') {
            resolvedTransformer = transformer;
        } else if (transformer.postMessage &&
            options.publishMethod === constants_1.PublishMethods.PostMessage) {
            resolvedTransformer = transformer.postMessage;
        }
    }
    return function(params) {
        params = baseTransformer(params);
        return resolvedTransformer ? resolvedTransformer(params) : params;
    };
};

function imagePublisher(options) {
    if (options === void 0) {
        options = {};
    }
    return function image(params, context) {
        if (context === void 0) {
            context = {};
        }
        var url = utils_1.buildBiUrl(options, params, context);
        return transport_1.pixelTransport(url, context.image);
    };
}
exports.imagePublisher = imagePublisher;

function beaconPublisher(options) {
    if (options === void 0) {
        options = {};
    }
    return function beacon(params, context) {
        if (context === void 0) {
            context = {};
        }
        var url = utils_1.buildBiUrl(options, params, context);
        return transport_1.beaconTransport(url).catch(function() {
            return transport_1.pixelTransport(url, context.image);
        });
    };
}
exports.beaconPublisher = beaconPublisher;

function fetchPublisher(options) {
    if (options === void 0) {
        options = {};
    }
    return function fetch(params, context) {
        if (context === void 0) {
            context = {};
        }
        var url = utils_1.buildBiUrl(options, params, context);
        return transport_1.fetchTransport(url).catch(function(error) {
            return error instanceof errors_1.APINotSupportedError ?
                transport_1.xhrTransport(url) :
                Promise.reject(error);
        });
    };
}
exports.fetchPublisher = fetchPublisher;

function xhrPublisher(options) {
    if (options === void 0) {
        options = {};
    }
    return function xhr(params, context) {
        if (context === void 0) {
            context = {};
        }
        var url = utils_1.buildBiUrl(options, params, context);
        return transport_1.xhrTransport(url);
    };
}
exports.xhrPublisher = xhrPublisher;

function postMessagePublisher() {
    return function postMessage(message, context) {
        if (context === void 0) {
            context = {};
        }
        return transport_1.postMessageTransport(message, context);
    };
}
exports.postMessagePublisher = postMessagePublisher;
exports.resolvePublisher = function(options) {
    var publisherFactory;
    if (options.publishMethod === constants_1.PublishMethods.PostMessage) {
        publisherFactory = postMessagePublisher;
    } else if (env_1.isWebWorker()) {
        publisherFactory = fetchPublisher;
    } else {
        publisherFactory = beaconPublisher;
    }
    return publisherFactory(options);
};

function getPublisher(options, paramTransformer) {
    var publisher = exports.resolvePublisher(options);
    var transformer = resolveTransformer(options, paramTransformer);
    return function(params, context) {
        return publisher(transformer(params), context);
    };
}
exports.getPublisher = getPublisher;
//# sourceMappingURL=publishers.js.map