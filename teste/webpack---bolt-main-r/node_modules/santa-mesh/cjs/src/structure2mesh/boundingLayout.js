'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");

function degreesToRadians(angleInDegrees) {
    return angleInDegrees * Math.PI / 180;
}
var getBoundingWidthWithRotation = function(layout, angleInRadians) {
    return Math.abs(layout.width * Math.cos(angleInRadians)) + Math.abs(layout.height * Math.sin(angleInRadians));
};
var getBoundingHeightWithRotation = function(layout, angleInRadians) {
    return Math.abs(layout.width * Math.sin(angleInRadians)) + Math.abs(layout.height * Math.cos(angleInRadians));
};
var getXAfterRotation = function(layout, rotatedWidth) {
    return layout.x - (rotatedWidth - layout.width) / 2;
};
var getYAfterRotation = function(layout, rotatedHeight) {
    return layout.y - (rotatedHeight - layout.height) / 2;
};

function rotateAndGetBoundingLayout(layout, rotationInDegrees) {
    if (rotationInDegrees === 0) {
        return _.pick(layout, ['x', 'y', 'width', 'height']);
    }
    var angleInRadians = degreesToRadians(rotationInDegrees);
    var boundingWidth = getBoundingWidthWithRotation(layout, angleInRadians);
    var boundingHeight = getBoundingHeightWithRotation(layout, angleInRadians);
    return {
        x: Math.floor(getXAfterRotation(layout, boundingWidth)),
        y: Math.floor(getYAfterRotation(layout, boundingHeight)),
        width: Math.ceil(boundingWidth),
        height: Math.ceil(boundingHeight)
    };
}

function getBoundingLayout(layout) {
    return rotateAndGetBoundingLayout(layout, layout.rotationInDegrees || 0);
}
var getCompLayoutWithXY = function(component) {
    return _.assign({
        x: component.left,
        y: component.top
    }, _.pick(component, ['width', 'height', 'rotationInDegrees']));
};
var getCompLayoutWithLeftTop = function(_a) {
    var left = _a.x,
        top = _a.y,
        width = _a.width,
        height = _a.height,
        rotationInDegrees = _a.rotationInDegrees;
    return ({
        left: left,
        top: top,
        width: width,
        height: height,
        rotationInDegrees: rotationInDegrees
    });
};
exports.getComponentBoundingBox = function(component) {
    var boundingLayout = getBoundingLayout(getCompLayoutWithXY(component));
    return getCompLayoutWithLeftTop(_.assign(boundingLayout, {
        rotationInDegrees: 0
    }));
};
//# sourceMappingURL=boundingLayout.js.map